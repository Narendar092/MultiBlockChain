INSERT INTO [XIBOScript_T] ([ID],
 [FKiBOID],
 [FKiBOAttributeID],
 [sExecutionType],
 [sName],
 [sDescription],
 [sScript],
 [sType],
 [sLanguage],
 [StatusTypeID],
 [CreatedTime],
 [CreatedBy],
 [CreatedBySYSID],
 [UpdatedBy],
 [UpdatedBySYSID],
 [UpdatedTime],
 [FKiApplicationID],
 [sMethodName],
 [sVersion],
 [iOrder],
 [OrganisationID],
 [izXDeleted],
 [zXCrtdBy],
 [zXCrtdWhn],
 [zXUpdtdBy],
 [zXUpdtdWhn],
 [sLevel],
 [sCategory],
 [sClassification],
 [XIGUID],
 [XIDeleted],
 [XICreatedBy],
 [XIUpdatedBy],
 [XICreatedWhen],
 [XIUpdatedWhen],
 [sTag],
 [FKiTagSpaceID],
 [FKiVersionID],
 [FKiBOIDXIGUID],
 [FKiBOAttributeIDXIGUID],
 [FKiApplicationIDXIGUID],
 [FKiTagSpaceIDXIGUID],
 [FKiVersionIDXIGUID]) Values(N'20548',
 N'296',
 N'0',
 NULL,
 N'Covia Post Calculation',
 N'Covia Discount Calculation',
 N'public static CResult PolicyMainCal(List<CNV> lParam)          {              XIInstanceBase oIB = new XIInstanceBase();              PolicyCalculation Pcal = new PolicyCalculation();              CResult oResult = new CResult();              CNV oNV = new CNV();              oNV.sName = "sCode";              try              {                  List<string> Info = new List<string>();                  string sUID = lParam.Where(m => m.sName == "sUID").FirstOrDefault().sValue;                  int iInsatnceID = Convert.ToInt32(lParam.Where(m => m.sName == "iInsatnceID").FirstOrDefault().sValue);                  int iUserID = Convert.ToInt32(lParam.Where(m => m.sName == "iUserID").FirstOrDefault().sValue);                  int iCustomerID = Convert.ToInt32(lParam.Where(m => m.sName == "iCustomerID").FirstOrDefault().sValue);                  string sDataBase = lParam.Where(m => m.sName == "sDataBase").FirstOrDefault().sValue;                  string sProductName = lParam.Where(m => m.sName == "ProductName").FirstOrDefault().sValue;                  string sVersion = lParam.Where(m => m.sName == "Version").FirstOrDefault().sValue;                  string sSessionID = lParam.Where(m => m.sName == "sSessionID").FirstOrDefault().sValue;                  string sProductCode = lParam.Where(m => m.sName == "ProductCode").FirstOrDefault().sValue;                  int iQuoteID = Convert.ToInt32(lParam.Where(m => m.sName == "iQuoteID").FirstOrDefault().sValue);                  Info.Add("Method Name : DBScript Execution for Calculation with QuoteID " + iQuoteID + " and Instance ID: " + iInsatnceID);                  double GrossAmount = Convert.ToDouble(lParam.Where(m => m.sName == "rGrossPremium").FirstOrDefault().sValue);                  //oResult = Pcal.Calculation(iInsatnceID, iUserID, iCustomerID, sDataBase, sProductName, sVersion, sProductCode, sSessionID, sUID, iQuoteID);                  oResult = Pcal.Calculation(iInsatnceID, iUserID, iCustomerID, sVersion, sProductCode, iQuoteID, GrossAmount);                  // oResult.xiStatus = 00;                  oNV.sValue = "00";                  string sInfo = "INFO: " + string.Join(",\r\n ", Info);                  oResult.sMessage = sInfo;                  oIB.SaveErrortoDB(oResult);              }              catch (Exception ex)              {                  oResult.sMessage = "ERROR: [" + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                  oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                  oResult.oResult = "Error";                  oNV.sValue = "100";                  oIB.SaveErrortoDB(oResult);              }              oResult.oCollectionResult.Add(oNV);              return oResult;          }            public class PolicyBaseCalc          {              public int iInstanceID { get; set; }              public string PostCodeArea { get; set; }              public CResult GetAgeFromDOB(string dDOB, string PresentDate)              {                  XIInstanceBase oIB = new XIInstanceBase();                  CResult oresult = new CResult();                  try                  {                      var xyz = Convert.ToDateTime(dDOB);                      var Now = Convert.ToDateTime(PresentDate);                      int iAge = DateTime.Now.Year - Convert.ToDateTime(dDOB).Year;                      if (DateTime.Now < Convert.ToDateTime(dDOB).AddYears(iAge)) iAge--;                      oresult.oResult = iAge;                      oresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      int Years = new DateTime(DateTime.Now.Subtract(xyz).Ticks).Year - 1;                      DateTime PastYearDate = xyz.AddYears(Years);                      int Months = 0;                      for (int i = 1; i <= 12; i++)                      {                          if (PastYearDate.AddMonths(i) == Now)                          {                              Months = i;                              break;                          }                          else if (PastYearDate.AddMonths(i) >= Now)                          {                              Months = i - 1;                              break;                          }                      }                      var Yearmon = Years + "." + Months;                  }                  catch (Exception ex)                  {                      oresult.sMessage = "ERROR: [" + oresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oresult.LogToFile();                      oIB.SaveErrortoDB(oresult, iInstanceID);                  }                  return oresult;              }              public CResult GetAgeFromDate(string dDOB, string PresentDate)              {                  XIInstanceBase oIB = new XIInstanceBase();                  CResult oresult = new CResult();                  try                  {                      var EffectDate = Convert.ToDateTime(dDOB);                      var Now = Convert.ToDateTime(PresentDate);                        int Years = new DateTime(DateTime.Now.Subtract(EffectDate).Ticks).Year - 1;                      DateTime PastYearDate = EffectDate.AddYears(Years);                      int Months = 0;                      for (int i = 1; i <= 12; i++)                      {                          if (PastYearDate.AddMonths(i) == Now)                          {                              Months = i;                              break;                          }                          else if (PastYearDate.AddMonths(i) >= Now)                          {                              Months = i - 1;                              break;                          }                      }                      string rAge = Years + "." + Months;                      oresult.oResult = Convert.ToDouble(rAge);                      oresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                  }                  catch (Exception ex)                  {                      oresult.sMessage = "ERROR: [" + oresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oresult.LogToFile();                      oIB.SaveErrortoDB(oresult, iInstanceID);                  }                  return oresult;              }                public CResult GetTotalAmount(double rGrossAmount)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                        CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      oNV.sName = "sMessage";                      oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Normal.ToString();                      oNV1.sName = "oResult";                      oNV1.sValue = rGrossAmount.ToString();                      oNV2.sName = "LoadFactorName";                      oNV2.sValue = "Total Amount";                      oNV3.sName = "Type";                      oNV3.sValue = "Percent";                      oCresult.oCollectionResult.Add(oNV);                      oCresult.oCollectionResult.Add(oNV1);                      oCresult.oCollectionResult.Add(oNV2);                      oCresult.oCollectionResult.Add(oNV3);                      oCresult.oResult = rGrossAmount;                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }                public CResult GetDriverDiscount(int iAge)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      oNV.sName = "sMessage";                      oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Normal.ToString();                      CNV oNV1 = new CNV();                      oNV1.sName = "oResult";                      oNV1.sValue = "+0";                      CNV oNV2 = new CNV();                      oNV2.sName = "LoadFactorName";                      oNV2.sValue = "Driver Discount";                      CNV oNV3 = new CNV();                      oNV3.sName = "Type";                      oNV3.sValue = "Percent";                      //if(rTotalAmount>0)                      double rDiscount = 0.25;                          oCresult.oResult = rDiscount;                      oNV1.sValue = rDiscount.ToString();                      oCresult.oCollectionResult.Add(oNV);                      oCresult.oCollectionResult.Add(oNV1);                      oCresult.oCollectionResult.Add(oNV2);                      oCresult.oCollectionResult.Add(oNV3);                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }              public CResult GetNoofDriver(List<XIIBO> DriverList)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      // List<int> LdriverAge = new List<int>();                      bool bRelation = true;                      if (DriverList.Count <= 3)                      {                          foreach (var oDrvr in DriverList)                          {                              var AgeResult = GetAgeFromDOB(oDrvr.AttributeI("ddateofbirth").sValue, DateTime.Now.ToString());                              int iAge = 0;                              int.TryParse(AgeResult.oResult.ToString(), out iAge);                              //LdriverAge.Add(iAge);                              if (iAge >= 25)                              {                                  var RelationShip = oDrvr.AttributeI("iRelationship").sValue;                                  if (RelationShip == "30" || RelationShip == "40")                                  {                                      bRelation = false;                                      oNV.sName = "sMessage";                                      oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                                      oNV1.sName = "oResult";                                      oNV1.sValue = bRelation.ToString();                                      oNV2.sName = "LoadFactorName";                                      oNV2.sValue = "Family Policies are not applicable for Discount";                                      oNV3.sName = "Type";                                      oNV3.sValue = "Percent";                                      oCresult.oCollectionResult.Add(oNV);                                      oCresult.oCollectionResult.Add(oNV1);                                      oCresult.oCollectionResult.Add(oNV2);                                      oCresult.oCollectionResult.Add(oNV3);                                  }                              }                              else                              {                                  bRelation = false;                                  oNV.sName = "sMessage";                                  oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                                  oNV1.sName = "oResult";                                  oNV1.sValue = bRelation.ToString();                                  oNV2.sName = "LoadFactorName";                                  //oNV2.sValue = "Driver Age less than:" + iAge + " is not applicable for Discount";                                  oNV2.sValue = "Minimum age of all drivers: 25+:" + iAge + " is not eligible for discount";                                  oNV3.sName = "Type";                                  oNV3.sValue = "Percent";                                  oCresult.oCollectionResult.Add(oNV);                                  oCresult.oCollectionResult.Add(oNV1);                                  oCresult.oCollectionResult.Add(oNV2);                                  oCresult.oCollectionResult.Add(oNV3);                              }                          }                      }                      else                      {                          bRelation = false;                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = bRelation.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Maximum 3 drivers applicable for Discount not more than";//"Discount will be apllicable for Maximum number of drivers is:3 but your drivers is:"+ DriverList.Count;                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                        oCresult.oResult = bRelation;                      oNV1.sValue = bRelation.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }              public CResult GetFullorPartTime(string sType)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                        CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      var sFullorPartTime = sType;                      //iMTFullTimeorPartTime                      bool bJobType = false;                      if (!string.IsNullOrEmpty(sType))                      {                          bJobType = true;                        }                      else                      {                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = bJobType.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Please select any one full/part time";                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                      oCresult.oResult = bJobType;                      oNV1.sValue = bJobType.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }              public CResult GetTMType(string sTRType)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      //if(rTotalAmount>0)                      bool TRtype = true;                      if (sTRType == "30")                      {                          TRtype = false;                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = TRtype.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Discount will be applied for only Transferred";                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                      oCresult.oResult = TRtype;                      oNV1.sValue = TRtype.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }              public CResult GetNCBandYearValue(string MTNCBType, string NoOfYears)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      //if(rTotalAmount>0)                      bool bNCBYears = false;                      //car 20 //van 30                      if (MTNCBType == "20" || MTNCBType == "30")                      {                          int YearsType = Convert.ToInt32(NoOfYears);                          //Type60 >4 years                          if (YearsType >= 60)                          {                              bNCBYears = true;                          }                          else                          {                              bNCBYears = false;                              oNV.sName = "sMessage";                              oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                              oNV1.sName = "oResult";                              oNV1.sValue = bNCBYears.ToString();                              oNV2.sName = "LoadFactorName";                              oNV2.sValue = "Discount will be applied for 4Years and above";                              oNV3.sName = "Type";                              oNV3.sValue = "Percent";                              oCresult.oCollectionResult.Add(oNV);                              oCresult.oCollectionResult.Add(oNV1);                              oCresult.oCollectionResult.Add(oNV2);                              oCresult.oCollectionResult.Add(oNV3);                          }                        }                      //40 Motor Trade                      else if (MTNCBType == "40")                      {                          //var NoOfYears = ostructureInstance.XIIValue("iMTNumberofYearsNCB").sValue;                          int YearsType = Convert.ToInt32(NoOfYears);                          //60 >4 years                          if (YearsType >= 30)                          {                              bNCBYears = true;                          }                          else                          {                              bNCBYears = false;                              oNV.sName = "sMessage";                              oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                              oNV1.sName = "oResult";                              oNV1.sValue = bNCBYears.ToString();                              oNV2.sName = "LoadFactorName";                              oNV2.sValue = "Discount will be applied for 1year and above";                              oNV3.sName = "Type";                              oNV3.sValue = "Percent";                              oCresult.oCollectionResult.Add(oNV);                              oCresult.oCollectionResult.Add(oNV1);                              oCresult.oCollectionResult.Add(oNV2);                              oCresult.oCollectionResult.Add(oNV3);                          }                      }                      else                      {                          bNCBYears = false;                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = bNCBYears.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Discount not applied for Taxi/None";                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                      oCresult.oResult = bNCBYears;                      oNV1.sValue = bNCBYears.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }                public CResult GetClaimValue(string sClaimType, double ClaimAge)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      //if(rTotalAmount>0)                      bool ClaimStatus = true;                      //non fault 30  //Fault Claim 20 //Pending Claim 40                      if (sClaimType == "30")                      {                          if (ClaimAge < 1)                          {                              ClaimStatus = true;                          }                          else                          {                              ClaimStatus = false;                              oNV.sName = "sMessage";                              oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                              oNV1.sName = "oResult";                              oNV1.sValue = ClaimStatus.ToString();                              oNV2.sName = "LoadFactorName";                              oNV2.sValue = "Discount will not applied due to based on Claim type and Dates";                              oNV3.sName = "Type";                              oNV3.sValue = "Percent";                              oCresult.oCollectionResult.Add(oNV);                              oCresult.oCollectionResult.Add(oNV1);                              oCresult.oCollectionResult.Add(oNV2);                              oCresult.oCollectionResult.Add(oNV3);                          }                      }                      else if(sClaimType=="20" || sClaimType=="40")                      {                          ClaimStatus = false;                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = ClaimStatus.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Discount will be applied for only NON_fault cases";                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                      oCresult.oResult = ClaimStatus;                      oNV1.sValue = ClaimStatus.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }                public CResult GetConvictionsLoadValue(string sConvCode)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      //if(rTotalAmount>0)                      bool ConvStatus = true;                      //non fault 30  //Fault Claim 20 //Pending Claim 40                        string[] row = { "AC", "BA", "CD", "DD", "DR", "IN", "UT", "TT", "LC30", "LC40", "LC50", "MS40", "MS50", "MS60", "MS70", "MS80", "MS90" };                      if (row.Any(sConvCode.Contains))                      {                          // if (ClaimAge <= 1)                          //{                          ConvStatus = false;                          // }                          //else                          //{                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = ConvStatus.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Discount not applied due to based on selected Convictions-->" + sConvCode;                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                          //}                      }                      oCresult.oResult = ConvStatus;                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }              public CResult GetDiscount()              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      oNV.sName = "sMessage";                      oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Normal.ToString();                      CNV oNV1 = new CNV();                      oNV1.sName = "oResult";                      oNV1.sValue = "+0";                      CNV oNV2 = new CNV();                      oNV2.sName = "LoadFactorName";                      oNV2.sValue = "Your Quote is eligible for 25% Discount";                      CNV oNV3 = new CNV();                      oNV3.sName = "Type";                      oNV3.sValue = "Percent";                      //if(rTotalAmount>0)                      double rDiscount = 0.25;                          oCresult.oResult = rDiscount;                      oNV1.sValue = rDiscount.ToString();                      oCresult.oCollectionResult.Add(oNV);                      oCresult.oCollectionResult.Add(oNV1);                      oCresult.oCollectionResult.Add(oNV2);                      oCresult.oCollectionResult.Add(oNV3);                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }              public CResult GetAreafromPostCodes(string PostCode, string sVersion)              {                  string Price = string.Empty;                  XIInstanceBase oIB = new XIInstanceBase();                  CResult oCResult = new CResult();                  var watch = System.Diagnostics.Stopwatch.StartNew();                  CTraceStack oTrace = new CTraceStack();                  oTrace.sClass = this.GetType().Name;                  oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;                  oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;                  oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;                  List<CNV> oTraceInfo = new List<CNV>();                  oTrace.sTask = "Get Area event, postCode poductid and driver age";//expalin about this method logic                                XIAPI oXIAPI = new XIAPI();                  try                  {                      if (!string.IsNullOrEmpty(PostCode))                      {                          PostCode = PostCode.Replace(" ", "").ToUpper();                            List<XIWhereParams> oWHParams = new List<XIWhereParams>();                          //XIWhereParams oParam = new XIWhereParams();                          //oParam.sField = "FKiProductID";                          //oParam.sOperator = "=";                          //oParam.sValue = sVersion;                          //oWHParams.Add(oParam);                          oWHParams.Add(new XIWhereParams { sField = "sPostCode", sOperator = "=", sValue = PostCode });                          oWHParams.Add(new XIWhereParams { sField = "FKiProductID", sOperator = "=", sValue = sVersion });                          oTraceInfo.Add(new CNV { sValue = "PostCode is: " + PostCode });                          var oAreaType = oXIAPI.GetValue("TradexPostCode_T", "sCappedNG", oWHParams, "PostalCode");                            if (!string.IsNullOrEmpty(oAreaType))                          {                              PostCodeArea = PostCode;                              oCResult.oResult = oAreaType;                              return oCResult;                          }                          else                          {                              PostCode = PostCode.Remove(PostCode.Length - 1);                              oTraceInfo.Add(new CNV { sValue = "PostCode is: " + PostCode });                              oCResult = GetAreafromPostCodes(PostCode, sVersion);                          }                      }                      else                      {                          oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;                          oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                          oCResult.sMessage = "Check entered Postcode is null" + PostCode;                      }                    }                  catch (Exception ex)                  {                      oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oCResult.LogToFile();                      oIB.SaveErrortoDB(oCResult);                  }                  oCResult.oTraceStack = oTraceInfo;                  oIB.SaveErrortoDB(oCResult);                  return oCResult;              }              public CResult GetValueofPostCodes(string CharType)              {                  XIInstanceBase oIB = new XIInstanceBase();                  CResult oCResult = new CResult();                  var watch = System.Diagnostics.Stopwatch.StartNew();                  CTraceStack oTrace = new CTraceStack();                  oTrace.sClass = this.GetType().Name;                  oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;                  oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;                  oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;                  List<CNV> oTraceInfo = new List<CNV>();                  oTrace.sTask = "Get value of area Postcode";//expalin about this method logic                              int Char = 0;                  XIAPI oXIAPI = new XIAPI();                  try                  {                      //oTraceInfo.Add(new CNV { sValue = "Class is XIBOScript_T table script ID and Method is GetArea" });                      if (!string.IsNullOrEmpty(CharType))                      {                          if (CharType == "A") { Char = 1; }                          else if (CharType == "B") { Char = 2; }                          else if (CharType == "C") { Char = 3; }                          else if (CharType == "D") { Char = 4; }                          else if (CharType == "E") { Char = 5; }                          else if (CharType == "F") { Char = 6; }                          else if (CharType == "G") { Char = 7; }                          else if (CharType == "H") { Char = 8; }                          else if (CharType == "I") { Char = 9; }                          else if (CharType == "J") { Char = 10; }                          else if (CharType == "K") { Char = 11; }                          else if (Convert.ToInt32(CharType) != -2)                          {                              Char = Convert.ToInt32(CharType);                          }                          oCResult.oResult = Char;                        }                      else                      {                          oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;                          oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                          oCResult.sMessage = "Invalid Postcode Area " + CharType;                      }                    }                  catch (Exception ex)                  {                      oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oCResult.LogToFile();                      oIB.SaveErrortoDB(oCResult);                  }                  oCResult.oTraceStack = oTraceInfo;                  oIB.SaveErrortoDB(oCResult);                  return oCResult;              }                public CResult GetNCBValue(string MTNCBType, string NCBResvalue)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                      CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      //if(rTotalAmount>0)                      bool bNCBvalue = true;                      //40 Motor Trade                      if (MTNCBType == "40")                      {                          bNCBvalue = true;                      }                      else                      {                          bNCBvalue = false;                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = bNCBvalue.ToString();                          oNV2.sName = "LoadFactorName";                          //oNV2.sValue = "Discount will be applied for based on MotorTrade and area rating";                          oNV2.sValue = "B, BB, BD, IG, L, LS, LU, M, OL, RM, SL, WV---Discount will be applied for MT NCB only";                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                          oCresult.oResult = bNCBvalue;                      oNV1.sValue = bNCBvalue.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }                public bool CheckPostStartwith(string postcode)              {                  bool flag = false;                  string[] codesArray = { "B", "M", "L" };                  string[] DoublecodesArray = { "BB", "BD", "IG", "LS", "LU", "OL", "RM", "SL", "WV" };                  var input = postcode.ToCharArray();                  int integer = -1;                  var FindingLetter = input[1].ToString();                  int.TryParse(FindingLetter, out integer);                  if (integer.ToString() == FindingLetter)                  {                      foreach (var code in codesArray)                      {                          if (postcode.Substring(0, 1) == code.Substring(0, 1))                          {                              flag = true;                              break;                          }                      }                  }                  else                  {                      foreach (var code in DoublecodesArray)                      {                          if (postcode.Substring(0, 2) == code.Substring(0, 2))                          {                              flag = true;                              break;                          }                      }                  }                    return flag;                }              //Business Activities              public CResult BusinessActivies(int vechiclesale, int Vechiclerepair, int vechiclevaleting, int VechicleBreakDown, int VechicleCollection, int VechicleImportorExport, int AccesDeal, int MFPP, int WSFRP, int Other)              {                  CResult oCresult = new CResult();                  XIInstanceBase oIB = new XIInstanceBase();                  try                  {                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;                      CNV oNV = new CNV();                        CNV oNV1 = new CNV();                      CNV oNV2 = new CNV();                      CNV oNV3 = new CNV();                      //iMTFullTimeorPartTime                      bool BusineesAct = false;                      if ((vechiclesale >= 0 || Vechiclerepair >= 0 || vechiclevaleting >= 0) && (VechicleBreakDown == 0 && VechicleCollection == 0 && VechicleImportorExport == 0 && AccesDeal == 0 && MFPP == 0 && WSFRP == 0 && Other == 0))                      {                          BusineesAct = true;                      }                      else                      {                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = BusineesAct.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = "Sales / repairs / valeting risks only";                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                      }                      oCresult.oResult = BusineesAct;                      oNV1.sValue = BusineesAct.ToString();                  }                  catch (Exception ex)                  {                      oCresult.sMessage = "ERROR: [" + oCresult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";                      oCresult.xiStatus = xiEnumSystem.xiFuncResult.xiError;                      oIB.SaveErrortoDB(oCresult, iInstanceID);                  }                  return oCresult;              }            }          public class PolicyCalculation          {              public CResult Calculation(int iInsatnceID, int iUserID, int iCustomerID, string sVersion, string sProductCode, int iQuoteID, double rTotalAmount = 0)              {                  List<string> Info = new List<string>();                  Info.Add("[QsInstanceID_" + iInsatnceID + "]");                  Info.Add("Covia Discount script running... QuoteID: " + iQuoteID + " amount:" + rTotalAmount);                  // double rTotalAmount = 0;                  XIInstanceBase oIB = new XIInstanceBase();                  CResult oresult = new CResult();                  try                  {                      CResult oBaseLoadFactor = new CResult();                      List<CResult> oXiResults = new List<CResult>();                      PolicyBaseCalc PolicyCal = new PolicyBaseCalc();                      // List<CResult> ClaimResultList = new List<CResult>();                      var TotalAmount = PolicyCal.GetTotalAmount(rTotalAmount);                      if (TotalAmount.xiStatus == 0 && TotalAmount.oCollectionResult.Count > 0)                      {                          oBaseLoadFactor = TotalAmount;                          string sBase = "";                          sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                          oXiResults.Add(TotalAmount);                      }                      PolicyCal.iInstanceID = iInsatnceID;                      //oresult.xiStatus = 00;//xiEnumSystem.xiFuncResult.xiSuccess;                      XIIXI oIXI = new XIIXI();                      var sStructureName = "MT QS";                      var oQSSI = oIXI.BOI("QS Instance", iInsatnceID.ToString()).Structure(sStructureName).XILoad();                      //oCache.Set_QsStructureObj(sSessionID, sGUID, "QSInstance_" + iInstanceID + "" + sStructureName + "", oQSSI);                        var ostructureInstance = oQSSI.oStructureInstance.FirstOrDefault().Value.FirstOrDefault();                          //Driver                      var oDriver = oQSSI.oSubStructureI("MTDriver");                      var oDriverI = (List<XIIBO>)oDriver.oBOIList;                      bool DriverType = true;                      if (oDriverI != null)                      {                          var DriverList = PolicyCal.GetNoofDriver(oDriverI);                          if (DriverList.xiStatus == 0)                          {                              oBaseLoadFactor = DriverList;                              string sBase = "";                              if (DriverList.oCollectionResult.Count > 0)                              {                                  sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                                  bool.TryParse(sBase, out DriverType);                                  oXiResults.Add(DriverList);                              }                          }                      }                        var sHolderHomePostCode = ostructureInstance.XIIValue("smthomepostcode").sValue;                      CResult HPostCodeArea = new CResult();                      CResult BPostCodeArea = new CResult();                      //var cHomePostCode = PolicyCal.GetAreafromPostCodes(sHomePostCode,sVersion);                      int iHPC = -2; int iBPC = -2;                      if (!string.IsNullOrEmpty(sHolderHomePostCode))                      {                          HPostCodeArea = PolicyCal.GetAreafromPostCodes(sHolderHomePostCode, sVersion);                          //iHPC = Convert.ToInt32(PolicyCal.GetValueofPostCodes(HPostCodeArea.oResult.ToString()));                          var hpc = PolicyCal.GetValueofPostCodes(HPostCodeArea.oResult.ToString());                          int.TryParse(hpc.oResult.ToString(), out iHPC);                        }                        var BusinessPostCode = ostructureInstance.XIIValue("mtpremisespostcode").sValue;                      if (sHolderHomePostCode != BusinessPostCode)                      {                          if (!string.IsNullOrEmpty(BusinessPostCode))                          {                              BPostCodeArea = PolicyCal.GetAreafromPostCodes(BusinessPostCode, sVersion);                              //iBPC = Convert.ToInt32(PolicyCal.GetValueofPostCodes(BPostCodeArea.oResult.ToString()));                              var hpc = PolicyCal.GetValueofPostCodes(BPostCodeArea.oResult.ToString());                              int.TryParse(hpc.oResult.ToString(), out iBPC);                          }                          else                          {                              iBPC = 0;                          }                      }                      else                      {                          iBPC = iHPC;                      }                        bool bPCode = true;                      if ((iHPC >= -1 && iHPC <= 6) && (iBPC >= -1 && iBPC <= 6))                      {                          var NCB = ostructureInstance.XIIValue("iMTNoClaimsBonusType").sValue;                          if (!string.IsNullOrEmpty(sHolderHomePostCode))                          {                              bPCode = PolicyCal.CheckPostStartwith(sHolderHomePostCode);                          }                            if (!string.IsNullOrEmpty(BusinessPostCode))                          {                              bPCode = PolicyCal.CheckPostStartwith(BusinessPostCode);                          }                          if ((!bPCode)) { bPCode = true; }                          else                          {                              var NCBResovledvalue = ostructureInstance.XIIValue("iMTNoClaimsBonusType").sResolvedValue;                              var NCBValue = PolicyCal.GetNCBValue(NCB, NCBResovledvalue);                              //Motor Trade 40                              if (NCBValue.xiStatus == 0 && NCBValue.oCollectionResult.Count > 0)                              {                                  oBaseLoadFactor = NCBValue;                                  string sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                                  bool.TryParse(sBase, out bPCode);                                  oXiResults.Add(NCBValue);                                }                          }                      }                      else                      {                          bPCode = false;                          CResult oCresult = new CResult();                          CNV oNV = new CNV();                          CNV oNV1 = new CNV();                          CNV oNV2 = new CNV();                          CNV oNV3 = new CNV();                          oNV.sName = "sMessage";                          oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                          oNV1.sName = "oResult";                          oNV1.sValue = bPCode.ToString();                          oNV2.sName = "LoadFactorName";                          oNV2.sValue = sHolderHomePostCode + "(" + iHPC + ") HomePost code/" + BusinessPostCode + "(" + iBPC + ") BusinessPost Code:-Discount will be applied for Areas -1 to 6 only";//"Business/Home postcode failed due to based on area("+ PolicyCal.PostCodeArea + ") rating--> Business:" + iBPC + "/Home:" + iHPC;                          oNV3.sName = "Type";                          oNV3.sValue = "Percent";                          oCresult.oCollectionResult.Add(oNV);                          oCresult.oCollectionResult.Add(oNV1);                          oCresult.oCollectionResult.Add(oNV2);                          oCresult.oCollectionResult.Add(oNV3);                          oXiResults.Add(oCresult);                      }                        var sFullorPartTime = ostructureInstance.XIIValue("iMTFullTimeorPartTime").sValue;                      ////iMTFullTimeorPartTime                      bool bJobType = true;                      var FullorPartTIme = PolicyCal.GetFullorPartTime(sFullorPartTime);                      if (FullorPartTIme.xiStatus == 0)                      {                          oBaseLoadFactor = FullorPartTIme;                          string sBase = "";                          if (FullorPartTIme.oCollectionResult.Count > 0)                          {                              sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                              bool.TryParse(sBase, out bJobType);                              oXiResults.Add(FullorPartTIme);                          }                          //rTotalAmount = rTotalAmount * rRabu;                      }                      //iMTNCBTransferredorMirrored // 20 Transferred //30 mirrored                      var MTNCBTM = ostructureInstance.XIIValue("iMTNCBTransferredorMirrored").sValue;                      bool bNCBType = true;                      var TransferorMirror = PolicyCal.GetTMType(MTNCBTM);                      if (TransferorMirror.xiStatus == 0)                      {                          string sBase = "";                          if (TransferorMirror.oCollectionResult.Count > 0)                          {                              oBaseLoadFactor = TransferorMirror;                              sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                              bool.TryParse(sBase, out bNCBType);                              oXiResults.Add(TransferorMirror);                          }                      }                      var MTNCBType = ostructureInstance.XIIValue("iMTNoClaimsBonusType").sValue;                      var NoOfYears = ostructureInstance.XIIValue("iMTNumberofYearsNCB").sValue;                      bool bNCBYears = true;                      var NCBYearValues = PolicyCal.GetNCBandYearValue(MTNCBType, NoOfYears);                      if (NCBYearValues.xiStatus == 0)                      {                          string sBase = "";                          if (NCBYearValues.oCollectionResult.Count > 0)                          {                              oBaseLoadFactor = NCBYearValues;                              sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                              bool.TryParse(sBase, out bNCBYears);                              oXiResults.Add(NCBYearValues);                          }                      }                        //iClaimStatus //30 non-fault                      //dDate ClaimDate <1 yr                       //bool ClaimStatus = true;                      bool ClaimLoadStatus = true;                      bool ConvLoadStatus = true;                      int iPanalityPoints = 0;                      int iConvCount = 0;                                            foreach (var oDrvr in oDriverI)                      {                          if (oDrvr.SubChildI.Count > 0)                          {                              if (oDrvr.SubChildI.Keys.Contains("MTClaims"))                              {                                  int TotalClaims = 0;                                  var oClaimLIst = oDrvr.SubChildI["MTClaims"];                                  foreach (var claim in oClaimLIst)                                  {                                      var oClaimAge = PolicyCal.GetAgeFromDate(claim.AttributeI("dDate").sValue, DateTime.Now.ToString());                                      var claimStatus = claim.AttributeI("iClaimStatus").sValue;//20 Fault//30 Non Fault //40 Pending                                      double rClaimAge = 0;                                      double.TryParse(oClaimAge.oResult.ToString(), out rClaimAge);                                      if (rClaimAge < 1)                                      {                                          TotalClaims++;                                          if (TotalClaims <= 2)                                          {                                              var ClaimStatusLoad = PolicyCal.GetClaimValue(claimStatus, rClaimAge);                                              if (ClaimStatusLoad.xiStatus == 0)                                              {                                                  string sBase = "";                                                  if (ClaimStatusLoad.oCollectionResult.Count > 0)                                                  {                                                      oBaseLoadFactor = ClaimStatusLoad;                                                      sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                                                      bool.TryParse(sBase, out ClaimLoadStatus);                                                      oXiResults.Add(ClaimStatusLoad);                                                      if (!ClaimLoadStatus)                                                      {                                                          break;                                                      }                                                  }                                              }                                          }                                          else                                          {                                              ClaimLoadStatus = false;                                              CResult oCresult = new CResult();                                              CNV oNV = new CNV();                                              CNV oNV1 = new CNV();                                              CNV oNV2 = new CNV();                                              CNV oNV3 = new CNV();                                              oNV.sName = "sMessage";                                              oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                                              oNV1.sName = "oResult";                                              oNV1.sValue = ClaimLoadStatus.ToString();                                              oNV2.sName = "LoadFactorName";                                              oNV2.sValue = "If any driver 2 or more claims with in 12 months decline for this scheme";                                              oNV3.sName = "Type";                                              oNV3.sValue = "Percent";                                              oCresult.oCollectionResult.Add(oNV);                                              oCresult.oCollectionResult.Add(oNV1);                                              oCresult.oCollectionResult.Add(oNV2);                                              oCresult.oCollectionResult.Add(oNV3);                                              oXiResults.Add(oCresult);                                          }                                      }                                  }                              }                              if (oDrvr.SubChildI.Keys.Contains("MTConvictions"))                              {                                  var oConvList = oDrvr.SubChildI["MTConvictions"];                                  if (oConvList != null)                                  {                                      foreach (var Con in oConvList)                                      {                                          int iDemerit = 0;                                          //var oClaimAge = PolicyCal.GetAgeFromDOB(claim.AttributeI("dDate").sValue, DateTime.Now.ToString());                                          var ConvCode = Con.AttributeI("sConvictionCode").sResolvedValue;//20 Fault//30 Non Fault //40 Pending                                          var ConvDate = Con.AttributeI("dConvictionDate").sResolvedValue;                                          var oConvAge = PolicyCal.GetAgeFromDate(Con.AttributeI("dConvictionDate").sResolvedValue, DateTime.Now.ToString());                                          var PenalityPoints = Con.AttributeI("iPenaltyPoints").sResolvedValue;                                          double rConAge = 0;                                          double.TryParse(oConvAge.oResult.ToString(), out rConAge);                                          int.TryParse(PenalityPoints, out iDemerit);                                          iPanalityPoints = iPanalityPoints + iDemerit;                                          if (rConAge < 1)                                          {                                              //iConvCount = iConvCount + 1;                                              if (iDemerit <= 3 && iPanalityPoints <= 6 && iConvCount <= 3)                                              {                                                  var ClaimStatusLoad = PolicyCal.GetConvictionsLoadValue(ConvCode);                                                    if (ClaimStatusLoad.xiStatus == 0)                                                  {                                                      string sBase = "";                                                      if (ClaimStatusLoad.oCollectionResult.Count > 0)                                                      {                                                          oBaseLoadFactor = ClaimStatusLoad;                                                          sBase = oBaseLoadFactor.oCollectionResult.Where(m => m.sName == "oResult").Select(m => m.sValue).FirstOrDefault();                                                          bool.TryParse(sBase, out ConvLoadStatus);                                                          oXiResults.Add(ClaimStatusLoad);                                                          if (!ConvLoadStatus) { break; }                                                      }                                                  }                                              }                                              else                                              {                                                  ConvLoadStatus = false;                                                  CResult oCresult = new CResult();                                                  CNV oNV = new CNV();                                                  CNV oNV1 = new CNV();                                                  CNV oNV2 = new CNV();                                                  CNV oNV3 = new CNV();                                                  oNV.sName = "sMessage";                                                  oNV.sValue = xiEnumSystem.xiEnumPolicyLookupResponses.Decline.ToString();                                                  oNV1.sName = "oResult";                                                  oNV1.sValue = ConvLoadStatus.ToString();                                                  oNV2.sName = "LoadFactorName";                                                  oNV2.sValue = "Maximum of 3 minor (3 demerits each) convictions with in 12 months. decline for this scheme";                                                  oNV3.sName = "Type";                                                  oNV3.sValue = "Percent";                                                  oCresult.oCollectionResult.Add(oNV);                                                  oCresult.oCollectionResult.Add(oNV1);                                                  oCresult.oCollectionResult.Add(oNV2);                                                  oCresult.oCollectionResult.Add(oNV3);                                                  oXiResults.Add(oCresult);                                                  break;                                              }                                              iConvCount++;                                          }                                      }                                  }                              }                          }                          if (!ConvLoadStatus || !ClaimLoadStatus) { break; }                      }                      bool BusinessActivies = true;                        int Vechiclesale = Convert.ToInt32(ostructureInstance.XIIValue("iMTVehicleSales2").sValue);                      int VechicleRepair = Convert.ToInt32(ostructureInstance.XIIValue("iMTVehicleRepairsServicing2").sValue);                      int VechicleValeting = Convert.ToInt32(ostructureInstance.XIIValue("iMTVehicleValeting2").sValue);                        int VechicleBreakDown = Convert.ToInt32(ostructureInstance.XIIValue("iMTBreakdownRecovery2").sValue);                      int VechicleCo',
 N'Prepersist',
 N'C# Code',
 N'0',
 N'2022-10-27 12:50:54.000',
 N'0',
 NULL,
 N'2035',
 N'192.168.0.102',
 N'2022-10-27 12:50:54.000',
 N'1',
 N'PolicyMainCal',
 N'0',
 NULL,
 N'1',
 N'0',
 N'0',
 NULL,
 N'0',
 NULL,
 NULL,
 NULL,
 NULL,
 N'1b011cf8-0b57-4c91-9637-2cb8e01baddf',
 N'0',
 N'',
 N'',
 N'2022-06-21 17:18:07.000',
 N'2022-06-21 17:18:07.000',
 NULL,
 NULL,
 NULL,
 N'610981b2-35c6-483e-bdee-5a08e5cbcf5f',
 NULL,
 N'2b4445fc-c977-40d4-9590-5470df8c7e02',
 NULL,
 NULL)
