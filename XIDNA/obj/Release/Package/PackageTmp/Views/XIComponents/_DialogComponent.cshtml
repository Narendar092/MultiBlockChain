@model XICore.XIIComponent
@using XISystem
@using XICore
@using XIDNA
@{
    XIDDialog oDialog = new XIDDialog();
    if (Model.oContent.ContainsKey(XIConstant.DialogComponent))
    {
        oDialog = (XIDDialog)Model.oContent[XIConstant.DialogComponent];
        if (oDialog == null)
        {
            oDialog = new XIDDialog();
        }
    }
    var AppID = SessionManager.ApplicationID;
    var AppXIGUID = SessionManager.ApplicationIDXIGUID;
    var OrgID = SessionManager.OrganizationID;
}
<script>
    const content_height = $(window).height() - $('#HomeHeader').height() - 10;
    $('.scroll_vh_100').slimScroll({
        height: content_height,
    });
</script>
<!-- <section class="content">
    <div class="row">
        <div class="box">
            <div class="xicomponent">
                <div class="box-body padding10Tab">
                    <div class="innerborder"> -->
<div class="p5">
    <div class="scroll_vh_100 form-container">
        <div class="DlgStatusMessages"></div>
        <div class="clearfix flex-head">
            <span class="DialogPopout" onclick="fncDialogPopout(this)"><i class="fa fa-external-link"></i></span>
            <h3 class="maintitle">Dialog</h3>
        </div>

        @using (Ajax.BeginForm("Save_Dialog", "Popup", FormMethod.Post, new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnComplete" }, new { @id = "DialogForm", @class = "" }))
        {
            @Html.ValidationSummary(true);
            <input type="hidden" id="ID" name="ID" value="@oDialog.ID" />
            <input type="hidden" id="XIGUID" name="XIGUID" value="@oDialog.XIGUID" />
            <div id="clear-text" class="form-rows">
                @if (oDialog.ID > 0)
                {
                    <div class="form-group row">
                        <label for="inputEmail" class="control-label col-sm-3">Dialog ID:<span class="danger"></span></label>
                        <label for="inputEmail" class="control-label col-sm-3">@oDialog.ID<span class="danger"></span></label>

                    </div>
                    <div class="form-group row">
                        <div class="col-sm-2">
                            <input type="button" class="MapPopup btn btn-theme btn2 btn-xs" id="MapPopup" value="Map" />
                        </div>
                    </div>
                }
                @if (oDialog.FKiApplicationIDXIGUID == null || oDialog.FKiApplicationIDXIGUID == Guid.Empty)
                {
                    <input type="hidden" id="FKiApplicationID" name="FKiApplicationIDXIGUID" value="@AppXIGUID" />
                }
                else
                {
                    <input type="hidden" id="FKiApplicationID" name="FKiApplicationIDXIGUID" value="@oDialog.FKiApplicationIDXIGUID" />
                }

                @if (oDialog.FKiApplicationID == 0)
                {
                    <input type="hidden" id="FKiApplicationID" name="FKiApplicationID" value="@AppID" />
                }
                else
                {
                    <input type="hidden" id="FKiApplicationID" name="FKiApplicationID" value="@oDialog.FKiApplicationID" />
                }


                @if (OrgID > 0)
                {
                    if (oDialog.OrganizationID == 0)
                    {
                        <input type="hidden" id="OrganizationID" name="OrganizationID" value="@OrgID" />
                    }
                    else
                    {
                        <input type="hidden" id="OrganizationID" name="OrganizationID" value="@oDialog.OrganizationID" />
                    }
                }
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3"> Name<span class="danger"></span></label>
                    <div class="col-sm-6">
                        @Html.TextBox("DialogName", oDialog.DialogName, new { @placeholder = "Enter Dialog Name", @class = "form-control", @id = "attrname" })
                        <div class="taberrormsg">
                            @Html.ValidationMessage("DialogName", null, new { @class = "red" })
                        </div>
                    </div>

                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Layout<span class="danger"></span></label>
                    <div class="col-sm-6">
                        @Html.TextBox("FKsLayoutName", "", new { @class = "form-control", @id = "FKiLayoutID", @placeholder = "Enter Layout Name" })
                        @Html.Hidden("LayoutIDXIGUID", oDialog.LayoutIDXIGUID, new { @id = "LayoutIDXIGUID" })
                        @*<select class="form-control" id="XiLayoutsDDL" name="LayoutID">
                                @foreach (var items in oDialog.Layouts)
                                {
                                    var NewDialogID = oDialog.LayoutID;
                                    if (items.Value == 0)
                                    {
                                        <option value="@items.Value">@items.text</option>
                                    }
                                    else if (NewDialogID == items.Value)
                                    {
                                        <option value="@items.Value" selected>@items.Value @items.text</option>
                                    }
                                    else
                                    {
                                        <option value="@items.Value">@items.Value @items.text</option>
                                    }
                                }
                            </select>*@
                    </div>
                    @*<div class="col-sm-offset-3 col-sm-6 m-t-5">
                            <input type="button" class="btn btn-theme" value="Refresh" onclick="XiLayoutManager('Dialog', 'Refresh')" />
                            <input type="button" class="btn btn-theme" value="Add" onclick="XiLayoutManager('XiLayout', 'Add')" />
                            <input type="button" class="btn btn-theme" value="Edit" onclick="XiLayoutManager('XiLayout', 'Edit')" />
                            <input type="button" class="btn btn-theme" value="View" onclick="XiLayoutManager('XiLayout', 'View')" />
                        </div>*@
                </div><div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">BO<span class="danger"></span></label>
                    <div class="col-sm-6">
                        @Html.TextBox("FKsBOName", "", new { @class = "form-control", @id = "FKiBODID", @placeholder = "Enter BO Name" })
                        @Html.Hidden("FKiBOIDXIGUID", oDialog.FKiBOIDXIGUID, new { @id = "FKiBOIDXIGUID" })
                    </div>
                </div>

                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Resizable<span class="danger"></span></label>
                    <div class="col-sm-6">
                        <div class="check-wrap">
                            @Html.CheckBox("IsResizable", oDialog.IsResizable, new { @id = "IsResizable" })
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Close Icon<span class="danger"></span></label>
                    <div class="col-sm-6">
                        <div class="check-wrap">
                            @Html.CheckBox("IsCloseIcon", oDialog.IsCloseIcon, new { @id = "IsCloseIcon" })
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Minimise Icon<span class="danger"></span></label>
                    <div class="col-sm-6">
                        <div class="check-wrap">
                            @Html.CheckBox("IsMinimiseIcon", oDialog.IsMinimiseIcon, new { @id = "IsMinimiseIcon" })
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Pin Icon<span class="danger"></span></label>
                    <div class="col-sm-6">
                        <div class="check-wrap">
                            @Html.CheckBox("IsPinIcon", oDialog.IsPinIcon, new { @id = "IsPinIcon" })
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Maximise Icon<span class="danger"></span></label>
                    <div class="col-sm-6">
                        <div class="check-wrap">
                            @Html.CheckBox("IsMaximiseIcon", oDialog.IsMaximiseIcon, new { @id = "IsMaximiseIcon" })
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Grouping<span class="danger"></span></label>
                    <div class="col-sm-6">
                        <div class="check-wrap">
                            @Html.CheckBox("IsGrouping", oDialog.IsGrouping, new { @id = "IsGrouping" })
                        </div>
                    </div>
                </div>
                <div class="form-group row" id="BarPositionDiv">
                    <label for="inputEmail" class="control-label col-sm-3">Bar Position<span class="danger"></span></label>
                    <div class="col-sm-6">
                        @Html.DropDownList("BarPosition", new SelectList(new List<Object>
                                    {
                                    new { key= "Vertical Left" , value = "Vertical Left" },
                                    new { key= "Vertical Right" , value = "Vertical Right" },
                                    new { key= "Horizontal Top" , value = "Horizontal Top" },
                                    new { key= "Horizontal Bottom" , value = "Horizontal Bottom" }
                                    }, "key", "Value", oDialog.BarPosition), "--Select--", new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Size<span class="danger">*</span></label>
                    <div class="col-sm-6">
                        @Html.DropDownList("PopupSize", new SelectList(new List<Object>
                                    {
                                    new { key= "Default" , value = "Default" },
                                    new { key= "Center" , value = "Center" },
                                    new { key= "Left" , value = "Left" },
                                    new { key= "Right" , value = "Right" },
                                    new { key= "Top" , value = "Top" },
                                    new { key= "Bottom" , value = "Bottom" },
                                    new { key= "Specific" , value = "Specific" }
                                    }, "key", "Value", oDialog.PopupSize), "--Select--", new { @class = "form-control" })
                    </div>
                    <div class="col-sm-4 taberrormsg">
                        @Html.ValidationMessage("PopupSize", null, new { @class = "red" })
                    </div>
                </div>
                <div id="DialogPositionsDiv">
                    <div class="form-group row">
                        <label for="inputEmail" class="control-label col-sm-3">my</label>
                        <div class="col-sm-3">
                            @Html.DropDownList("DialogMy1", new SelectList(new List<Object>
                                        {
                                        new { key= "left" , value = "Left" },
                                        new { key= "center" , value = "Center" },
                                        new { key= "right" , value = "Right" }
                                        }, "key", "Value", oDialog.DialogMy1), new { @class = "form-control" })
                            @Html.DropDownList("DialogMy2", new SelectList(new List<Object>
                                            {
                                            new { key= "top" , value = "Top" },
                                            new { key= "center" , value = "Center" },
                                            new { key= "bottom" , value = "Bottom" }
                                            }, "key", "Value", oDialog.DialogMy2), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="inputEmail" class="control-label col-sm-3">at</label>
                        <div class="col-sm-3">
                            @Html.DropDownList("DialogAt1", new SelectList(new List<Object>
                                        {
                                        new { key= "left" , value = "Left" },
                                        new { key= "center" , value = "Center" },
                                        new { key= "right" , value = "Right" }
                                        }, "key", "Value", oDialog.DialogAt1), new { @class = "form-control" })
                            @Html.DropDownList("DialogAt2", new SelectList(new List<Object>
                                            {
                                            new { key= "top" , value = "Top" },
                                            new { key= "center" , value = "Center" },
                                            new { key= "bottom" , value = "Bottom" }
                                            }, "key", "Value", oDialog.DialogAt2), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div id="DialogSizeDiv">
                    <div class="form-group row">
                        <label for="inputEmail" class="control-label col-sm-3">Width<span class="danger">*</span></label>
                        <div class="col-sm-6">
                            @Html.TextBox("DialogWidth", oDialog.DialogWidth, new { @placeholder = "Enter Dialog Width", @class = "form-control", @Value = oDialog.DialogWidth })
                            <div class="taberrormsg">
                                @Html.ValidationMessage("DialogWidth", null, new { @class = "red" })
                            </div>
                        </div>

                    </div>
                    <div class="form-group row">
                        <label for="inputEmail" class="control-label col-sm-3">Height<span class="danger">*</span></label>
                        <div class="col-sm-6">
                            @Html.TextBox("DialogHeight", oDialog.DialogHeight, new { @placeholder = "Enter Dialog Height", @class = "form-control", @Value = oDialog.DialogHeight })
                            <div class="taberrormsg">
                                @Html.ValidationMessage("DialogHeight", null, new { @class = "red" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Icon<span class="danger"></span></label>
                    <div class="col-sm-3">
                        <button type="button" data-original-title="Click to select icons" data-toggle="modal" data-target="#icn_select_modal" class="btn btn-theme text-yellow">Select Icon</button>
                        <span id="IconDisplay"></span>
                        <input id="IconName" type="hidden" name="Icon" />
                        @{
                            Html.RenderPartial("~/Views/Master/_UIIcons.cshtml");
                        }
                    </div>
                </div>
                <div class="form-group row" id="TransparencyValue">
                    <label for="inputEmail" class="control-label col-sm-3">Transparency<span class="danger">*</span></label>
                    <div class="col-sm-6">
                        @Html.TextBox("iTransparency", oDialog.iTransparency, new { @placeholder = "Enter Transparency Value", @class = "form-control" })
                        <div class="taberrormsg">
                            @Html.ValidationMessage("iTransparency", null, new { @class = "red" })
                        </div>
                    </div>

                </div>
                <div class="form-group row">
                    <label for="inputEmail" class="control-label col-sm-3">Status<span class="danger"></span></label>
                    <div class="col-sm-6">
                        @Html.DropDownList("StatusTypeID", new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Active" },
                                    new { key= 20 , value = "Inactive" }
                                    }, "key", "Value", oDialog.StatusTypeID), new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-offset-3 col-sm-9">
                    <input type="submit" class="btn btn-theme" value="Save" />
                    <button type="button" class="btn btn-theme decline CancelDialog">Cancel</button>
                </div>
            </div>
        }
    </div>
</div>
<!-- </div>
                </div>
            </div>
        </div>
    </div>
</section> -->
<div id="SavePopupDlg" class="dialog-box" title="Confirm Message" style="background-color:white;"></div>
<script>
    $(document).ready(function () {
        var Layouts = [];
        var BOs = [];
        var LayoutID = '@oDialog.LayoutIDXIGUID';
        if (LayoutID != null && LayoutID !="") {
            GetLayoutsForAutoComplete("", LayoutID).then(function (AllLayouts) {
                Layouts = AllLayouts;
                var sLayoutName = getLayoutByValue(LayoutID);
                $('#FKiLayoutID').val(sLayoutName);
                $('#LayoutIDXIGUID').val(LayoutID);
            })
        }
        var BODID = '@oDialog.FKiBOIDXIGUID';
        if (BODID != null && BODID !="") {
            GetBOsForAutoComplete("", BODID).then(function (AllBOs) {
                BOs = AllBOs;
                var sBOName = getBOByValue(BODID);
                $('#FKiBODID').val(sBOName);
                $('#FKiBOIDXIGUID').val(BODID);
            })
        }
        $('#DialogSizeDiv').hide();
        $('#DialogPositionsDiv').hide();
        $('#BarPositionDiv').hide();
        $('div.fa-hover').click(function () {
            var Text = $(this).text();
            var icon1 = $(this).closest('.fa-hover').find('i');
            var Name = $(icon1).attr('class');
            $('#IconName').val(Name);
            $('#IconDisplay').html('<i class="' + Name + '" aria-hidden="true"></i>' + Text);
            $(".close").click();
        });
        $("#IsGrouping").change(function () {
            if ($(this).is(":checked")) {
                $('#BarPositionDiv').show();
            }
            else {
                $('#BarPositionDiv').hide();
            }
        });
        if ('@oDialog.ID' > 0) {
            $('#IconDisplay').html('<i class="' + '@oDialog.Icon' + '" aria-hidden="true"></i>' + '@oDialog.Icon');
            $('#icon').val('@oDialog.Icon');
            if ('@oDialog.IsGrouping' == "True") {
                $('#BarPositionDiv').show();
            }
            if ('@oDialog.PopupSize' == "Specific") {
                $('#DialogPositionsDiv').show();
                $('#DialogSizeDiv').show();
            }
        }
        $('#PopupSize').change(function () {
            if ($(this).val() == "Default") {
                $('#DialogPositionsDiv').hide();
                $('#DialogSizeDiv').hide();
            }
            else {
                $('#DialogPositionsDiv').show();
                $('#DialogSizeDiv').show();
                if ('@oDialog.ID' == 0) {
                    $('#DialogMy1')[0].selectedIndex = 0;
                    $('#DialogMy2')[0].selectedIndex = 0;
                    $('#DialogAt1')[0].selectedIndex = 0;
                    $('#DialogAt2')[0].selectedIndex = 0;
                    $('#DialogWidth').val(0);
                    $('#DialogHeight').val(0);
                }
            }
        });
    });
    function OnComplete(e) {
        debugger;
        $("#SavePopupDlg").unblock();
        $('.DlgStatusMessages').prepend($('<div class="alert alert-success">Data Saved Succesfully</div>'));
        $('#ID').val(e.sID);
        //CustomMessage(e.ResponseMessage, e.Status);
        //opener.location.reload();
    }
    $('.CancelDialog').click(function () {
        window.close();
    });

    $('.MapPopup').click(function () {
        var editdialogs = new Array();
        var ID = $('#ID').val();
        var LayoutId = $('#XiLayoutsDDL option:selected').val();
        if (editdialogs.length > 0) {
            for (i = 0; i < editdialogs.length; i++) {
                editdialogs[i].close();
            }
        }
        var editpopup = window.open('', '_blank', "scrollbars=1,resizable=1,width=" + screen.width + ", height=" + screen.height);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("AddEditPopupLayoutMapping", "Popup")',
            data: { PoupID: 0, DialogID: ID, LayoutID: LayoutId },
            cache: false,
            async: false,
            dataType: 'html',
            success: function (data) {
                with (editpopup.document) {
                    open();
                    write(data);
                    close();
                }
                editdialogs.push(editpopup);
                editpopup.moveTo(0, 0);
            }
        });
    });

    $('#FKiLayoutID').autocomplete({
        source: function (request, response) {
            GetLayoutsForAutoComplete(request.term, 0).then(function (AllLayouts) {
                response($.ui.autocomplete.filter(AllLayouts, request.term));
            })
        },
        select: function (event, ui) {
            $("#FKiLayoutID").val(ui.item.label);
            $("#LayoutIDXIGUID").val(ui.item.value);
            return false;
        },
        focus: function (event, ui) {
            $("#FKiLayoutID").val(ui.item.label);
            return false;
        }
    });

    $('#FKiBODID').autocomplete({
        source: function (request, response) {
            GetBOsForAutoComplete(request.term, 0).then(function (AllBOs) {
                response($.ui.autocomplete.filter(AllBOs, request.term));
            })
        },
        select: function (event, ui) {
            $("#FKiBODID").val(ui.item.label);
            $("#FKiBOIDXIGUID").val(ui.item.value);
            return false;
        },
        focus: function (event, ui) {
            $("#FKiBODID").val(ui.item.label);
            return false;
        }
    });

    function GetLayoutsForAutoComplete(sSearchText, iLayoutID) {
        return new Promise(function (resolve, reject) {
            var Params = { sSearchText: sSearchText, iLayoutID: iLayoutID };
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Get_LayoutsForAutoComplete", "QuestionSet")',
                contentType: 'application/json;',
                dataType: 'json',
                data: JSON.stringify(Params),
                traditional: true,
                async: true,
                success: function (data) {
                    Layouts = [];
                    $.each(data, function (key, value) {
                        Layouts.push({ label: value.sName, value: value.sValue });
                    });
                    resolve(Layouts);
                }
            });
        })
    }

    function GetBOsForAutoComplete(sSearchText, iBODID) {
        return new Promise(function (resolve, reject) {
            var Params = { sSearchText: sSearchText, iBODID: iBODID };
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Get_BOsForAutoComplete", "QuestionSet")',
                contentType: 'application/json;',
                dataType: 'json',
                data: JSON.stringify(Params),
                traditional: true,
                async: true,
                success: function (data) {
                    BOs = [];
                    $.each(data, function (key, value) {
                        BOs.push({ label: value.sName, value: value.sValue });
                    });
                    resolve(BOs);
                }
            });
        })
    }

    function getLayoutByValue(iLayoutID) {
        var keyFound = Layouts.filter(function (x) { return x.value === iLayoutID; })
        if (keyFound && keyFound.length > 0) {
            return keyFound[0].label;
        }
    }
    function getBOByValue(iBODID) {
        var keyFound = BOs.filter(function (x) { return x.value === iBODID; })
        if (keyFound && keyFound.length > 0) {
            return keyFound[0].label;
        }
    }
</script>