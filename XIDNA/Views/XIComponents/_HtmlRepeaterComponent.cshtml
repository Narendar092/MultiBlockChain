@model XICore.XIIComponent
@using XISystem
@using XICore

@{
    bool Flag = false;
    XIDBO oBOD = new XIDBO();
    var Mode = "";
    var sContent = "";
    var TempDatacontent = "";
    XID1Click o1ClickD = new XID1Click();
    if (Model.oContent.ContainsKey(XIConstant.HTMLComponent))
    {
        o1ClickD = (XID1Click)Model.oContent[XIConstant.HTMLComponent];
        Mode = o1ClickD.sCode;
        Flag = o1ClickD.bFlag;
        if (o1ClickD == null)
        {
            o1ClickD = new XID1Click();
        }
        XIInfraCache oCache = new XIInfraCache();
        oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO_All, null, o1ClickD.BOID.ToString());
    }
    var sBOName = string.Empty;
    var iBODID = 0;
    if (o1ClickD != null)
    {
        sBOName = o1ClickD.sBOName;
        iBODID = o1ClickD.BOID;
    }
    var sPagination = "no";
    string sHeading = string.Empty;
    string sVisualisation = string.Empty;
    var oVisualisations = Model.oVisualisation;
    List<XIVisualisationNV> oVisualisationNVs = new List<XIVisualisationNV>();
    if (oVisualisations != null && oVisualisations.Count() > 0)
    {
        var oVisual = oVisualisations.FirstOrDefault();
        sVisualisation = oVisual.Name;
        if (oVisual != null && oVisual.XiVisualisationNVs != null && oVisual.XiVisualisationNVs.Count() > 0)
        {
            oVisualisationNVs = oVisual.XiVisualisationNVs;
            var Heading = oVisualisationNVs.Where(m => m.sName.ToLower() == "Heading".ToLower()).Select(m => m.sValue).FirstOrDefault();
            if (!string.IsNullOrEmpty(Heading))
            {
                sHeading = Heading;
            }
            var Pagination = oVisualisationNVs.Where(m => m.sName.ToLower() == "Pagination".ToLower()).Select(m => m.sValue).FirstOrDefault();
            if (!string.IsNullOrEmpty(Pagination))
            {
                sPagination = Pagination;
            }
        }
    }
    var iTotalRecords = o1ClickD.iTotalRecords;
    bool bDisableNextBtn = true;
    bool bDisablePrevBtn = false;
    var DisplayedRecords = (o1ClickD.iTotaldisplayRecords + 1) * o1ClickD.iPaginationCount;
    if (DisplayedRecords <= iTotalRecords)
    {
        bDisableNextBtn = false;
    }
    if (o1ClickD.iTotaldisplayRecords == 0)
    {
        bDisablePrevBtn = true;
    }
    List<string> Prms = new List<string>();
    string sParams = string.Empty;
    var oCompD = (XIDComponent)Model.oDefintion;
    if (oCompD != null)
    {
        var Params = oCompD.Params;
        foreach (var Param in Params)
        {
            Prms.Add(Param.sName + "_" + Param.sValue);
        }
        sParams = string.Join(":", Prms);
    }
    if (o1ClickD.iTotaldisplayRecords == 0 && o1ClickD.iTotalRecords <= DisplayedRecords)
    {
        sPagination = "no";
    }
    string sErrorMsg = o1ClickD.sErrorMessage;
}

@if (!string.IsNullOrEmpty(sErrorMsg))
{
    <h4 style="text-align: left; width: 50%; margin-top: 30px; color: red">@sErrorMsg</h4>
}
@*<div class="fluid-row" id="ContentPlace-@o1ClickD.ID">*@
@if (!string.IsNullOrEmpty(Mode) && Mode.ToLower() == "editor")
{
    if (o1ClickD.RepeaterResult != null && o1ClickD.RepeaterResult.Count() > 0)
    {
        <div class="row merger-container">
            <div class="col-sm-5 merger-left">
                <textarea></textarea>
                @*<div class="col-md-12"></div>*@
                @if (o1ClickD.RepeaterResult.Count > 0)
                {
                    <textarea id="TextEditordialog" name="Content" title="Content" style="display:none;">@o1ClickD.RepeaterResult[0]</textarea>
                    @Html.HiddenFor(m => m.oContent, new { id = "MyContent", name = "Content" })
                    <textarea id="TextEditorNewDialog" name="Content" class="dialog-box" style="display:none;">@o1ClickD.RepeaterResult[0]</textarea>
                    @Html.HiddenFor(m => m.oContent, new { id = "MyContent1", name = "Content" })
                    <script>
                        //debugger;
                        tinymce.init({
                            selector: 'textarea',
                            menubar: false,
                            //statusbar: false,
                            branding: false,
                            toolbar: 'formatselect | bold italic strikethrough forecolor backcolor | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent | removeformat | mybutton',
                            setup: function (editor) {
                                debugger;
                                editor.on('init', function (e) {
                                    debugger;
                                    var Contentdata = $('#TextEditordialog').val();
                                    tinymce.activeEditor.setContent(Contentdata);
                                });
                                editor.on('keyup', function (e) {
                                    debugger;
                                    $('#TextEditordialog').val('');
                                    $('#TextEditordialog').val(editor.getContent());

                                    $('#TextEditorNewDialog').val('');
                                    $('#TextEditorNewDialog').val(editor.getContent());
                                    //alert('keyup occured');
                                    //console.log('init event', e);
                                    //console.log('Editor contents was modified. Contents: ' + editor.getContent());
                                    //check_submit(); //another function calling
                                });
                                editor.ui.registry.addButton('mybutton', {
                                    text: 'Source Code',
                                    onAction: function () {
                                        debugger;
                                        $("#TextEditorNewDialog").dialog({
                                            width: 1005, height: 610, modal: true, //autoOpen: false,
                                            buttons: {
                                                "Submit": function () {
                                                    debugger;
                                                    var ExistContent = tinymce.get("TextEditordialog");
                                                    var ModifyContent = $("#TextEditorNewDialog").val();
                                                    ExistContent.setContent(ModifyContent);
                                                    $('#TextEditordialog').val(ExistContent.setContent(ModifyContent));
                                                    $("#TextEditorNewDialog").dialog("close");
                                                },
                                                "Cancel": function () {
                                                    $("#TextEditorNewDialog").dialog("close");
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    </script>
                }
            </div>
            <div class="col-sm-2 merger-center">
                @if (string.IsNullOrEmpty(@o1ClickD.sErrorMessage))
                {
                    <button type="button" class="btn" onclick="MergingcontentForTemplate(this)">Merge</button>
                    <button type="button" class="btn" onclick="fncStructPreview(this, '@o1ClickD.ID', '@o1ClickD.FKiStructureID')">Preview Structure</button>
                }
            </div>
            <div class="col-sm-5 merger-right">
                <div id="TempMergingcontent"></div>
                <div id="root"></div>
            </div>
        </div>
    }

}
else if (string.IsNullOrEmpty(@Mode))
{
    var sContainerHTML = o1ClickD.HTMLCode;
    var BeginHTML = string.Empty;
    var EndHTML = string.Empty;
    if (!string.IsNullOrEmpty(sContainerHTML))
    {
        var HTMLs = sContainerHTML.Split(new string[] { "[Child]" }, StringSplitOptions.RemoveEmptyEntries).ToList();
        if(HTMLs.Count() == 2)
        {
            BeginHTML = HTMLs[0];
            EndHTML = HTMLs[1];
        }
    }
    <div class="user-dialog-header" id="ContentPlace-@o1ClickD.ID">

        @if (!string.IsNullOrEmpty(sHeading))
        {
            <h3 class="maintitle">@sHeading</h3>
        }

        @if (o1ClickD.RepeaterResult != null && o1ClickD.RepeaterResult.Count() > 0)
        {
            @Html.Raw(BeginHTML);
            foreach (var item in o1ClickD.RepeaterResult)
            {
                @Html.Raw(item)
            }
            @Html.Raw(EndHTML);
        }
        @if (!string.IsNullOrEmpty(sPagination) && sPagination.ToLower() == "yes")
        {
            if (bDisablePrevBtn)
            {
                <button type="button" disabled class="SubmitBtn btn btn-theme GridPrevBtn" onclick="fncGetPrevHTMLRows(this, '@sParams','ContentPlace-@o1ClickD.ID', '@o1ClickD.sGUID', '@sVisualisation')" data-count="@o1ClickD.iTotaldisplayRecords"><i class="fa fa-edit"></i> Prev</button>
            }
            else
            {
                <button type="button" class="SubmitBtn btn btn-theme GridPrevBtn" onclick="fncGetPrevHTMLRows(this, '@sParams','ContentPlace-@o1ClickD.ID', '@o1ClickD.sGUID', '@sVisualisation')" data-count="@o1ClickD.iTotaldisplayRecords"><i class="fa fa-edit"></i> Prev</button>
            }
            if (bDisableNextBtn)
            {
                <button type="button" disabled class="SubmitBtn btn btn-theme GripNextBtn" onclick="fncGetNextHTMLRows(this, '@sParams','ContentPlace-@o1ClickD.ID', '@o1ClickD.sGUID', '@sVisualisation')" data-count="@o1ClickD.iTotaldisplayRecords"><i class="fa fa-edit"></i> Next</button>
            }
            else
            {
                <button type="button" class="SubmitBtn btn btn-theme GripNextBtn" onclick="fncGetNextHTMLRows(this, '@sParams','ContentPlace-@o1ClickD.ID', '@o1ClickD.sGUID', '@sVisualisation')" data-count="@o1ClickD.iTotaldisplayRecords"><i class="fa fa-edit"></i> Next</button>
            }
        }
    </div>
}
<script>
    $(document).ready(function () {
        if ('@Flag'=='True')
            Leadoneclick();

    });
    function Leadoneclick() {
        debugger;
        //var Param = '4464,25520,25521,25522,25523,25524,25525,25526'
        //var Param = '6C0D499B-510A-4D33-8AC6-582C6A40BBE2,A53D8843-41BB-4395-8FB1-E94D35160D6D,CA6B7C6D-5D52-4973-99BE-C2618EF8F14C,9D09D857-C584-4324-B0EC-CEDB625D6B69,F33CDE16-1E73-4D92-8A68-B507F3C5C5EB,FA12ED18-C0E7-4521-9820-AEB39B93E40C,28E979DE-4504-4C34-8275-FAE92812DD2B,5A3436BA-6F9E-4C22-9367-D25EF8505313';
        var Param = 'F3CAB82C-3B9A-4A84-B313-581EA1A2E5FC'
    $.ajax({
        url: '@Url.Action("LeadTrace", "XiSignalR")',
        type: 'Post',
        contentType: "application/json; charset=utf-8",
        datatype: "json",
        async: true,
        cache: false,
        data: JSON.stringify({ sOneClick: Param }),
        success: function (data) {
            for (var i = 0; i < data.length; i++) {
                var data1 = data[i];
                //$('#XI-' + data1.ID).html(data1.LeadCount);
                //$(data1.Code).append(data1.LeadCount);
                $('#XI-' + data1.sName).html(data1.sValue);
            }
        }
    });
    }
    function MergingcontentForTemplate($this) {
        debugger;
        var sGUID = fncGetGUIDFromHTMLTree('LayoutGUID', $this);
        $('#TempMergingcontent').html('');
        var TempDatacontent = $("#TextEditordialog").val();
        //$('#TempMergingcontent').append(TempDatacontent);
        Params = {
            sGUID: sGUID,
            sTemplateData: TempDatacontent
        }
        $.ajax({
            url: '@Url.Action("MergingTemplate", "Xilink")',
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            cache: false,
            async: true,
            data: JSON.stringify(Params),
            success: function (data) {
                debugger;
                $('#TempMergingcontent').html('');
                $('#TempMergingcontent').append(data);
                //  $('#TempMergingcontent').append(data);
            },
        });
    }
</script>