using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using XICore;
using XISystem;
using System.Web.Script.Serialization;
using System.Text;
using System.Net;
using System.Xml.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Security.Cryptography;
using System.Threading;
using System.Data.SqlClient;
using static XIDatabase.XIDBAPI;
using xiEnumSystem;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.Data;
using System.Configuration;
using System.Net.Security;
using XIDatabase;
using System.Net.Mail;
using RestSharp;
//using System.Net.Http;
//using System.Net.Http.Headers;
//using RestSharp;
using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Management.Smo;
using System.Reflection;
using System.Collections.Specialized;
using System.Web.Hosting;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Globalization;
using Microsoft.Office.Interop.Excel;
using System.Windows;
using NPOI.XSSF.UserModel;
using HtmlAgilityPack;
using NPOI.SS.UserModel;
using ZeeInsurance.IDUServiceLive;

namespace ZeeInsurance
{
    public class ExcelRowCell
    {
        public int iColumnIndex;
        public string sContent;
    }

    public class ExcelRow
    {
        public int iRowIndex;
        public List<ExcelRowCell> rowCells;
    }

    public class ProductVersion
    {
        public int ID { get; set; }
        public Guid XIGUID { get; set; }
        public string sName { get; set; }
    }
    public class Policy
    {
        public SqlConnection TXSqlconn = null;
        public SqlTransaction TXSqlTrans = null;
        private TransactionInitiation TXinitial;
        private iSiganlR oSignalR = null;
        public Policy()
        {
            TXinitial = new TransactionInitiation();
            //this.TXSqlconn = TXinitial.TXSqlconn;
            //this.TXSqlTrans = TXinitial.TXSqltrans;
            TXinitial.sTXBeginAt = "POLICY";
        }
        XIInfraCache oCache = new XIInfraCache();
        XIDefinitionBase oXID = new XIDefinitionBase();
        public CResult MTA(List<CNV> oParams)
        {
            XIInfraCache oCache = new XIInfraCache();
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            List<string> Info = new List<string>();
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iInstanceID = 0; int iQSDID = 0;
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSDID = oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sType = oParams.Where(m => m.sName.ToLower() == "sType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sCoverEnd = oParams.Where(m => m.sName.ToLower() == "sPolicyCoverEnd".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sNoClaimYears = oParams.Where(m => m.sName.ToLower() == "sNoClaimYears".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sEmail = oParams.Where(m => m.sName.ToLower() == "sEmail".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sOverrideStepXiLink = oParams.Where(m => m.sName.ToLower() == "sOverrideQuotesStepilink".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(sQSDID, out iQSDID))
                {
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}", iQSDID.ToString(), null, null);
                }
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iInstanceID = Convert.ToInt32(iID);
                }
                if (!string.IsNullOrEmpty(sBOName) && iInstanceID > 0)
                {
                    int iReloadQSIID = 0;
                    XIIXI oIXI = new XIIXI();
                    // Copy Entire Structure Object
                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> CopyParams = new List<CNV>();
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "istatus", sValue = "15" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "dcoverstart", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "dCurrentPolicyOnCover", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "id", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "rQuotePremium", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "sPolicyNo", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "FKiProductID", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "rTotalPremium", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "fkiproductversionid", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "id", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "iStatus", sValue = "30", sContext = "Save" });
                    if (!string.IsNullOrEmpty(sType) && sType.ToLower() == "renewal")
                    {
                        CopyParams.Add(new CNV { sType = "Policy Version", sName = "iType", sValue = "30", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Policy Version", sName = "iPolicyStatus", sValue = "30", sContext = "Save" });
                        XIAPI oXIAPI = new XIAPI();
                        List<XIWhereParams> oWHParams = new List<XIWhereParams>();
                        oWHParams.Add(new XIWhereParams { sField = "id", sOperator = "=", sValue = iInstanceID.ToString() });
                        var CoverEnd = oXIAPI.GetValue("ACPolicy_T", "dCoverEnd", oWHParams);
                        var PolicyPremium = oXIAPI.GetValue("ACPolicy_T", "rTotalPremium", oWHParams);
                        var CoverEndTime = oXIAPI.GetValue("ACPolicy_T", "tCoverEnd", oWHParams);
                        XIIBO oBOI = new XIIBO();
                        TimeSpan tCoverEnd = new TimeSpan();
                        TimeSpan.TryParse(CoverEndTime, out tCoverEnd);

                        sCoverEnd = oBOI.ConvertToDtTime(CoverEnd).ToString("dd-MMM-yyyy");
                        var dtValue = oBOI.ConvertToDtTime(sCoverEnd);
                        var dValue = dtValue.AddDays(-30);

                        oWHParams = new List<XIWhereParams>();
                        oWHParams.Add(new XIWhereParams { sField = "fkiacpolicyid", sOperator = "=", sValue = iInstanceID.ToString() });
                        oWHParams.Add(new XIWhereParams { sField = "ipolicystatus", sOperator = "=", sValue = "30" });
                        oWHParams.Add(new XIWhereParams { sField = "XICreatedWhen", sOperator = ">=", sValue = dValue.ToString("dd-MMM-yyyy") });
                        oWHParams.Add(new XIWhereParams { sField = "XICreatedWhen", sOperator = "<=", sValue = sCoverEnd });
                        var VersionID = oXIAPI.GetValue("ACPolicyversion_T", "ID", oWHParams);
                        if (!string.IsNullOrEmpty(VersionID))
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-iACPolicyVersionID", VersionID, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}", VersionID, null, null);
                            oWHParams = new List<XIWhereParams>();
                            oWHParams.Add(new XIWhereParams { sField = "fkiacpolicyversionid", sOperator = "=", sValue = VersionID });
                            var ReloadQSIID = oXIAPI.GetValue("XIQSInstance_T", "ID", oWHParams, "QS Instance");
                            if (int.TryParse(ReloadQSIID, out iReloadQSIID))
                            {
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "-policypremium", PolicyPremium, null, null);
                            }
                        }
                        var ProductID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductID}");
                        if (!string.IsNullOrEmpty(ProductID))
                        {
                            oWHParams = new List<XIWhereParams>();
                            oWHParams.Add(new XIWhereParams { sField = "id", sOperator = "=", sValue = ProductID });
                            var Productname = oXIAPI.GetValue("Product", "sName", oWHParams);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-policyinsurer", Productname, null, null);
                        }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", iInstanceID.ToString(), null, null);

                        //DateTime dcoverEnd = DateTime.MinValue;
                        //DateTime.TryParse(sCoverEnd, out dcoverEnd);
                        CopyParams.Add(new CNV { sType = "XIFieldInstance_T", sName = "dCoverStart", sValue = sCoverEnd, sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "XIFieldInstance_T", sName = "tStartTime", sValue = CoverEndTime, sContext = "Save" });
                        int iNoClaimYears = 0;
                        if (int.TryParse(sNoClaimYears, out iNoClaimYears))
                        {
                            CopyParams.Add(new CNV { sType = "XIFieldInstance_T", sName = "iNoClaimsYears", sValue = (iNoClaimYears + 1).ToString(), sContext = "Save" });
                        }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}", "25", null, null);
                    }
                    else
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}", "15", null, null);
                        CopyParams.Add(new CNV { sType = "Policy Version", sName = "iType", sValue = "15", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Policy Version", sName = "iPolicyStatus", sValue = "15", sContext = "Save" });
                    }
                    CopyParams.Add(new CNV { sType = "XIFieldInstance_T", sName = "sEmail", sValue = sEmail, sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "fkiproductaddonid", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "bisconverted", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "istatus", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "rPremiumOverride", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "rAdmin", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "QS Instance", sName = "id", sValue = "S" });
                    if (iQSDID > 0)
                    {
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), sContext = "Save" });
                        var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());
                        if (oQSDefinition != null)
                        {
                            CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiOriginID", sValue = oQSDefinition.FKiOriginID.ToString(), sContext = "Save" });
                            CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiSourceID", sValue = oQSDefinition.FKiSourceID.ToString(), sContext = "Save" });
                        }
                    }
                    CopyParams.Add(new CNV { sType = "QS Instance", sName = "iStage", sValue = "10", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "XIFieldInstance_T", sName = "XIGUID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Driver_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Driver_T", sName = "FKiPolicyID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Claim_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Conviction_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "MedicalCondition_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "-iCurrentDate", DateTime.Now.ToString(), null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", sType, null, null);
                    if (iReloadQSIID == 0)
                    {
                        var oList = oStructure.StructureCopy(sBOName, iInstanceID.ToString(), sStructureName, CopyParams);
                        Info.Add("StructureCopy done");
                        var iNewInsID = oList.oResult.ToString();
                        Info.Add("New Policy ID " + iNewInsID);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", iNewInsID, null, null);
                        //var oData = oIXI.BOI(sBOName, Convert.ToString(iNewInsID)).Structure("MTA Copy").XILoad("");
                        //var QSIID = oData.oSubStructureI("QS Instance").Item(0).AttributeI("id").sValue;
                        var QSIID = oStructure.xiCopyParams.Where(d => d.sBOName == "QS Instance").Select(d => d.AttributeI("id").sValue).FirstOrDefault();
                        var oData = oStructure.xiCopyParams;
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "-iACPolicyVersionID", oData.Where(d => d.sBOName == "Policy Version").Select(t => t.AttributeI("id").sValue).FirstOrDefault(), null, null);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyNo}", oData.Where(d => d.sBOName == "ACPolicy_T").Select(t => t.AttributeI("sPolicyNo").sValue).FirstOrDefault(), null, null);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "-policypremium", oData.Where(d => d.sBOName == "ACPolicy_T").Select(t => t.AttributeI("rTotalPremium").sValue).FirstOrDefault(), null, null);
                        int iQSIID = 0;
                        if (int.TryParse(QSIID, out iQSIID))
                        {
                            Info.Add("New QSInstance ID " + iQSIID);
                            //var oQSInstance = LoadQs(iQSIID, sGUID, oStructure.iParentQSIID);
                            //var oQSInstance = LoadQs(iQSIID, sGUID);
                            if (!string.IsNullOrEmpty(sType) && sType.ToLower() == "renewal")
                            {
                                sType = "Internal";
                            }
                            var oQSInstance = ReLoadQs(iQSIID.ToString(), sGUID, iQSDID.ToString(), sType, "MTA");
                            oQSInstance = Set_XIValues(oQSInstance, oData, sGUID);
                            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            oCResult.oResult = oQSInstance;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(sType) && sType.ToLower() == "renewal")
                        {
                            sType = "Internal";
                        }
                        var oQSInstance = ReLoadQs(iReloadQSIID.ToString(), sGUID, iQSDID.ToString(), sType, "MTA", sOverrideStepXiLink);
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        oCResult.oResult = oQSInstance;
                    }
                }
            }
            catch (Exception ex)
            {
                var st = new StackTrace(ex, true);
                var frame = st.GetFrame(st.FrameCount - 1);
                var line1 = frame.GetFileLineNumber();
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                oCResult.sMessage = sInfo;
                oXID.SaveErrortoDB(oCResult);
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MTA Method at line " + line + "_" + line1 });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public CResult PolicyRenewal(List<CNV> oParams)
        {
            XIInfraCache oCache = new XIInfraCache();
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iInstanceID = 0;
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTransactionType = oParams.Where(m => m.sName.ToLower() == "-transtype".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iInstanceID = Convert.ToInt32(iID);
                }
                if (!string.IsNullOrEmpty(sBOName) && iInstanceID > 0)
                {
                    XIIXI oIXI = new XIIXI();
                    // Copy Entire Structure Object
                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> CopyParams = new List<CNV>();
                    //List<CNV> CopyParams = new List<CNV>();
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "istatus", sValue = "15" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "dcoverstart", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "id", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "ACPolicy_T", sName = "rQuotePremium", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "fkiproductversionid", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "id", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "iStatus", sValue = "30", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "iType", sValue = "15", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "fkiproductaddonid", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "bisconverted", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "istatus", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "rPremiumOverride", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "ACPurchase_T", sName = "rAdmin", sValue = "M" });
                    CopyParams.Add(new CNV { sType = "QS Instance", sName = "id", sValue = "S" });
                    CopyParams.Add(new CNV { sType = "Policy Version", sName = "iPolicyStatus", sValue = "15", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "QS Instance", sName = "iStage", sValue = "10", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "XIFieldInstance_T", sName = "XIGUID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Driver_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Driver_T", sName = "FKiPolicyID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Claim_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "Conviction_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });
                    CopyParams.Add(new CNV { sType = "MedicalCondition_T", sName = "FKiPolicyVersionID", sValue = "", sContext = "Save" });

                    var oList = oStructure.StructureCopy(sBOName, iInstanceID.ToString(), "MTA Copy", CopyParams);
                    var iNewInsID = oList.oResult.ToString();
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", iNewInsID, null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", sTransactionType, null, null);
                    //var oData = oIXI.BOI(sBOName, Convert.ToString(iNewInsID)).Structure("MTA Copy").XILoad("");
                    //var QSIID = oData.oSubStructureI("QS Instance").Item(0).AttributeI("id").sValue;
                    var QSIID = oStructure.xiCopyParams.Where(d => d.sBOName == "QS Instance").Select(d => d.AttributeI("id").sValue).FirstOrDefault();
                    var oData = oStructure.xiCopyParams;
                    int iQSIID = 0;
                    if (int.TryParse(QSIID, out iQSIID))
                    {
                        //var oQSInstance = LoadQs(iQSIID, sGUID, oStructure.iParentQSIID);
                        var oQSInstance = LoadQs(iQSIID, sGUID);
                        //oQSInstance = Set_XIValues(oQSInstance, oData, sGUID);
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        oCResult.oResult = oQSInstance;
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing PolicyRenewal" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        // NOTE: OLD CODE DONT REMOVE UNTILL WORKING FINE 
        //private XIIQS Set_XIValues(XIIQS oQSInstance, XIBOInstance oData, string sGUID)
        //{
        //    var sSessionID = HttpContext.Current.Session.SessionID;
        //    XIInfraCache oCache = new XIInfraCache();
        //    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "MTA", null, null);
        //    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|doldcoverstart}", oData.BOI.Attributes["dcoverstart"].sValue, null, null);
        //    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|roldGrossPremium}", oData.BOI.Attributes["rGrossPremium".ToLower()].sValue, null, null);
        //    var PolicyVersion = oData.oSubStructureI("Policy Version");
        //    if (PolicyVersion != null)
        //    {
        //        var ProductVersionID = PolicyVersion.Item(0).Attributes["fkiproductversionid"];
        //        if (ProductVersionID != null)
        //        {
        //            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}", ProductVersionID.sValue, null, null);
        //        }
        //    }
        //    var Addons = oData.oSubStructureI("ACPurchase_T");
        //    if (Addons != null && Addons.oBOIList != null)
        //    {
        //        foreach (var item in Addons.oBOIList)
        //        {
        //            if (item.Attributes["istatus"].sValue == "10")
        //            {
        //                var sName = "Addon_" + item.Attributes["fkiproductaddonid"].sValue;
        //                oCache.Set_ParamVal(sSessionID, sGUID, null, sName, item.Attributes["fkiproductaddonid"].sValue, null, null);
        //            }
        //        }
        //    }
        //    return oQSInstance;
        //}

        private XIIQS Set_XIValues(XIIQS oQSInstance, List<XICopyParams> oData, string sGUID)
        {
            var sSessionID = HttpContext.Current.Session.SessionID;
            XIInfraCache oCache = new XIInfraCache();
            //oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "MTA", null, null);
            if (oData.Any(d => d.sBOName == "ACPolicy_T"))
            {
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|doldcoverstart}", oData.Where(d => d.sBOName == "ACPolicy_T").Select(t => t.AttributeI("dCurrentPolicyOnCover").sValue).FirstOrDefault(), null, null);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|roldGrossPremium}", oData.Where(d => d.sBOName == "ACPolicy_T").Select(t => t.AttributeI("rQuotePremium").sValue).FirstOrDefault(), null, null);
            }
            if (oData.Any(d => d.sBOName == "Policy Version"))
            {
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}", oData.Where(d => d.sBOName == "Policy Version").Select(t => t.AttributeI("fkiproductversionid").sValue).FirstOrDefault(), null, null);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}", oData.Where(d => d.sBOName == "Policy Version").Select(t => t.AttributeI("id").sValue).FirstOrDefault(), null, null);
            }
            return oQSInstance;
        }

        public CResult InsertLead(List<CNV> oParams)
        {
            string iQSInstanceID = string.Empty;
            int iQSIID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            string sGUID = string.Empty;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iQSInstanceID = iID;
                }
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                int iQSDID = 0;
                string sQSDID = (string)oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                string sCustomerID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|FKiCustomerID}");
                string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                if (int.TryParse(sQSDID, out iQSDID)) { }
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(iQSDID, iQSInstanceID, null, 0, 0, null);
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                Guid QSGUID = Guid.Empty;
                int.TryParse(iID, out iQSIID);
                Guid.TryParse(iID, out QSGUID);
                if (iQSIID == 0)
                {
                    iQSIID = oQSI.ID;
                }
                oQSI.ID = iQSIID;
                var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                if (oQSDefinition != null)
                {
                    oQSI.QSDefinition = oQSDefinition;
                }
                string[] oDependentSteps = new string[] { "Additional Driver_1", "Additional Driver_2", "Additional Driver_3", "Forgot Password", "Login", "Reset Password" };
                //XIIQS oQSI = (XIIQS)oCache.GetQuestionSetInstanceFromCache(sGUID, "QuestionSetCache", iQSInstanceID);
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iQSInstanceID);

                //XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID);
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });

                //XIBOBuilding oBOBuilding = new XIBOBuilding();
                //var oQSDI = oBOBuilding.GetQSNVPairs(oQSI);
                //if (oQSDI.xiStatus == 0 && oQSDI.oResult != null)
                //{
                //    OQSD = (Dictionary<string, CNV>)oQSDI.oResult;
                //}
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = iQSInstanceID.ToString() });
                XIIBO oBOI = new XIIBO();
                oBOI = oXII.BOI("Lead_T", null, null, oWhrParams);
                var iInstanceID = "";
                //Guid iQSMaxStage = Guid.Empty;
                int iQSMaxStage = 0;
                string sCurrentStep = string.Empty;
                string sQSMaxStage = string.Empty;
                string iFromID = string.Empty; string iToID = string.Empty;
                string sFrom = string.Empty; string sTo = string.Empty;
                string dtFrom = string.Empty; string dtTo = string.Empty;
                string sPastStatus = string.Empty; string sCurrentStatus = string.Empty;
                if (oBOI != null && oBOI.Attributes.ContainsKey(oBOI.BOD.sPrimaryKey))
                {
                    iInstanceID = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue;
                    if (!OQSD.ContainsKey("rBestQuote") && oBOI.Attributes.ContainsKey("rBestQuote"))
                    {
                        OQSD["rBestQuote"] = new CNV { sName = "rBestQuote", sValue = oBOI.Attributes["rBestQuote"].sValue };
                    }
                    if (!OQSD.ContainsKey("dtQuoteDate") && oBOI.Attributes.ContainsKey("dtQuoteDate"))
                    {
                        OQSD["dtQuoteDate"] = new CNV { sName = "dtQuoteDate", sValue = oBOI.Attributes["dtQuoteDate"].sValue };
                    }
                    if (!OQSD.ContainsKey("dtBestPriceDate") && oBOI.Attributes.ContainsKey("dtBestPriceDate"))
                    {
                        OQSD["dtBestPriceDate"] = new CNV { sName = "dtBestPriceDate", sValue = oBOI.Attributes["dtBestPriceDate"].sValue };
                    }
                    if (!OQSD.ContainsKey("iStatus") && oBOI.Attributes.ContainsKey("iStatus"))
                    {
                        sPastStatus = oBOI.Attributes["iStatus"].sValue;
                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = oBOI.Attributes["iStatus"].sValue, sPreviousValue = sPastStatus };
                    }
                    if (oBOI.Attributes.ContainsKey("iQSMaxStage"))
                    {

                        //if (Guid.TryParse(oBOI.Attributes["iQSMaxStage"].sValue, out iQSMaxStage))
                        if (int.TryParse(oBOI.Attributes["iQSMaxStage"].sValue, out iQSMaxStage))
                        { }
                    }
                    if (oBOI.Attributes.ContainsKey("iQSStage"))
                    {
                        var iQSStage = 0;
                        if (int.TryParse(oBOI.Attributes["iQSStage"].sValue, out iQSStage))
                        {
                            iFromID = iQSStage.ToString();
                        }
                    }
                    if (oBOI.Attributes.ContainsKey("sQSStage"))
                    {
                        sFrom = oBOI.Attributes["sQSStage"].sValue;
                        sQSMaxStage = oBOI.Attributes["sQSStage"].sValue;
                    }
                    if (oBOI.Attributes.ContainsKey("sQSMaxStage"))
                    {
                        sQSMaxStage = oBOI.Attributes["sQSMaxStage"].sValue;
                    }
                    if (!OQSD.ContainsKey("sRefrenceID") && oBOI.Attributes.ContainsKey("sRefrenceID") && !string.IsNullOrEmpty(oBOI.Attributes["sRefrenceID"].sValue))
                    {
                        OQSD["sRefrenceID"] = new CNV { sName = "sRefrenceID", sValue = oBOI.Attributes["sRefrenceID"].sValue/*random.Next(1, 100000000).ToString(new String('0', 7))*/ };
                    }
                    if (!OQSD.ContainsKey("sSourceReferenceID") && oBOI.Attributes.ContainsKey("sSourceReferenceID") && !string.IsNullOrEmpty(oBOI.Attributes["sSourceReferenceID"].sValue))
                    {
                        OQSD["sSourceReferenceID"] = new CNV { sName = "sSourceReferenceID", sValue = oBOI.Attributes["sSourceReferenceID"].sValue };
                    }
                    if (!OQSD.ContainsKey("dPolicyDate") && oBOI.Attributes.ContainsKey("dPolicyDate") && !string.IsNullOrEmpty(oBOI.Attributes["dPolicyDate"].sValue))
                    {
                        OQSD["dPolicyDate"] = new CNV { sName = "dPolicyDate", sValue = oBOI.Attributes["dPolicyDate"].sValue };
                    }
                    if (!OQSD.ContainsKey("sFirstName") && !string.IsNullOrEmpty(oBOI.Attributes["sFirstName"].sValue))
                    {
                        OQSD["sFirstName"] = new CNV { sName = "sFirstName", sValue = oBOI.Attributes["sFirstName"].sValue };
                    }
                    if (!OQSD.ContainsKey("sLastName") && !string.IsNullOrEmpty(oBOI.Attributes["sLastName"].sValue))
                    {
                        OQSD["sLastName"] = new CNV { sName = "sLastName", sValue = oBOI.Attributes["sLastName"].sValue };
                    }
                    if (!OQSD.ContainsKey("sMob") && !string.IsNullOrEmpty(oBOI.Attributes["sMob"].sValue))
                    {
                        OQSD["sMob"] = new CNV { sName = "sMob", sValue = oBOI.Attributes["sMob"].sValue };
                    }
                    if (!OQSD.ContainsKey("sEmail") && !string.IsNullOrEmpty(oBOI.Attributes["sEmail"].sValue))
                    {
                        OQSD["sEmail"] = new CNV { sName = "sEmail", sValue = oBOI.Attributes["sEmail"].sValue };
                    }
                    if (!OQSD.ContainsKey("FKiClientID") && !string.IsNullOrEmpty(oBOI.Attributes["FKiClientID"].sValue))
                    {
                        OQSD["FKiClientID"] = new CNV { sName = "FKiClientID", sValue = oBOI.Attributes["FKiClientID"].sValue };
                    }
                }
                if (!string.IsNullOrEmpty(sTranstype) && sTranstype == "MTA")
                {
                    var LeadBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Lead_T", null);
                    if (!OQSD.ContainsKey("iStatus") && LeadBOD != null && LeadBOD.Attributes.ContainsKey("istatus"))
                    {
                        var iStatus = LeadBOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "MTA").Select(m => m.sValues).FirstOrDefault();
                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = iStatus };
                    }
                }
                if (!string.IsNullOrEmpty(sTranstype) && sTranstype.ToLower() == "renewal")
                {
                    var LeadBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Lead_T", null);
                    if (!OQSD.ContainsKey("iStatus") && LeadBOD != null && LeadBOD.Attributes.ContainsKey("istatus"))
                    {
                        var iStatus = LeadBOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Renewal").Select(m => m.sValues).FirstOrDefault();
                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = iStatus };
                    }
                    if (!OQSD.ContainsKey("dPolicyStart") && OQSD.ContainsKey("dCoverStart"))
                    {
                        XIIBO oBOII = new XIIBO();
                        DateTime dt = oBOII.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                        //oResult.sMessage = "dCoverEnd after conversion" + dt;
                        if (dt != DateTime.MinValue)
                        {
                            //DateTime dCoverStart = dt.AddDays(1);
                            //if (OQSD.ContainsKey("dCoverStart"))
                            //{
                            //    OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = dCoverStart.ToString() };
                            //}
                            OQSD["dPolicyStart"] = new CNV { sName = "dPolicyStart", sValue = dt.AddYears(1).ToString() };
                        }
                    }
                }
                DateTime dtDOB = DateTime.MinValue;
                var MainDriverID = (string)oCache.Get_ParamVal(sSessionID, sGUID, null, "-MainDriverID");
                if (!string.IsNullOrEmpty(MainDriverID))
                {
                    var DriverI = oXII.BOI("Driver_T", MainDriverID);
                    if (DriverI.Attributes.ContainsKey("dDOB"))
                    {
                        var dDOB = DriverI.Attributes["dDOB"].sValue;
                        if (DateTime.TryParse(dDOB, out dtDOB)) { }
                    }
                }
                var MaxStepOrder = oQSI.QSDefinition.Steps.Where(m => m.Value.ID == iQSMaxStage).Select(m => m.Value.iOrder).FirstOrDefault();
                var CurrentStepOrder = oQSI.QSDefinition.Steps.Values.Where(m => m.XIGUID == oQSI.iCurrentStepIDXIGUID).Select(m => m.iOrder).FirstOrDefault();
                //TO DO: iQSMaxStage is changed to GUID from int, modified <= condition to == condition because of GUID(iQSMaxStage <= oQSI.iCurrentStepIDXIGUID)
                if ((iQSMaxStage == oQSI.iCurrentStepID) || (MaxStepOrder <= CurrentStepOrder))
                {
                    iQSMaxStage = oQSI.iCurrentStepID;
                }
                var MaxStageStepI = oQSI.QSDefinition.StepD(sQSMaxStage);
                sCurrentStep = oQSI.QSDefinition.Steps.Where(m => m.Value.XIGUID == oQSI.iCurrentStepIDXIGUID).Select(m => m.Value.sName).FirstOrDefault();
                if (MaxStageStepI == null || (CurrentStepOrder >= MaxStageStepI.iOrder && !oDependentSteps.Any(m => m == sCurrentStep)))
                {
                    sQSMaxStage = oQSI.QSDefinition.Steps.Where(m => m.Value.XIGUID == oQSI.iCurrentStepIDXIGUID).Select(m => m.Value.sName).FirstOrDefault();
                }
                //if (oBOI == null)
                //{
                var oBuildBOI = new XIIBO();
                if (!OQSD.ContainsKey("FKiQSInstanceIDXIGUID"))
                {
                    OQSD["FKiQSInstanceIDXIGUID"] = new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = iQSInstanceID.ToString() };
                }
                if (!OQSD.ContainsKey("dDOB"))
                {
                    OQSD["dDOB"] = new CNV { sName = "dDOB", sValue = dtDOB.ToString() };
                }
                if (!OQSD.ContainsKey("iQSStage"))
                {
                    iToID = oQSI.iCurrentStepID.ToString();
                    OQSD["iQSStage"] = new CNV { sName = "iQSStage", sValue = oQSI.iCurrentStepID.ToString() };
                }
                if (!OQSD.ContainsKey("dPolicyStart") && OQSD.ContainsKey("dCoverStart"))
                {
                    OQSD["dPolicyStart"] = new CNV { sName = "dPolicyStart", sValue = OQSD["dCoverStart"].sValue };
                }
                if (!OQSD.ContainsKey("iQSMaxStage"))
                {
                    OQSD["iQSMaxStage"] = new CNV { sName = "iQSMaxStage", sValue = iQSMaxStage.ToString() };
                }
                if (!OQSD.ContainsKey("sQSMaxStage"))
                {
                    OQSD["sQSMaxStage"] = new CNV { sName = "sQSMaxStage", sValue = sQSMaxStage };
                }
                if (!OQSD.ContainsKey("sQSStage"))
                {
                    sTo = sCurrentStep;
                    OQSD["sQSStage"] = new CNV { sName = "sQSStage", sValue = sCurrentStep };
                }
                if (!OQSD.ContainsKey("dtQSCreatedDate"))
                {
                    OQSD["dtQSCreatedDate"] = new CNV { sName = "dtQSCreatedDate", sValue = oQSI.CreatedTime.ToString() };
                }
                if (!OQSD.ContainsKey("FKiSourceID"))
                {
                    OQSD["FKiSourceID"] = new CNV { sName = "FKiSourceID", sValue = oQSI.FKiSourceID.ToString() };
                }
                //if (!OQSD.ContainsKey("dDrivingtest"))
                //{
                //    OQSD["dDrivingtest"] = new CNV { sName = "dDrivingtest", sValue = oQSI.ToString() };
                //}
                //if (!OQSD.ContainsKey("FKiSourceID"))
                //{
                //    OQSD["FKiSourceID"] = new CNV { sName = "FKiSourceID", sValue = oQSI.FKiSourceID.ToString() };
                //}
                //if (!OQSD.ContainsKey("FKiSourceID"))
                //{
                //    OQSD["FKiSourceID"] = new CNV { sName = "FKiSourceID", sValue = oQSI.FKiSourceID.ToString() };
                //}
                XIDSource oSourceD = (XIDSource)oCache.GetObjectFromCache(XIConstant.CacheSource, null, oQSI.FKiSourceID.ToString());
                if (oQSI.FKiSourceID > 0)
                {
                    if (!OQSD.ContainsKey("FKsSource"))
                    {
                        OQSD["FKsSource"] = new CNV { sName = "FKsSource", sValue = oSourceD.sName };
                    }
                }
                if (!OQSD.ContainsKey("sExternalRefID"))
                {
                    OQSD["sExternalRefID"] = new CNV { sName = "sExternalRefID", sValue = oQSI.sExternalRefID };
                }
                if (!OQSD.ContainsKey("sRefrenceID"))
                {
                    string sReference = RandomString(7);
                    OQSD["sRefrenceID"] = new CNV { sName = "sRefrenceID", sValue = sReference/*random.Next(1, 100000000).ToString(new String('0', 7))*/ };
                }
                if (!OQSD.ContainsKey("FKiClientID") && !string.IsNullOrEmpty(sCustomerID))
                {
                    OQSD["FKiClientID"] = new CNV { sName = "FKiClientID", sValue = sCustomerID };
                }
                var sUserIP = Utility.GetIPAddress();
                if (!OQSD.ContainsKey("sUserIP"))
                {
                    OQSD["sUserIP"] = new CNV { sName = "sUserIP", sValue = sUserIP };
                }
                if (!OQSD.ContainsKey("FKiClassID"))
                {
                    OQSD["FKiClassID"] = new CNV { sName = "FKiClassID", sValue = oQSI.FKiClassID.ToString() };
                }
                if (oQSI.FKiClassID > 0)
                {
                    XIDClass oClassD = (XIDClass)oCache.GetObjectFromCache(XIConstant.CacheClass, null, oQSI.FKiClassID.ToString());
                    if (!OQSD.ContainsKey("FKsClass"))
                    {
                        OQSD["FKsClass"] = new CNV { sName = "FKsClass", sValue = oClassD.sName };
                    }
                }
                if (!OQSD.ContainsKey("sSourceReferenceID"))
                {
                    //string sPrefixCode = string.Empty;
                    //var SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                    //if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sPrefixCode"))
                    //{
                    string sPrefixCode = oSourceD.sPrefixCode;
                    //}
                    //var sReference = CustomerRefNoGeneration(sPrefixCode);
                    var sReference = sPrefixCode + RandomNumber(6);
                    OQSD["sSourceReferenceID"] = new CNV { sName = "sSourceReferenceID", sValue = sReference };
                }
                if (!OQSD.ContainsKey("iOrigin"))
                {
                    OQSD["iOrigin"] = new CNV { sName = "iOrigin", sValue = oSourceD.FKiOriginID.ToString() };
                }
                if (!OQSD.ContainsKey("iStage"))
                {
                    OQSD["iStage"] = new CNV { sName = "iStage", sValue = oQSI.iStage.ToString() };
                }
                if (!OQSD.ContainsKey("iMaxStage"))
                {
                    OQSD["iMaxStage"] = new CNV { sName = "iMaxStage", sValue = oQSDefinition.iMaxStage.ToString() };
                }
                if (!OQSD.ContainsKey("iStatus"))
                {
                    OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "0" };
                }

                var LeadData = oBuildBOI.BuildBoObject("Lead_T", "Create", OQSD, iInstanceID);
                if (LeadData.xiStatus == 0 && LeadData.oResult != null)
                {
                    var oLead = (CResult)LeadData.oResult;
                    long iLeadID = 0;
                    var LeadBOI = (XIIBO)oLead.oResult;
                    var sLeadID = string.Empty;
                    if (LeadBOI.Attributes.ContainsKey(LeadBOI.BOD.sPrimaryKey))
                    {
                        sLeadID = LeadBOI.Attributes[LeadBOI.BOD.sPrimaryKey].sValue;
                    };
                    long.TryParse(sLeadID, out iLeadID);
                    if (iLeadID > 0)
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, "", "-iLeadInstanceID", iLeadID.ToString(), null, null);
                        if (string.IsNullOrEmpty(iInstanceID))
                        {
                            oCResult.sMessage = "Info: [ QSInstanceID: " + iQSInstanceID + " ] - Lead inserted Successfully";
                            oXID.SaveErrortoDB(oCResult, iQSIID);
                        }
                        //Save to Life Cycle
                        XIIBO oLCBOI = new XIIBO();
                        var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                        if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                        {
                            oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("iFromID"))
                        {
                            oLCBOI.Attributes.Add("iFromID", new XIIAttribute() { sName = "iFromID", sValue = iFromID, bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("iToID"))
                        {
                            oLCBOI.Attributes.Add("iToID", new XIIAttribute() { sName = "iToID", sValue = iToID, bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                        {
                            oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sFrom, bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                        {
                            oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sTo, bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                        {
                            oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("FKiQSIIDXIGUID"))
                        {
                            oLCBOI.Attributes.Add("FKiQSIIDXIGUID", new XIIAttribute() { sName = "FKiQSIIDXIGUID", sValue = iQSInstanceID.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                        {
                            oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Step", bDirty = true });
                        }
                        oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                        oLCBOI.BOD = oBOInsatnce.BOD;
                        oCR = oLCBOI.Save(oLCBOI);
                        if (oCR.bOK && oCR.oResult != null)
                        {
                            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            oCResult.oResult = LeadBOI;
                        }
                        else
                        {
                            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                        }
                    }
                }
                else
                {
                    oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " ] - Lead insertion failed";
                    oXID.SaveErrortoDB(oCResult, iQSIID);
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                    var oLead = (CResult)LeadData.oResult;
                    var LeadBOI = (XIIBO)oLead.oResult;
                    oCResult.oResult = LeadBOI;
                }
                //}
            }
            catch (Exception ex)
            {
                XIInfraUsers oUser = new XIInfraUsers();
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oUser.Save_UserMessage("", "", null, oCResult.xiStatus, oCResult.sMessage, sGUID);
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSIID);
            }
            return oCResult;
        }

        public CResult InsertDriver(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            int iQSInstanceID = 0;
            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                XIInfraCache oCache = new XIInfraCache();

                string bIsAPISave = oParams.Where(m => m.sName.ToLower() == "bIsAPI".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                bool bMainDriver = false;
                string sMainDriver = oParams.Where(m => m.sName.ToLower() == "sMainDriver".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(sMainDriver))
                {
                    bool.TryParse(sMainDriver, out bMainDriver);
                }
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iQSInstanceID = Convert.ToInt32(iID);
                }
                string IsUpdateFromXiValues = oCache.Get_ParamVal(sSessionID, sGUID, "", "UpdateFromXivalues");
                string IsAmend = oCache.Get_ParamVal(sSessionID, sGUID, "", "IsAmend");
                XIIXI oXII = new XIIXI();
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(iQSDID, iQSInstanceID, null, 0, 0, null);
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iQSInstanceID);
                //XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID);
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "fkiqsinstanceid", sValue = iQSInstanceID.ToString() });
                oWhrParams.Add(new CNV { sName = "bmaindriver", sValue = 1.ToString() });
                XIIBO oBOI = new XIIBO();
                oBOI = oXII.BOI("Driver_T", null, "create", oWhrParams);
                if (oBOI == null)
                {
                    oBOI = new XIIBO();
                    XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "driver_t", null);
                    oBOI.BOD = oBOD;
                    oBOI.LoadBOI("create");
                    XIIAttribute oAttrI = new XIIAttribute();
                    oAttrI.sName = "fkiqsinstanceid";
                    oAttrI.sValue = iQSInstanceID.ToString();
                    oAttrI.bDirty = true;
                    oBOI.Attributes["fkiqsinstanceid"] = oAttrI;
                    if (bMainDriver)
                    {
                        XIIAttribute oAttrI2 = new XIIAttribute();
                        oAttrI2.sName = "bmaindriver";
                        oAttrI2.sValue = "1";
                        oAttrI2.bDirty = true;
                        oBOI.Attributes["bmaindriver"] = oAttrI2;
                        //oBOI.Attributes["fkiqsinstanceid"].sValue = iQSInstanceID.ToString();
                        oBOI.Attributes["enumrelationship"].sValue = "14";
                    }
                }
                if (oQSI.XIValues.ContainsKey("sFirstName"))
                {
                    oBOI.Attributes["sforename"].sValue = oQSI.XIValues["sFirstName"].sValue;
                }
                if (oQSI.XIValues.ContainsKey("sLastName"))
                {
                    oBOI.Attributes["sname"].sValue = oQSI.XIValues["sLastName"].sValue;
                }
                if (oQSI.XIValues.ContainsKey("dDOB"))
                {
                    oBOI.Attributes["ddob"].sValue = oQSI.XIValues["dDOB"].sValue;
                }
                if (oQSI.XIValues.ContainsKey("iTitle"))
                {
                    oBOI.Attributes["ititle"].sValue = oQSI.XIValues["iTitle"].sValue;
                }
                if (oQSI.XIValues.ContainsKey("iGender"))
                {
                    oBOI.Attributes["isex"].sValue = oQSI.XIValues["iGender"].sValue;
                }
                if ((IsUpdateFromXiValues != "no") /*|| (IsAmend == "yes" && IsUpdateFromXiValues == "yes")*/)
                {
                    if (oQSI.XIValues.ContainsKey("iOccupation"))
                    {
                        oBOI.Attributes["enumoccupatation"].sValue = oQSI.XIValues["iOccupation"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("sUKResidency"))
                    {
                        oBOI.Attributes["sukresidency"].sValue = oQSI.XIValues["sUKResidency"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("dDateTestPassed"))
                    {
                        int LienceHeldYears = 0;
                        if (int.TryParse(oQSI.XIValues["dDateTestPassed"].sValue, out LienceHeldYears))
                        {
                        }
                        DateTime DateTestPassed = DateTime.Now.AddYears(-LienceHeldYears);
                        oBOI.Attributes["ddatetestpassed"].sValue = DateTestPassed.ToString();
                    }
                    if (oQSI.XIValues.ContainsKey("sDrivingQualification"))
                    {
                        oBOI.Attributes["sdrivingqualification"].sValue = oQSI.XIValues["sDrivingQualification"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("sEmploymentType"))
                    {
                        oBOI.Attributes["semploymenttype"].sValue = oQSI.XIValues["sEmploymentType"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("dDOBDay") && oQSI.XIValues.ContainsKey("dDOBMonth") && oQSI.XIValues.ContainsKey("dDOBYear"))
                    {
                        int day = 0; int month = 0; int year = 0;
                        var sday = oQSI.XIValues["dDOBDay"].sValue;
                        int.TryParse(sday, out day);
                        var smonth = oQSI.XIValues["dDOBMonth"].sValue;
                        int.TryParse(smonth, out month);
                        var syear = oQSI.XIValues["dDOBYear"].sValue;
                        int.TryParse(syear, out year);
                        if (day > 0 && month > 0 && year > 0)
                        {
                            var dtDOB = new DateTime(year, month, day);
                            oBOI.Attributes["ddob"].sValue = dtDOB.ToString(XIConstant.Date_Format);
                        }
                    }
                    if (oQSI.XIValues.ContainsKey("iUKResidentMonth"))
                    {
                        oBOI.Attributes["iUKResidentMonth".ToLower()].sValue = oQSI.XIValues["iUKResidentMonth"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("iUKResidentYear"))
                    {
                        oBOI.Attributes["iUKResidentYear".ToLower()].sValue = oQSI.XIValues["iUKResidentYear"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("bSinceBirth"))
                    {
                        if (oQSI.XIValues["bSinceBirth"].sValue != null && (oQSI.XIValues["bSinceBirth"].sValue.ToLower() == "on" || oQSI.XIValues["bSinceBirth"].sValue.ToLower() == "true"))
                        {
                            oBOI.Attributes["bSinceBirth".ToLower()].sValue = "true";
                        }
                        else
                        {
                            oBOI.Attributes["bSinceBirth".ToLower()].sValue = "false";
                        }
                    }
                    if (oQSI.XIValues.ContainsKey("sSecondaryEmploymentType"))
                    {
                        oBOI.Attributes["ssecondaryemploymenttype"].sValue = oQSI.XIValues["sSecondaryEmploymentType"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("sSecondaryOccupation"))
                    {
                        oBOI.Attributes["ssecondaryoccupation"].sValue = oQSI.XIValues["sSecondaryOccupation"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("sSecondaryBusinessCategory"))
                    {
                        oBOI.Attributes["ssecondarybusinesscategory"].sValue = oQSI.XIValues["sSecondaryBusinessCategory"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("sMaritalStatus"))
                    {
                        oBOI.Attributes["smaritalstatus"].sValue = oQSI.XIValues["sMaritalStatus"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("sBusinessCategory"))
                    {
                        oBOI.Attributes["sbusinesscategory"].sValue = oQSI.XIValues["sBusinessCategory"].sValue;
                    }
                    if (oQSI.XIValues.ContainsKey("vehiclesareavailableinthehousehold"))
                    {
                        oBOI.Attributes["sothervehiclesowned"].sValue = oQSI.XIValues["vehiclesareavailableinthehousehold"].sValue;
                    }
                }
                oBOI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                oBOI.Save(oBOI, false);
                var iDriverID = oBOI.Attributes[oBOI.BOD.sPrimaryKey.ToLower()].sValue;
                oCResult.sMessage = "Driver Insert: QSInstanceID: " + oQSI.ID + " and DriverID: " + iDriverID;
                oXID.SaveErrortoDB(oCResult, oQSI.ID);
                if (string.IsNullOrEmpty(bIsAPISave))
                {
                    sSessionID = HttpContext.Current.Session.SessionID;
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|ActiveBO}", "Driver_T", null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "-MainDriverID", iDriverID, null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|Driver_T.id}", iDriverID, null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{-MainDriverID}", iDriverID, null, null);
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Inserting Main Driver" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public CResult InsertDairy(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            var iAuditID = 0;
            int iQSInstanceID = 0;
            int iACPolicyID = 0;
            try
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Dairy adding in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Dairy adding in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);
                oCResult.oTraceStack.Add(new CNV { sName = "Dairies", sValue = "Insert Dairy method Started" });
                XIInfraCache oCache = new XIInfraCache();
                string iQSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iQSIID, out iQSInstanceID))
                { }
                string iPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iPolicyID, out iACPolicyID))
                { }
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                XID1Click oD1Click = new XID1Click();
                int iProductID = 0;
                var oPolicy = oIXI.BOI("ACPolicy_T", iPolicyID);
                if (oPolicy.Attributes != null)
                {
                    var sProductID = oPolicy.Attributes["FKiProductID"].sValue;
                    var sPolicyStatus = oPolicy.Attributes["iStatus"].sValue;
                    int itransType = 2;
                    if (!string.IsNullOrEmpty(sPolicyStatus) && sPolicyStatus.ToLower() == "25")
                    {
                        itransType = 4;
                    }
                    else if (!string.IsNullOrEmpty(sPolicyStatus) && sPolicyStatus.ToLower() == "50")
                    {
                        itransType = 12;
                    }
                    if (int.TryParse(sProductID, out iProductID))
                    {
                        XIInfraScript oScript = new XIInfraScript();
                        var oTaskBatch1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Product Dairy Batch list");
                        XIDStructure oStructure = new XIDStructure();
                        List<CNV> nParams = new List<CNV>();
                        CNV oNV = new CNV();
                        oNV.sName = "{XIP|FKiProductID}";
                        oNV.sValue = iProductID.ToString();
                        nParams.Add(oNV);
                        var Query = oStructure.ReplaceExpressionWithCacheValue(oTaskBatch1ClickI.Query, nParams);
                        oD1Click.Query = Query;
                        oD1Click.Name = "XProdDiaryBatch_T";
                        var result = oD1Click.OneClick_Run(false);
                        var oPDBList = result.Values.ToList();
                        List<int> BatchIDs = new List<int>();
                        foreach (var oPDB in oPDBList)
                        {
                            BatchIDs.Add(oPDB.AttributeI("Diary Batch").iValue);
                        }
                        var TaskBatchTemplateID = string.Empty;
                        var sQuery = "select * from TaskBatchTemplate_T where ID in(" + string.Join(",", BatchIDs) + ") and FKiACTransTypeID = " + itransType;
                        XID1Click oXI1Click = new XID1Click();
                        oXI1Click.Query = sQuery;
                        oXI1Click.Name = "TaskBatchTemplate_T";
                        var Result = oXI1Click.GetList();
                        if (Result.bOK || Result.oResult != null)
                        {
                            var oBatchIList = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                            if (oBatchIList.Count > 0)
                            {
                                var oBatch = oBatchIList.FirstOrDefault();
                                TaskBatchTemplateID = oBatch.Attributes["id"].sValue;
                            }
                        }
                        if (string.IsNullOrEmpty(TaskBatchTemplateID) && result.Count() > 0)
                        {
                            TaskBatchTemplateID = result.FirstOrDefault().Value.Attributes["Diary Batch"].sValue;
                        }
                        //List<CNV> oNVs = new List<CNV>();
                        //oNVs.Add(new CNV { sName = "iInstanceID", sValue = iPolicyID.ToString() });
                        oParams.Add(new CNV { sName = "iTaskBatchTempalteID", sValue = TaskBatchTemplateID.ToString() });
                        var oResult = GetTaskBatch(oParams);
                        foreach (var otrace in oResult.oTraceStack)
                        {
                            oCResult.oTraceStack.Add(otrace);
                        }
                    }
                }
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Dairy added successfully";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                {
                    oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = sACPolicyVersionID;
                }
                else
                {
                    oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sACPolicyVersionID });
                }
                Audit_Policy(oParams);
            }
            catch (Exception ex)
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Dairy adding failed";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                Audit_Policy(oParams);
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Inserting Dairy" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iACPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oTraceStack.Add(new CNV { sName = "Dairies", sValue = "Error: Insert Dairy" + oCResult.sMessage });
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iACPolicyID);
            }
            return oCResult;
        }
        public CResult GetTaskBatch(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            int iQSInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                string sDueInDays = string.Empty;
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iTaskBatchTempalteID = oParams.Where(m => m.sName.ToLower() == "iTaskBatchTempalteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iQSIID, out iQSInstanceID))
                { }
                if (int.TryParse(iID, out iPolicyID))
                { }
                string sCustomerID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|FKiCustomerID}");
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sClientReference = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|sClientReference}");
                int iPolicyVersionID = 0;
                if (int.TryParse(sACPolicyVersionID, out iPolicyVersionID))
                { }
                XIIXI oIXI = new XIIXI();
                string sPolicyStartDate = string.Empty;
                string sPolicyNumber = string.Empty;
                var oPolicy = oIXI.BOI("ACPolicy_T", iID);
                if (oPolicy.Attributes.ContainsKey("dCoverStart"))
                {
                    sPolicyStartDate = oPolicy.Attributes["dCoverStart"].sValue;
                }
                if (oPolicy.Attributes.ContainsKey("sPolicyNo"))
                {
                    sPolicyNumber = oPolicy.Attributes["sPolicyNo"].sValue;
                }
                XIInfraScript oScript = new XIInfraScript();
                List<CNV> nParams = new List<CNV>();
                XIDStructure oStructure = new XIDStructure();
                XIIBO oBO = new XIIBO();
                //var oTaskBatch1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Task Batch");
                //nParams = new List<CNV>();
                CNV oNV = new CNV();
                //oNV.sName = "{XIP|TaskBatchTemplate_T.id}";
                //oNV.sValue = iTaskBatchTempalteID;
                //nParams.Add(oNV);
                //var TaskBatchQuery = oStructure.ReplaceExpressionWithCacheValue(oTaskBatch1ClickI.Query, nParams);
                XID1Click oD1Click = new XID1Click();
                //oD1Click.Query = TaskBatchQuery;
                //oD1Click.Name = "TaskBatchTemplate_T";
                //var oresult = oD1Click.OneClick_Execute().FirstOrDefault();
                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> oSQLParams = new List<SqlParameter>();
                if (iPolicyID > 0)
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiACPolicyID", sOperator = "=", sValue = iID });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiACPolicyID", Value = iID });
                    oWParams.Add(new XIWhereParams { sField = "FKiPolicyVersionID", sOperator = "=", sValue = sACPolicyVersionID });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiPolicyVersionID", Value = sACPolicyVersionID });
                    oWParams.Add(new XIWhereParams { sField = "iDiaryType", sOperator = "=", sValue = "20" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@iDiaryType", Value = "20" });
                    oQE.AddBO("ERP_Task", null, oWParams);
                    CResult oresult = oQE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oresult.bOK && oresult.oResult != null)
                    {
                        var sSql = (string)oresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = oSQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            if (oBOIList.Count() > 0)
                            {
                                XIDXI oTXI = new XIDXI();
                                var BOD = (XIDBO)oTXI.Get_BODefinition("ERP_Task").oResult;
                                foreach (var oBOInstance in oBOIList)
                                {
                                    oBOInstance.BOD = BOD;
                                    oBOInstance.SetAttribute(XIConstant.Key_XIDeleted, "1");
                                    oBOInstance.SetAttribute("id", oBOInstance.AttributeI("id").sValue);
                                    var res = oBOInstance.Save(oBOInstance);
                                    if (!res.bOK && res.oResult == null)
                                    {
                                        oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update of " + XIConstant.Key_XIDeleted + "  (In Active) for Dairy failed for id =: " + oBOInstance.AttributeI("id").ToString();
                                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                        oCResult.LogToFile();
                                        oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update of " + XIConstant.Key_XIDeleted + " (In Active) for Dairy failed for id =: " + oBOInstance.AttributeI("id").ToString();
                                    }

                                }
                            }
                        }
                    }
                }

                oQE = new QueryEngine();
                oWParams = new List<XIWhereParams>();
                oSQLParams = new List<SqlParameter>();
                oWParams.Add(new XIWhereParams { sField = "FKiBatchTemplateID", sOperator = "=", sValue = iTaskBatchTempalteID });
                oSQLParams.Add(new SqlParameter { ParameterName = "@FKiBatchTemplateID", Value = iTaskBatchTempalteID });
                oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                oQE.AddBO("ERP_Task", null, oWParams);
                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO definition added successfully to the QueryEngine" });
                CResult oCresult = oQE.BuildQuery();
                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                if (oCresult.bOK && oCresult.oResult != null)
                {
                    var sSql = (string)oCresult.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql;
                    oEE.SqlParams = oSQLParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                        var TaskResult = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                        TaskResult.ForEach(x => x.BOD = oBOD);
                        foreach (var task in TaskResult)
                        {
                            if (task.Attributes.ContainsKey("FKiACPolicyID"))
                            {
                                task.Attributes["FKiACPolicyID"].sValue = iID.ToString();
                            }
                            if (task.Attributes.ContainsKey("FKiBatchTemplateID"))
                            {
                                task.Attributes["FKiBatchTemplateID"].sValue = null;
                            }
                            if (task.Attributes.ContainsKey("dStart"))
                            {
                                task.Attributes["dStart"].sValue = sPolicyStartDate;
                            }
                            if (task.Attributes.ContainsKey("FKiPolicyVersionID"))
                            {
                                task.Attributes["FKiPolicyVersionID"].sValue = sACPolicyVersionID;
                            }
                            if (task.Attributes.ContainsKey("iDuration"))
                            {
                                sDueInDays = task.Attributes["iDuration"].sValue;
                            }
                            if (task.Attributes.ContainsKey("FKsPolicyNo"))
                            {
                                task.Attributes["FKsPolicyNo"].sValue = sPolicyNumber;
                            }
                            if (task.Attributes.ContainsKey("FKiCustomerID"))
                            {
                                task.Attributes["FKiCustomerID"].sValue = sCustomerID;
                            }
                            if (task.Attributes.ContainsKey("iTransactionType"))
                            {
                                task.Attributes["iTransactionType"].sValue = "0";
                            }
                            if (task.Attributes.ContainsKey("FKsClientReferenceNumber"))
                            {
                                task.Attributes["FKsClientReferenceNumber"].sValue = sClientReference;
                            }
                            if (task.Attributes.ContainsKey("iDiaryType"))
                            {
                                task.Attributes["iDiaryType"].sValue = "20";
                            }
                            int iDueInDays = 0;
                            if (int.TryParse(sDueInDays, out iDueInDays))
                            {
                                var sDueDate = Convert.ToDateTime(sPolicyStartDate).AddDays(iDueInDays).ToString("yyyy-MM-dd");
                                if (task.Attributes.ContainsKey("dDue"))
                                {
                                    task.Attributes["dDue"].sValue = sDueDate;
                                }
                                if (task.Attributes.ContainsKey("dEnd"))
                                {
                                    task.Attributes["dEnd"].sValue = sDueDate;
                                }
                            }
                            int sPrimaryKeyValue = Convert.ToInt32(task.Attributes.Where(n => n.Key.ToLower().Equals(task.BOD.sPrimaryKey.ToLower())).Select(s => s.Value).FirstOrDefault().sValue);
                            if (sPrimaryKeyValue != 0)
                            {
                                task.Attributes.Where(n => n.Key.ToLower().Equals(task.BOD.sPrimaryKey.ToLower())).Select(m => m.Value).ToList().ForEach(m => { m.sValue = null; });//set primary column to null
                                task.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                            }
                            string sFunction = task.Attributes["sFunction"].sValue;
                            if (!string.IsNullOrEmpty(sFunction))
                            {
                                List<CNV> oNVList = new List<CNV>();
                                oNVList.Add(new CNV { sName = "-instanceid", sValue = iQSIID });
                                oNVList.Add(new CNV { sName = "-Quoteid", sValue = QuoteID });
                                oCache.SetXIParams(oNVList, sGUID, sSessionID);
                                XIDScript oXIScript = new XIDScript();
                                oXIScript.sScript = sFunction.ToString();
                                oCR = oXIScript.Execute_Script(sGUID, sSessionID);
                                if (oCR.bOK && oCR.oResult != null)
                                {
                                    string sValue = (string)oCR.oResult;
                                    if (sValue == "true")
                                    {
                                        var oTaskResult = oBO.Save(task, false);
                                        if (oTaskResult.bOK && oTaskResult.oResult != null)
                                        {
                                            var oTaskI = (XIIBO)oTaskResult.oResult;
                                            List<CNV> oCallParams = new List<CNV>();
                                            oCallParams.Add(new CNV { sName = "sGUID", sValue = sGUID });
                                            oCallParams.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                            oCallParams.Add(new CNV { sName = "sBOGroupName", sValue = "AutoCreate" });
                                            oCallParams.Add(new CNV { sName = "sBO", sValue = "ERP_Task" });
                                            oCallParams.Add(new CNV { sName = "iInstanceID", sValue = oTaskI.Attributes[oBOD.sPrimaryKey].sValue });
                                            InsertCall(oCallParams);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                var oTaskResult = oBO.Save(task, false);
                                if (oTaskResult.bOK && oTaskResult.oResult != null)
                                {
                                    var oTaskI = (XIIBO)oTaskResult.oResult;
                                    List<CNV> oCallParams = new List<CNV>();
                                    oCallParams.Add(new CNV { sName = "sGUID", sValue = sGUID });
                                    oCallParams.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                    oCallParams.Add(new CNV { sName = "sBOGroupName", sValue = "AutoCreate" });
                                    oCallParams.Add(new CNV { sName = "sBO", sValue = "ERP_Task" });
                                    oCallParams.Add(new CNV { sName = "iInstanceID", sValue = oTaskI.Attributes[oBOD.sPrimaryKey].sValue });
                                    InsertCall(oCallParams);
                                }
                            }
                        }
                    }
                    UpdatePolicyVersion(iPolicyVersionID, "bIsDiariesGenerated", "true");
                    oCResult.oTraceStack.Add(new CNV { sName = "Dairies", sValue = "Dairy Inserted Successfully" });
                }
                oCResult.oTraceStack.Add(new CNV { sName = "Dairies", sValue = "Insert Dairy method returned" });
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oTraceStack.Add(new CNV { sName = "Dairies", sValue = "Error : Insert Dairy_" + oCResult.sMessage });
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult;
        }

        public CResult InsertTermsToQS(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                if (int.TryParse(iID, out iQSInstanceID))
                { }
                var oQuoteI = oIXI.BOI("Aggregations", iQuoteID);
                if (oQuoteI.Attributes != null)
                {
                    var iProductVersionID = oQuoteI.Attributes["FKiProductVersionID"].sValue;
                    var oProductVersionI = oIXI.BOI("ProductVersion_T", iProductVersionID);
                    string iProductID = oProductVersionI.Attributes["FKiProductID"].sValue;
                    //string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    XIInfraCache oCache = new XIInfraCache();
                    QueryEngine oQE = new QueryEngine();
                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                    List<SqlParameter> oSQLParams = new List<SqlParameter>();
                    XIIXI oXII = new XIIXI();
                    oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iID });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iID });
                    oQE.AddBO("Term_T", "", oWParams);
                    CResult oCresult1 = oQE.BuildQuery();
                    if (oCresult1.bOK && oCresult1.oResult != null)
                    {
                        var sSql1 = (string)oCresult1.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE.XIDataSource;
                        oEE.sSQL = sSql1;
                        oEE.SqlParams = oSQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                            oBOIList1.ForEach(x => x.BOD = oBOD1);
                            if (oBOIList1 != null && oBOIList1.Count > 0)
                            {
                                foreach (var oBOI in oBOIList1)
                                {
                                    XIIBO oBO = new XIIBO();
                                    oBO.Delete(oBOI);
                                }
                            }
                            oWParams = new List<XIWhereParams>();
                            oSQLParams = new List<SqlParameter>();
                            oWParams.Add(new XIWhereParams { sField = "FKiProductID", sOperator = "=", sValue = iProductID });
                            oSQLParams.Add(new SqlParameter { ParameterName = "@FKiProductID", Value = iProductID });
                            oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                            oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                            oQE.AddBO("Term_T", "Create", oWParams);
                            CResult oCresult = oQE.BuildQuery();
                            if (oCresult.bOK && oCresult.oResult != null)
                            {
                                var sSql = (string)oCresult.oResult;
                                //ExecutionEngine oEE = new ExecutionEngine();
                                oEE.XIDataSource = oQE.XIDataSource;
                                oEE.sSQL = sSql;
                                oEE.SqlParams = oSQLParams;
                                oQResult = oEE.Execute();
                                if (oQResult.bOK && oQResult.oResult != null)
                                {
                                    var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                    var oBOD = oQE.QParams.FirstOrDefault().BOD;
                                    oBOIList.ForEach(x => x.BOD = oBOD);
                                    foreach (var instance in oBOIList)
                                    {
                                        XIIBO oBO = new XIIBO();
                                        if (instance.Attributes.ContainsKey("sFunction"))
                                        {
                                            if (instance.Attributes.ContainsKey("FKiQsInstanceID"))
                                            {
                                                instance.Attributes["FKiQsInstanceID"].sValue = iID;
                                            }
                                            if (instance.Attributes.ContainsKey("FKiProductID"))
                                            {
                                                instance.Attributes["FKiProductID"].sValue = null;
                                            }
                                            int sPrimaryKeyValue = Convert.ToInt32(instance.Attributes.Where(n => n.Key.ToLower().Equals(instance.BOD.sPrimaryKey.ToLower())).Select(s => s.Value).FirstOrDefault().sValue);
                                            if (sPrimaryKeyValue != 0)
                                            {
                                                instance.Attributes.Where(n => n.Key.ToLower().Equals(instance.BOD.sPrimaryKey.ToLower())).Select(m => m.Value).ToList().ForEach(m => { m.sValue = null; });//set primary column to null
                                                instance.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                                            }
                                            string sFunction = instance.Attributes["sFunction"].sValue;
                                            List<CNV> oNVList = new List<CNV>();
                                            oNVList.Add(new CNV { sName = "-instanceid", sValue = iID });
                                            oCache.SetXIParams(oNVList, sGUID, sSessionID);
                                            XIBOInstance oBOIns = new XIBOInstance();
                                            oBOIns.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                                            oBOIns.oStructureInstance[oBOD.Name.ToLower()] = oBOIList;
                                            if (!string.IsNullOrEmpty(sFunction))
                                            {
                                                XIDScript oXIScript = new XIDScript();
                                                oXIScript.sScript = sFunction.ToString();
                                                oCR = oXIScript.Execute_Script(sGUID, sSessionID);
                                                string sValue = string.Empty;
                                                if (oCR.bOK && oCR.oResult != null)
                                                {
                                                    sValue = (string)oCR.oResult;
                                                    if (sValue.Contains("xi.s"))
                                                    {
                                                        CResult oCRes = new CResult();
                                                        string sSubsScript = sValue;
                                                        XIDScript oXIDScripts = new XIDScript();
                                                        oXIDScripts.sScript = sValue.ToString();
                                                        oCRes = oXIDScripts.Execute_Script(sGUID, sSessionID);
                                                        if (oCRes.bOK && oCRes.oResult != null)
                                                        {
                                                            sValue = (string)oCRes.oResult;
                                                            if (sValue == "true")
                                                            {
                                                                string sContent = string.Empty;
                                                                if (instance.Attributes.ContainsKey("sTerms"))
                                                                {
                                                                    string sMergeContent = string.Empty;
                                                                    sContent = instance.AttributeI("sTerms").sValue;
                                                                    XIContentEditors oContentEditor = new XIContentEditors();
                                                                    oContentEditor.Content = sContent;
                                                                    oContentEditor.sGUID = sGUID;
                                                                    oContentEditor.sSessionID = sSessionID;
                                                                    var oMergeContent = oContentEditor.MergeContentTemplate(oContentEditor, oBOIns);
                                                                    if (oMergeContent.bOK && oMergeContent.oResult != null)
                                                                    {
                                                                        sMergeContent = (string)oMergeContent.oResult;
                                                                    }
                                                                    instance.SetAttribute("sTerms", sMergeContent);
                                                                }
                                                                var oTerms = oBO.Save(instance, false);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (sValue == "true")
                                                        {
                                                            string sContent = string.Empty;
                                                            if (instance.Attributes.ContainsKey("sTerms"))
                                                            {
                                                                string sMergeContent = string.Empty;
                                                                sContent = instance.AttributeI("sTerms").sValue;
                                                                XIContentEditors oContentEditor = new XIContentEditors();
                                                                oContentEditor.Content = sContent;
                                                                oContentEditor.sGUID = sGUID;
                                                                oContentEditor.sSessionID = sSessionID;
                                                                var oMergeContent = oContentEditor.MergeContentTemplate(oContentEditor, oBOIns);
                                                                if (oMergeContent.bOK && oMergeContent.oResult != null)
                                                                {
                                                                    sMergeContent = (string)oMergeContent.oResult;
                                                                }
                                                                instance.SetAttribute("sTerms", sMergeContent);
                                                            }
                                                            var oTerms = oBO.Save(instance, false);
                                                        }
                                                    }
                                                }

                                                //if (oCR.bOK && oCR.oResult != null)
                                                //{
                                                //    string sValue = (string)oCR.oResult;
                                                //    if (sValue == "true")
                                                //    {
                                                //        var oTerms = oBO.Save(instance, false);
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                string sContent = string.Empty;
                                                if (instance.Attributes.ContainsKey("sTerms"))
                                                {
                                                    string sMergeContent = string.Empty;
                                                    sContent = instance.AttributeI("sTerms").sValue;
                                                    XIContentEditors oContentEditor = new XIContentEditors();
                                                    oContentEditor.Content = sContent;
                                                    oContentEditor.sGUID = sGUID;
                                                    oContentEditor.sSessionID = sSessionID;
                                                    var oMergeContent = oContentEditor.MergeContentTemplate(oContentEditor, oBOIns);
                                                    if (oMergeContent.bOK && oMergeContent.oResult != null)
                                                    {
                                                        sMergeContent = (string)oMergeContent.oResult;
                                                    }
                                                    instance.SetAttribute("sTerms", sMergeContent);
                                                }
                                                var oTerms = oBO.Save(instance, false);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public CResult InsertUser(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                XIInfraUsers oUserD = new XIInfraUsers();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sOrgDataBase = oParams.Where(m => m.sName.ToLower() == "sOrgDatabase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTemplate = oParams.Where(m => m.sName.ToLower() == "WelcomeTemplateID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIInfraEmail oEmail = new XIInfraEmail();
                XID1Click oD1Click = new XID1Click();
                if (int.TryParse(iID, out iInstanceID))
                {
                    XIIXI oXII = new XIIXI();
                    int iQSDID = 0;
                    string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                    if (int.TryParse(sQSDID, out iQSDID)) { }
                    string sLeadID = oCache.Get_ParamVal(sSessionID, sGUID, null, "-iLeadInstanceID");
                    int iLeadID = 0;
                    int.TryParse(sLeadID, out iLeadID);
                    //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(iQSDID, iInstanceID, null, 0, 0, null);
                    XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    oQSI.ID = iInstanceID;
                    var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                    if (oQSDefinition != null)
                    {
                        oQSI.QSDefinition = oQSDefinition;
                    }
                    //Getting structure Instance
                    // XIIQS oQSI = oQS.QSI(oXII.BOI("QS Instance", iInstanceID.ToString()).Structure("NotationStructure").XILoad());
                    //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iInstanceID);
                    //XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID);

                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    string FirstName = oQSI.XIIValues("sFirstName");
                    string sEmail = oQSI.XIIValues("sEmail");
                    string LastName = oQSI.XIIValues("sLastName");
                    string sMob = oQSI.XIIValues("sMob");
                    string sPassWord = oQSI.XIIValues("sNewPassword");
                    //oUserD.sUserName = sEmail;
                    //oCResult.sMessage = "User Loading started";
                    //oXID.SaveErrortoDB(oCResult);
                    //var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    //if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    //{
                    //    oUserD = (XIInfraUsers)UserDetails.oResult;
                    //    oCResult.sMessage = "User already exist";
                    //    oXID.SaveErrortoDB(oCResult);
                    //}
                    //else
                    //{
                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + " ] - New User Insertion Started";
                    oXID.SaveErrortoDB(oCResult);
                    oUserD.sUserName = sEmail;
                    oUserD.sEmail = sEmail;
                    oUserD.sFirstName = FirstName;
                    oUserD.sLastName = LastName;
                    oUserD.FKiOrgID = oQSI.QSDefinition.FKiOrgID;
                    oUserD.FKiApplicationID = oQSI.QSDefinition.FKiApplicationID;
                    XIInfraUsers oUser = new XIInfraUsers();
                    oUser.FKiOrgID = oQSI.QSDefinition.FKiOrgID;
                    oUser.sUserName = sEmail;
                    var oUSerI = oUser.Get_UserDetails(sDataBase);
                    string sDataBaseName = string.Empty;
                    if (oUSerI.xiStatus == 0 && oUSerI.oResult != null)
                    {
                        var oUserI = (XIInfraUsers)oUSerI.oResult;
                        sDataBaseName = oUserI.sDatabaseName;
                    }
                    oUserD.sDatabaseName = sOrgDataBase;
                    oUserD.sCoreDatabaseName = sDataBase;
                    oUserD.sPhoneNumber = sMob;
                    oUserD.iReportTo = 0;
                    oUserD.LockoutEndDateUtc = DateTime.Now;
                    oUserD.sLocation = "";
                    oUserD.iPaginationCount = 10;
                    oUserD.sMenu = "Open,Open";
                    oUserD.iInboxRefreshTime = 0;
                    oUserD.CreatedTime = DateTime.Now;
                    oUserD.UpdatedTime = DateTime.Now;
                    var oUserData = oUserD.Save_User(sDataBase);
                    if (oUserData.xiStatus == 0 && oUserData.oResult != null)
                    {
                        oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - User created sucessfully";
                        oXID.SaveErrortoDB(oCResult);
                        oUserD = (XIInfraUsers)oUserData.oResult;
                        //bool IsSendMail = true;
                        string sContext = XIConstant.Email_Welcome_Online;
                        if (string.IsNullOrEmpty(sPassWord))
                        {
                            sContext = XIConstant.Email_Welcome_Internal;
                            sPassWord = RandomNumber(8);
                            //IsSendMail = false;
                        }
                        //string sTemporaryPWD = RandomString(8);
                        var EncryptedPwd = xifEncrypt.EncryptData(sPassWord, true, oUserD.UserID.ToString());
                        oUserD.sPasswordHash = EncryptedPwd;
                        oUserD.sTemporaryPasswordHash = EncryptedPwd;
                        oUserData = oUserD.Update_User(sDataBase);
                        if (oUserData.xiStatus == 0 && oUserData.oResult != null)
                        {
                            oUserD = (XIInfraUsers)oUserData.oResult;
                            if (oUserD.UserID > 0)
                            {
                                XIInfraRoles xifRole = new XIInfraRoles();
                                xifRole.sRoleName = "WebUsers";
                                var oUserRoleData = xifRole.Get_RoleDefinition(sDataBase);
                                if (oUserRoleData.xiStatus == 0 && oUserRoleData.oResult != null)
                                {
                                    var Role = (XIInfraRoles)oUserRoleData.oResult;
                                    int RoleID = Role.RoleID;
                                    XIInfraUserRoles xifUserRole = new XIInfraUserRoles();
                                    xifUserRole.UserID = oUserD.UserID;
                                    xifUserRole.RoleID = RoleID;
                                    xifUserRole.Save_UserRole(sDataBase);
                                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - User Role Saved sucessfully";
                                    oXID.SaveErrortoDB(oCResult);
                                }
                                XIInfraActors xifActor = new XIInfraActors();
                                xifActor.sName = "Web user";
                                var oUserActorData = xifActor.Get_ActorDefinition(sDataBase);
                                if (oUserActorData.xiStatus == 0 && oUserActorData.oResult != null)
                                {
                                    var Actor = (XIInfraActors)oUserActorData.oResult;
                                    int ActorID = Actor.ID;
                                    XIInfraActorsMapping XifActorMapping = new XIInfraActorsMapping();
                                    XifActorMapping.FKiUserID = oUserD.UserID;
                                    XifActorMapping.FKiActorID = ActorID;
                                    XifActorMapping.iInstanceID = oUserD.UserID;
                                    XifActorMapping.Save_UserActor(sDataBase);
                                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - User Actor Saved sucessfully";
                                    oXID.SaveErrortoDB(oCResult);
                                }
                                var DecryptedPwd = xifEncrypt.DecryptData(oUserD.sPasswordHash, true, oUserD.UserID.ToString());
                                XIContentEditors oDocumentContent = new XIContentEditors();
                                oEmail.sCoreDataBase = sDataBase;
                                oEmail.sOrgDatabase = oUserD.sDatabaseName;
                                XIDXI oXIDXI = new XIDXI();
                                //var oContentDef = oXIDXI.Get_ContentDefinition(8);
                                int iTemplateID = 8;
                                if (!string.IsNullOrEmpty(sTemplate))
                                {
                                    int.TryParse(sTemplate, out iTemplateID);
                                }
                                var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, iTemplateID.ToString());
                                if (oContentDef != null && oContentDef.Count() > 0)
                                {
                                    XIIBO oBOI = new XIIBO();
                                    XIInfraCache oCache = new XIInfraCache();
                                    string sBOName = "XIAPPUsers";
                                    if (sBOName != null)
                                    {
                                        oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName, null);
                                    }
                                    XIBOInstance oBOIInstance = new XIBOInstance();
                                    oBOIInstance.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                                    oBOI.SetAttribute("sUserName", FirstName + " " + LastName);
                                    oBOI.SetAttribute("sEmail", sEmail);
                                    oBOI.SetAttribute("sPasswordHash", DecryptedPwd);
                                    List<XIIBO> oBOIList = new List<XIIBO>();
                                    //oBOI.Attributes = oBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => x.Value);
                                    oBOI.XIIValues = oBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => new XIIValue { sValue = x.Value.sValue });
                                    oBOIList.Add(oBOI);
                                    oBOIInstance.oStructureInstance["User"] = oBOIList;
                                    oDocumentContent = oContentDef.FirstOrDefault();
                                    //Get Document Template htmlcontent with dynamic data
                                    XIContentEditors oConent = new XIContentEditors();
                                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Template Merging Started";
                                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                                    oConent.sSessionID = "";
                                    //var oRes = oConent.MergeTemplateContent(oDocumentContent, oBOIInstance);
                                    var oRes = oConent.MergeContentTemplate(oDocumentContent, oBOIInstance);
                                    if (!oRes.bOK)
                                    {
                                        return null;
                                    }
                                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Template Merged Sucessfully";
                                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                                    string sContent = (string)oRes.oResult;
                                    oEmail.EmailID = sEmail;
                                    oEmail.sSubject = oDocumentContent.sSubject;
                                    //if (IsSendMail)
                                    //{
                                    oEmail.Bcc = oDocumentContent.sBCC;
                                    oEmail.cc = oDocumentContent.sCC;
                                    oEmail.From = oDocumentContent.sFrom;
                                    oEmail.iServerID = oDocumentContent.FkiServerID;
                                    oEmail.Sendmail(oQSI.QSDefinition.FKiOrgID, sContent, null, 0, sContext, iLeadID, null, 0, oDocumentContent.bIsBCCOnly);//send mail with attachment
                                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Mail send successfully";
                                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                                    oCResult.oTraceStack.Add(new CNV { sName = "Mail send successfully", sValue = "Mail send successfully" });
                                    //}
                                    //sending notification

                                    //string sNotificationTemplateID = "154";
                                    string sNotificationTemplateName = "Account Created";
                                    if (!string.IsNullOrEmpty(sNotificationTemplateName))
                                    {
                                        var oNotificationContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sNotificationTemplateName, "0");
                                        if (oNotificationContentDef != null && oNotificationContentDef.Count() > 0)
                                        {
                                            var oNotificationContent = oNotificationContentDef.FirstOrDefault();
                                            oCResult.oTraceStack.Add(new CNV { sName = "Notification Template Merging started", sValue = "Notification Template Merging started,TemplateName:" + sNotificationTemplateName + "" });
                                            var oNotificationRes = oConent.MergeContentTemplate(oNotificationContent, oBOIInstance);
                                            oCResult.oTraceStack.Add(new CNV { sName = "Notification Template Merging Completed", sValue = "Notification Template Merging Completed,TemplateName:" + sNotificationTemplateName + "" });

                                            if (oNotificationRes.bOK && oNotificationRes.oResult != null)
                                            {
                                                var sResult = (string)oNotificationRes.oResult;
                                                string sOrgId = Convert.ToString(oUserD.FKiOrgID);
                                                XIInfraNotifications oNotifications = new XIInfraNotifications();
                                                //oNotifications.sSubject = oNotificationContent.sSubject;
                                                //oNotifications.sInstanceID = Convert.ToString(iInstanceID);
                                                //oNotifications.sMessage = (string)oNotificationRes.oResult;
                                                //oNotifications.sOrgName = sOrgName;
                                                //oNotifications.iOrgID = oUserD.FKiOrgID;
                                                oNotifications.iStatus = 20;
                                                oNotifications.Create(Convert.ToString(oUserD.UserID), oNotificationContent.Name, "", oNotificationContent.sSubject, sResult, iInstanceID.ToString(), sOrgId);
                                                oCResult.oTraceStack.Add(new CNV { sName = "Notification Saving", sValue = "Notification Inserted Successfully" });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //}
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oResult = oUserD;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }

        private static Random random = new Random();
        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }
        public static string RandomNumber(int length)
        {
            const string chars = "0123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }
        public CResult ExeScript(List<CNV> oParams, List<CNV> SessionItems = null)
        {
            CResult oCResult = new CResult();
            CResult oCResultTry = new CResult();
            List<string> Info = new List<string>();
            Info.Add("ExecuteScript Method Started");
            string workingDirectory = System.Web.Hosting.HostingEnvironment.MapPath("~");
            workingDirectory = workingDirectory.TrimEnd('\\');
            string logfile = workingDirectory + "\\UploadedFiles\\excelLog.txt"; 


            string iID = "";
            int iInstanceID = 0;
            Guid QSIGUID = Guid.Empty;
            try
            {
                CResult oresult = new CResult();
                XIInfraCache oCache = new XIInfraCache();
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sCustomerStartRef = oParams.Where(m => m.sName.ToLower() == "sCustomerStartReference".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sRoleName = oParams.Where(m => m.sName.ToLower() == "srolename".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sProductVesrionID = oParams.Where(m => m.sName.ToLower() == "FKiProductVesrionid".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iCustomerID = 0;
                Info.Add("QSInstanceID: " + iID);
                oCResultTry.sMessage = "INFO: ExeScript() execution started.";
                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCResultTry);

                XID1Click oD1Click = new XID1Click();
                var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
                int.TryParse(iID, out iInstanceID);
                Guid.TryParse(iID, out QSIGUID);
                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    XIIXI oXII = new XIIXI();
                    XIIBO SourceI = new XIIBO();
                    Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                    XIBOBuilding oBOBuilding = new XIBOBuilding();
                    XIIQS oQS = new XIIQS();
                    int iQSDID = 0;
                    Guid QSDGUID = Guid.Empty;
                    string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                    if (int.TryParse(sQSDID, out iQSDID)) { }
                    Guid.TryParse(sQSDID, out QSDGUID);
                    var QSDParam = oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    if (QSDGUID == null || QSDGUID == Guid.Empty)
                    {
                        Guid.TryParse(QSDParam, out QSDGUID);
                    }
                    else if (iQSDID == 0)
                    {
                        int.TryParse(QSDParam, out iQSDID);
                    }

                    //iQSDID = iQSDID == 0 ? Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault()) : iQSDID;
                    //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(iQSDID, iInstanceID, null, 0, 0, null);
                    XIIQS oQSI = new XIIQS();
                    if (QSIGUID != null && QSIGUID != Guid.Empty)
                    {
                        oQSI = oXII.GetQSXIValuesByQSIID(QSIGUID.ToString());
                        iInstanceID = oQSI.ID;
                    }
                    else if (iInstanceID > 0)
                    {
                        oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    }
                    var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, QSDGUID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                    if (oQSDefinition != null)
                    {
                        oQSI.QSDefinition = oQSDefinition;
                    }
                    //Getting structure Instance
                    //XIIQS oQSI = oQS.QSI(oXII.BOI("QS Instance", iInstanceID.ToString()).Structure("NotationStructure").XILoad());
                    //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iInstanceID);
                    //XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID);
                    //var oQSDI = oBOBuilding.GetQSNVPairs(oQSI);
                    foreach (var xiValue in oQSI.XIValues)
                    {
                        if (!OQSD.ContainsKey(xiValue.Key))
                        {
                            OQSD.Add(xiValue.Key, new CNV { sName = xiValue.Key, sValue = xiValue.Value.sValue });
                        }
                    }
                    string IsWithoutOTP = oQSI.XIIValues("bIsWithoutOTP");
                    var TransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                    var dtOldcoverStart = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|doldcoverstart}");
                    var roldGrossPremium = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|roldGrossPremium}");
                    var ProductVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}");
                    if (oQSI.XIValues != null && oQSI.XIValues.Count() > 0)
                    {
                        var sValues = oQSI.XIValues.Values.ToList().Select(m => m.sValue).ToList();
                        var sNames = oQSI.XIValues.Keys.ToList();
                        if (sNames != null && sNames.Count() > 0)
                        {
                            var sAllNames = string.Join(",", sNames);
                            //Info.Add("AllNames" + sAllNames);
                            //oCResult.sMessage = "AllNames" + sAllNames;
                            //oXID.SaveErrortoDB(oCResult);
                        }
                        if (sValues != null && sValues.Count() > 0)
                        {
                            var sALLValues = string.Join(",", sValues);
                            //Info.Add("ALLValues" + sALLValues);
                            //oCResult.sMessage = "ALLValues" + sALLValues;
                            //oXID.SaveErrortoDB(oCResult);
                        }
                    }
                    SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                    //User Creation
                    XIInfraUsers oUserD = new XIInfraUsers();
                    //if (TransactionType != "MTA")
                    //{
                    var ClientID = "0";
                    XIIBO oCustomerI = null;
                    /* Customer_T Not using for Now */
                    //var ClientID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|Customer_T.id}");
                    int iNewUserID = 0;
                    //int iUserID = 0;
                    //XIIBO oCustomerI = new XIIBO();
                    //if (string.IsNullOrEmpty(ClientID))
                    //{
                    //    oUserD.sUserName = oQSI.XIIValues("sEmail");
                    //    if (oUserD.sUserName == "")
                    //    {
                    //        string sFunction = "xi.s|{xi.a|'XIConfig_T','ConfigEmail','sValue','','sName'}";
                    //        CResult oCR = new CResult();
                    //        XIDScript oXIScript = new XIDScript();
                    //        oXIScript.sScript = sFunction.ToString();
                    //        oCR = oXIScript.Execute_Script("", "");
                    //        if (oCR.bOK && oCR.oResult != null)
                    //        {
                    //            oUserD.sUserName = oCR.oResult.ToString(); //Get_TaxRateIPT();  // hard coded value
                    //        }
                    //    }
                    //}
                    //else
                    //{
                    //    oCustomerI = oXII.BOI("Customer_T", ClientID, "");
                    //    if (oCustomerI != null && oCustomerI.Attributes.Count > 0)
                    //    {
                    //        var UserID = oCustomerI.Attributes["FkiUserID"].sValue;
                    //        int.TryParse(UserID, out iUserID);
                    //        if (iUserID > 0)
                    //        {
                    //            int.TryParse(UserID, out iUserID);
                    //            if (iUserID > 0)
                    //            {
                    //                oUserD.UserID = iUserID;
                    //            }
                    //            else
                    //            {
                                   iNewUserID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                                   oUserD.UserID = iNewUserID;
                    //            }
                    //            iCustomerID = Convert.ToInt32(ClientID);
                    //        }
                    //    }
                    //}
                    //}
                    //else
                    //{
                    //var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                    //var oPolicyI = oXII.BOI("ACPolicy_T", PolicyID);
                    //if (oPolicyI != null && oPolicyI.Attributes.ContainsKey("fkiUserID"))
                    //{
                    //    if (int.TryParse(oPolicyI.Attributes["fkiUserID"].sValue, out iUserID))
                    //    {
                    //    }
                    //}
                    //oUserD.UserID = iUserID;
                    //}

                    ////Web User logic need to verify with org specific
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null || (!string.IsNullOrEmpty(ClientID) && UserDetails.oResult == null))
                    {
                        int QuoteID = 0;
                        string dtInsuranceCoverStartDate = oQSI.XIIValues("dCoverStart");//"10/30/2018";
                        if (string.IsNullOrEmpty(dtInsuranceCoverStartDate))
                        {
                            dtInsuranceCoverStartDate = oQSI.XIIValues("MTEffctiveFrom");
                        }
                        List<XIWhereParams> oWParams = new List<XIWhereParams>();
                        if (UserDetails.xiStatus == 0 && UserDetails.oResult == null)
                        {
                            List<CNV> oCustomerContactNV = new List<CNV>();
                            oCustomerContactNV.Add(new CNV { sName = "FKiCustomerID", sValue = ClientID.ToString() });
                            oCustomerContactNV.Add(new CNV { sName = "bIsDefault", sValue = "1" });
                            var oCustomerContactI = oXII.BOI("CustomerContact", "", "", oCustomerContactNV);
                            if (oCustomerContactI != null)
                            {
                                XIIBO oUserBOI = new XIIBO();
                                var oUserBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XIAPPUsers_AU_T", null);
                                oUserBOI.BOD = oUserBOD;
                                oUserBOI.SetAttribute("IsUserExist", "false");
                                oUserBOI.SetAttribute("sUserName", oCustomerContactI.AttributeI("sEmail").sValue);
                                oUserBOI.SetAttribute("sEmail", oCustomerContactI.AttributeI("sEmail").sValue);
                                oUserBOI.SetAttribute("sFirstName", oCustomerContactI.AttributeI("sFirstName").sValue);
                                oUserBOI.SetAttribute("sLastName", oCustomerContactI.AttributeI("sLastName").sValue);
                                oUserBOI.SetAttribute("FKiOrgID", oQSDefinition.FKiOrgID.ToString());
                                oUserBOI.SetAttribute("FKiApplicationID", oQSDefinition.FKiApplicationID.ToString());
                                oUserBOI.SetAttribute("sDatabaseName", System.Configuration.ConfigurationManager.AppSettings["SharedDataBase"]);
                                oUserBOI.SetAttribute("sCoreDatabaseName", sDataBase);
                                oUserBOI.SetAttribute("sPhoneNumber", oCustomerContactI.AttributeI("sMobile").sValue);
                                oUserBOI.SetAttribute("iReportTo", "0");
                                oUserBOI.SetAttribute("LockoutEndDateUtc", DateTime.Now.ToString());
                                oUserBOI.SetAttribute("sLocation", "Test");
                                oUserBOI.SetAttribute("iPaginationCount", "10");
                                oUserBOI.SetAttribute("sMenu", "Open, Open");
                                oUserBOI.SetAttribute("iInboxRefreshTime", "0");
                                oUserBOI = (XIIBO)oUserBOI.Save(oUserBOI).oResult;
                                //string sTemporaryPWD = RandomString(8)
                                //CXIAPI oCXIAPI = new CXIAPI();
                                //var EncryptedPwd = oCXIAPI.EncryptData(sTemporaryPWD, true, oUserBOI.AttributeI("UserID").sValue.ToString());
                                //oUser = dbContext.XIAppUsers.Find(oUser.UserID);
                                //oUser.sPasswordHash = EncryptedPwd;
                                //dbContext.SaveChanges();

                                if (!string.IsNullOrEmpty(oUserBOI.AttributeI("xiguid").sValue))
                                {
                                    List<CNV> oUserNV = new List<CNV>();
                                    oUserNV.Add(new CNV { sName = "xiguid", sValue = oUserBOI.AttributeI("xiguid").sValue });
                                    oUserBOI = oXII.BOI("XIAPPUsers_AU_T", oUserBOI.AttributeI("xiguid").sValue);

                                    XIIBO oURole = new XIIBO();
                                    var oUserRoleBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XIAppUserRoles_AUR_T", null);
                                    oURole.BOD = oUserRoleBOD;
                                    List<CNV> oUserRoleNV = new List<CNV>();
                                    oUserRoleNV.Add(new CNV { sName = "sRoleName", sValue = "WebUsers" });
                                    var oUserRoleI = oXII.BOI("XIAppRoles_AR_T", "", "", oUserRoleNV);
                                    oURole.BOD = oUserRoleBOD;
                                    oURole.SetAttribute("UserID", oUserBOI.AttributeI("UserID").sValue);
                                    oURole.SetAttribute("RoleID", oUserRoleI.AttributeI("RoleID").sValue);
                                    oURole = (XIIBO)oURole.Save(oURole).oResult;
                                }
                                if (oCustomerI != null)
                                {
                                    oCustomerI.SetAttribute("FkiUserID", oUserBOI.AttributeI("UserID".ToLower()).sValue);
                                    oCustomerI.Save(oCustomerI);
                                    oUserD.UserID = Convert.ToInt32(oUserBOI.AttributeI("UserID").sValue);
                                }
                            }
                            UserDetails = oUserD.Get_UserDetails(sDataBase); ;
                        }
                        if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                        {
                            Info.Add("Checked User Exists or not and User exists");
                            oUserD = (XIInfraUsers)UserDetails.oResult;
                            //var oUserD = (XIInfraUsers)oUser.oResult;
                            CNV oNVUser = new CNV();
                            oNVUser.sName = "FKiUserID";
                            oNVUser.sValue = oUserD.UserID.ToString();
                            OQSD.Add("FKiUserID", oNVUser);
                            OQSD.Add("iStatus", new CNV { sName = "iStatus", sValue = "0" });
                            iNewUserID = oUserD.UserID;
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iUserID}", Convert.ToString(oUserD.UserID), null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|FKiUserID}", Convert.ToString(oUserD.UserID), null, null);
                            XIIBO oBII = new XIIBO();
                            //Customer Creation
                            oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - Customer Insertion Started";
                            oXID.SaveErrortoDB(oCResult);

                            List<CNV> oCustomerNV = new List<CNV>();
                            oCustomerNV.Add(new CNV { sName = "FkiUserID", sValue = oUserD.UserID.ToString() });
                            oCustomerI = oXII.BOI("Customer_T", ClientID, "");// oXII.BOI("Customer_T", "", "Create", oCustomerNV);
                            if (oCustomerI == null)
                            {
                                //XID1Click Xi1Click = new XID1Click();
                                //string sQuery = "select MAX(id) as id from customer_T";
                                //Xi1Click.Query = sQuery;
                                //Xi1Click.Name = "customer_T";
                                //var oCustomerID = Xi1Click.OneClick_Execute(SessionItems).FirstOrDefault();
                                //if (oCustomerID.Value != null && oCustomerID.Value.Attributes != null && oCustomerID.Value.Attributes.ContainsKey("id"))
                                //{
                                //    string CustomerID = oCustomerID.Value.Attributes["id"].sValue;
                                //    var oPreviousCustomerI = oXII.BOI("Customer_T", CustomerID);
                                //    if (oPreviousCustomerI != null && oPreviousCustomerI.Attributes.ContainsKey("sreference") && !string.IsNullOrEmpty(oPreviousCustomerI.Attributes["sreference"].sValue))
                                //    {
                                //        string CustomerRefID = oPreviousCustomerI.Attributes["sreference"].sValue;
                                //        int iCustomerRefID = 0;
                                //        
                                //        //if (int.TryParse(CustomerRefID, out iCustomerRefID)) { iCustomerRefID++; }
                                //        //string NextRefID = iCustomerRefID.ToString(new String('0', CustomerRefID.Count()));
                                //        var sRandomString = RandomString(4);
                                //        string sPrefixCode = string.Empty;
                                //        var SourceI = oXIIXI.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                                //        if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sPrefixCode"))
                                //        {
                                //             sPrefixCode = SourceI.Attributes["sPrefixCode"].sValue;
                                //        }
                                //        OQSD.Add("sReference", new CNV { sName = "sReference", sValue = sPrefixCode+sRandomString });
                                //    }
                                //    else
                                //    {
                                //        OQSD.Add("sReference", new CNV { sName = "sReference", sValue = sCustomerStartRef });
                                //    }
                                //}
                                //else
                                //{
                                //    OQSD.Add("sReference", new CNV { sName = "sReference", sValue = sCustomerStartRef });
                                //}
                                try
                                {
                                    List<CNV> oWhrParams = new List<CNV>();
                                    oWhrParams.Add(new CNV { sName = "fkiqsinstanceidxiguid", sValue = QSIGUID.ToString() });
                                    oWhrParams.Add(new CNV { sName = "bmaindriver", sValue = 1.ToString() });
                                    XIIBO oBOI = new XIIBO();
                                    oBOI = oXII.BOI("Driver_T", null, "create", oWhrParams);
                                    if (oBOI != null && oBOI.Attributes.ContainsKey("dDOB") && !OQSD.ContainsKey("dDOB"))
                                    {
                                        OQSD.Add("dDOB", new CNV { sName = "dDOB", sValue = oBOI.Attributes["dDOB"].sValue });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - Falied to get DOB from Driver for customer insertion " + ex.ToString();
                                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                                }
                                XIIXI oXIIXI = new XIIXI();
                                string sPrefixCode = string.Empty;
                                //SourceI = oXIIXI.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                                if (SourceI != null && SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sPrefixCode"))
                                {
                                    sPrefixCode = SourceI.Attributes["sPrefixCode"].sValue;
                                }
                                string sCustomerRefNo = CustomerRefNoGeneration(sPrefixCode);
                                OQSD.Add("sReference", new CNV { sName = "sReference", sValue = sCustomerRefNo });
                                if (!OQSD.ContainsKey("sExternalRefID"))
                                {
                                    OQSD.Add("sExternalRefID", new CNV { sName = "sExternalRefID", sValue = oQSI.sExternalRefID });
                                }
                                if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal" && (!string.IsNullOrEmpty(IsWithoutOTP) && (IsWithoutOTP.ToLower() == "on" || IsWithoutOTP.ToLower() == "true")) && !OQSD.ContainsKey("bDisableClientLogin"))
                                {
                                    OQSD.Add("bDisableClientLogin", new CNV { sName = "bDisableClientLogin", sValue = "True" });
                                }
                                if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal" && (!string.IsNullOrEmpty(IsWithoutOTP) && (IsWithoutOTP.ToLower() == "on" || IsWithoutOTP.ToLower() == "true")) && !OQSD.ContainsKey("bISMailSended"))
                                {
                                    OQSD.Add("bISMailSended", new CNV { sName = "bISMailSended", sValue = "False" });
                                }
                                else if (!OQSD.ContainsKey("bISMailSended"))
                                {
                                    OQSD.Add("bISMailSended", new CNV { sName = "bISMailSended", sValue = "True" });
                                }
                                var CustomerData = oBII.BuildBoObject("Customer_T", "Create", OQSD);
                                if (CustomerData.xiStatus == 0 && CustomerData.oResult != null)
                                {
                                    oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - Customer Created Sucessfully";
                                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                                    var ores = (CResult)CustomerData.oResult;
                                    oCustomerI = (XIIBO)ores.oResult;
                                }
                            }
                            if (oCustomerI.BOD != null)
                            {
                                if (oCustomerI.Attributes.ContainsKey(oCustomerI.BOD.sPrimaryKey))
                                {
                                    iCustomerID = Convert.ToInt32(oCustomerI.Attributes[oCustomerI.BOD.sPrimaryKey].sValue);
                                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|FKiCustomerID}", iCustomerID.ToString(), null, null);
                                    List<CNV> oLeadWhrParams = new List<CNV>();
                                    oLeadWhrParams.Add(new CNV { sName = "fkiqsinstanceidxiguid", sValue = QSIGUID.ToString() });
                                    var oLeadI = oXII.BOI("Lead_T", null, "create", oLeadWhrParams);
                                    if (oLeadI != null && oLeadI.Attributes.ContainsKey("FKiClientID"))
                                    {
                                        oLeadI.Attributes["FKiClientID"].sValue = iCustomerID.ToString();
                                        oLeadI.Attributes["FKiClientID"].bDirty = true;
                                        oLeadI.Save(oLeadI);
                                    }
                                }
                            }
                            if (oCustomerI.Attributes.ContainsKey("sReference"))
                            {
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sClientReference}", oCustomerI.Attributes["sReference"].sValue, null, null);
                            }
                            Info.Add("Customer Insertion done");
                            List<CNV> oAccountNV = new List<CNV>();
                            oAccountNV.Add(new CNV { sName = "FKiClientID", sValue = iCustomerID.ToString() });
                            oAccountNV.Add(new CNV { sName = "iType", sValue = 0.ToString() });
                            var oAccountI = oXII.BOI("ACAccount_T", "", "Create", oAccountNV);
                            if (oAccountI == null)
                            {
                                if (!OQSD.ContainsKey("FKiClientID"))
                                {
                                    OQSD.Add("FKiClientID", new CNV { sName = "FKiClientID", sValue = iCustomerID.ToString() });
                                }
                                //OQSD.Add("FKiClientID", new CNV { sName = "FKiClientID", sValue = iCustomerID.ToString() });
                                //OQSD.Add("iStatus", new CNV { sName = "iStatus", sValue = Convert.ToInt32(EnumTransactions.Live).ToString() });
                                OQSD.Add("sName", new CNV { sName = "sName", sValue = oCustomerI.Attributes["sName"].sValue });
                                OQSD.Add("iType", new CNV { sName = "iType", sValue = "0" });
                                OQSD.Add("iOverrideType", new CNV { sName = "iOverrideType", sValue = "10" });
                                var oAccount = oBII.BuildBoObject("ACAccount_T", "Create", OQSD);
                                if (oAccount.xiStatus == 0 && oAccount.oResult != null)
                                {
                                    CResult accc = (CResult)oAccount.oResult;
                                    oAccountI = (XIIBO)accc.oResult;
                                    oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - personal account Created Sucessfully";
                                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                                }
                            }
                            if (oCustomerI.Attributes != null && oCustomerI.Attributes.ContainsKey("FKiACAccountID") && oAccountI.Attributes != null && oAccountI.Attributes.ContainsKey("id"))
                            {
                                oCustomerI.Attributes["FKiACAccountID"].sValue = oAccountI.Attributes["id"].sValue;
                                oCustomerI.Attributes["FKiACAccountID"].bDirty = true;
                                var result = oCustomerI.Save(oCustomerI);
                            }
                            Info.Add("Account Creation done");
                            XILink XiLink = new XILink();
                            //DateTime dtCoverStart=Utility.ConvertToDate(dtInsuranceCoverStartDate);
                            XIIValue oAttrV = new XIIValue();
                            XIIXI oIXI = new XIIXI();
                            if (!string.IsNullOrEmpty(sStructureName))
                            {
                                var oQSSI = oIXI.BOI("QS Instance", QSIGUID.ToString()).Structure(sStructureName).XILoad();
                                oCache.Set_QsStructureObj(sSessionID, sGUID, "QSInstance_" + QSIGUID + "" + sStructureName + "", oQSSI);
                                var oCacheI = oCache.Get_QsStructureObj(sSessionID, sGUID, "QSInstance_" + QSIGUID + "" + sStructureName + "");
                            }
                            QueryEngine oAggregationsQE = new QueryEngine();
                            Info.Add("Info : Reached Script Execution Level");
                        }
                        if (TransactionType == "MTA")
                        {
                            Info.Add("Started MTA Execution");
                            string sLastActiveVersion = "";
                            var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                            if (!string.IsNullOrEmpty(PolicyID))
                            {
                                List<CNV> oWhrParams = new List<CNV>();
                                oWhrParams.Add(new CNV { sName = "FKiACPolicyID", sValue = PolicyID.ToString() });
                                oWhrParams.Add(new CNV { sName = "iStatus", sValue = "10" });
                                oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                XIIBO oPolicyVersionBOI = oXII.BOI("ACPolicyVersion_T", "", "", oWhrParams);
                                if (oPolicyVersionBOI.oCResult != null)
                                    sLastActiveVersion = oPolicyVersionBOI.AttributeI("id").sValue;
                            }
                            if (ProductVersionID != null)
                            {
                                XIInfraScript oScript = new XIInfraScript();
                                XID1Click PV1Click = new XID1Click();
                                var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "MTA Script");
                                XIDStructure oStructure = new XIDStructure();
                                List<CNV> nParams = new List<CNV>();
                                CNV oNV = new CNV();
                                oNV.sName = "{XIP|ProductVersionID}";
                                oNV.sValue = ProductVersionID.ToString();
                                nParams.Add(oNV);
                                nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = Convert.ToString(oQSDefinition.FKiClassID) });
                                PV1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                                var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, nParams);
                                PV1Click.Query = oQuery;
                                PV1Click.Name = "ProductVersion_T";
                                var oOneClick = PV1Click.OneClick_Execute(SessionItems);
                                foreach (var item1 in oOneClick.Values)
                                {
                                    var ProductQuery = "select * from product where XIDeleted= '0' and id = " + item1.Attributes["product"].sValue;
                                    PV1Click.Query = ProductQuery;
                                    PV1Click.Name = "Product";
                                    PV1Click.TableName = "Product";
                                    PV1Click.BOIDXIGUID = new Guid("B5917EAB-E916-4BD9-BD0E-4F643B512D40");
                                    var ProductBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Product", null);
                                    PV1Click.BOD = ProductBOD;
                                    var oProductClick = PV1Click.OneClick_Execute(SessionItems).FirstOrDefault();
                                    var PParams = new Dictionary<string, object>();
                                    var sProductName = oProductClick.Value.Attributes["sname"].sValue;
                                    var sProductCode = oProductClick.Value.Attributes["sProductcode"].sValue;
                                    //int iScriptID = 0;
                                    Guid gScriptIDXIGUID = Guid.Empty;
                                    Guid gMTAScriptIDXIGUID = Guid.Empty;
                                    int iproductversionid = 0;
                                    iproductversionid = item1.Attributes["id"].iValue;
                                    List<CNV> oWhrParams = new List<CNV>();
                                    oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                    oWhrParams.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                    oWhrParams.Add(new CNV { sName = "iType", sValue = "10" });
                                    oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                    var oQuoteI = oXII.BOI("Aggregations", "", "", oWhrParams);
                                    if (Guid.TryParse(item1.Attributes["Script"].sValue, out gScriptIDXIGUID))
                                    {
                                        if (gScriptIDXIGUID != Guid.Empty)
                                        {
                                            oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - script started executing , script id:" + gScriptIDXIGUID.ToString();
                                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                                            int iQuote = 0;
                                            if (oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                            {
                                                string sQuote = oQuoteI.Attributes["id"].sValue;
                                                if (int.TryParse(sQuote, out iQuote))
                                                {
                                                }
                                                var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), iNewUserID, sDataBase, iCustomerID, sProductName, item1.Attributes["ID"].sValue, sProductCode, dtOldcoverStart, roldGrossPremium, iQuote, sSessionID);
                                                var sQuoteID = ScriptResults.oCollectionResult.Where(m => m.sName == "QuoteID").Select(m => m.sValue).FirstOrDefault();
                                                if (int.TryParse(sQuoteID, out QuoteID))
                                                { }
                                            }
                                            else if (Guid.TryParse(item1.Attributes["MTAScript"].sValue, out gMTAScriptIDXIGUID))
                                            {
                                                oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - MTA script started executing , script id:" + gMTAScriptIDXIGUID;
                                                oXID.SaveErrortoDB(oCResult, iInstanceID);
                                                //Script Excecution
                                                var ScriptResults = oScript.XIScripting(gMTAScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), iNewUserID, sDataBase, iCustomerID, sProductName, item1.Attributes["ID"].sValue, sProductCode, dtOldcoverStart, roldGrossPremium, QuoteID, sSessionID);
                                                //PolicyMainCal( iInstanceID, dtOldcoverStart, roldGrossPremium, QuoteID.ToString(),sSessionID,sGUID, item1.Attributes["ID"].sValue);
                                            }
                                            //PolicyMainCal(sGUID, oQSInstance.ID, iUserID, iCustomerID, sDatabase, sProductName, item1.Attributes["ID"].sValue, roldGrossPremium, dtOldcoverStart);
                                        }
                                        else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                        {
                                            oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                            oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                            oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                            oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                            oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                            oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                            oQuoteI.Save(oQuoteI);
                                        }
                                    }
                                    else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                    {
                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                        oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                        oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                        oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                        oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                        oQuoteI.Save(oQuoteI);
                                    }
                                    if (sSessionID != "API")
                                        HTTPRequest(QSIGUID.ToString(), iproductversionid, sRoleName, sDataBase, sGUID, sSessionID, 10);
                                }
                            }
                        }
                        else
                        {
                            Info.Add("New quote");

                            RunQSExcelCalculations(oQSI.FKiQSDefinitionIDXIGUID.ToString(), QSIGUID.ToString(), 
                                    oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault(),
                                    oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());

                            Dictionary<string, object> Params = new Dictionary<string, object>();
                            Params["Name"] = "Product";
                            //int sFKiClassID = 0;
                            if (oQSDefinition.FKiClassID == 0)
                            {
                                sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                            }
                            else
                            {
                                sFKiClassID = oQSDefinition.FKiClassID.ToString();
                            }
                            List<CNV> oCNV = new List<CNV>();
                            //oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = Convert.ToString(oQSDefinition.FKiClassID) });
                            oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                            XIInfraScript oScript = new XIInfraScript();
                            //Getting Product table database
                            //Getting Active scripts
                            //var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "productList");
                            string sQuery = "Active ProductsList";
                            if (string.IsNullOrEmpty(QSType) || (!string.IsNullOrEmpty(QSType) && QSType.ToLower() != "internal"))
                            {
                                sQuery = "Public Active ProductsList";
                            }
                            var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sQuery);
                            XIDStructure oStructure = new XIDStructure();
                            //oD1Click.Query = o1ClickI.Query;
                            oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                            oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, oCNV);
                            //Info.Add("Product Query: " + oD1Click.Query);
                            //string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                            //oCResultTry.sMessage = sInfo;
                            //oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                            //oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                            //oXID.SaveErrortoDB(oCResultTry);
                            oD1Click.Name = "Product";
                            var result = oD1Click.OneClick_Execute(SessionItems, oD1Click);

                            //var watch = System.Diagnostics.Stopwatch.StartNew();

                            foreach (var item in result.Values)
                            {
                                var ProductID = item.Attributes["ID"].sValue;
                                if (sProductVesrionID != null && item.Attributes["ID"].sValue != sProductVesrionID) { continue; }
                                List<CNV> nParams = new List<CNV>();
                                nParams.Add(new CNV { sName = "{XIP|dPolicyDate}", sValue = dtInsuranceCoverStartDate });
                                nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = ProductID });
                                //nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = Convert.ToString(oQSDefinition.FKiClassID) });
                                nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                                //Getting scripts with version
                                //var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Product Version");
                                var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "ProductVersion Scripts");
                                oD1Click = (XID1Click)oProductVersion1ClickI.Clone(oProductVersion1ClickI);
                                oD1Click.Name = "productversion_t";
                                oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(oProductVersion1ClickI.Query, nParams);
                                //Info.Add("Product version query :" + oD1Click.Query);
                                //sInfo = "INFO: " + string.Join(",\r\n ", Info);
                                //oCResultTry.sMessage = sInfo;
                                //oXID.SaveErrortoDB(oCResultTry);

                                //oCResult.sMessage = "Product version query :" + oD1Click.Query;
                                //oXID.SaveErrortoDB(oCResult);
                                var oOneClick = oD1Click.OneClick_Execute(SessionItems, oD1Click);
                                int iproductversionid = 0;
                                foreach (var item1 in oOneClick.Values)
                                {
                                    iproductversionid = item1.Attributes["id"].iValue;
                                    //int iScriptID = 0;
                                    Guid gScriptIDXIGUID = Guid.Empty;
                                    List<CNV> oWhrParams = new List<CNV>();
                                    oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                    oWhrParams.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                    oWhrParams.Add(new CNV { sName = "iType", sValue = "10" });
                                    oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                    var oQuoteI = oXII.BOI("Aggregations", "", "List", oWhrParams);
                                    int iQuote = 0;
                                    if (oQuoteI != null)
                                    {
                                        int iOrgID = 0;
                                        string sQuoteID = oQuoteI.Attributes["id"].sValue;
                                        string OrgID = oQuoteI.Attributes["FKiOrgID"].sValue;
                                        if (int.TryParse(sQuoteID, out iQuote))
                                        { }
                                        if (int.TryParse(OrgID, out iOrgID))
                                        { }
                                        Guid.TryParse(item1.Attributes["Script"].sValue, out gScriptIDXIGUID);
                                        //var CalType = item1.Attributes["Calculation"].sValue.Split(',').ToList().Select(x => x.ToLower()).ToList();
                                        var CalType = item1.Attributes["Calculation"].iValue;
                                        CResult OCalculation = new CResult();
                                        bool bPrescriptsuccess = true;
                                        //int iPostScript = 0;


                                        //int iPreScript = 0;
                                        //int.TryParse(item1.Attributes["PreScript"].sValue, out iPreScript);
                                        Guid gPreScript = Guid.Empty;
                                        Guid gPostScript = Guid.Empty;
                                        Guid.TryParse(item1.Attributes["PreScript"].sValue, out gPreScript);
                                        if (gPreScript != Guid.Empty)
                                        {

                                            Info.Add("Started Script execution: " + gPreScript);
                                            oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - script started executing , script id:" + gPreScript;
                                            oXID.SaveErrortoDB(oCResult);
                                            if (oQuoteI != null && oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                            {
                                                ////Script Excecution
                                                //List<CNV> lParam = new List<CNV>();
                                                //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                                //lParam.Add(new CNV { sName = "iInsatnceID", sValue = QSIGUID.ToString() });
                                                //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                                //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                                //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                                //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                                //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                                //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                                //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                                //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });
                                                //lParam.Add(new CNV { sName = "iOrgID", sValue = iOrgID.ToString() });
                                                //lParam.Add(new CNV { sName = "ProductID", sValue = ProductID.ToString() });

                                                //OCalculation = PolicyMainCal(lParam);
                                                OCalculation = PreCalculation(gPreScript.ToString(), sGUID, QSIGUID.ToString(), iNewUserID, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, iQuote, sSessionID,iOrgID, ProductID);
                                                List<CNV> oWhrParams1 = new List<CNV>();
                                                oWhrParams1.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                                oWhrParams1.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                                oWhrParams1.Add(new CNV { sName = "iType", sValue = "10" });
                                                oWhrParams1.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                                var oQuoteStatus = oXII.BOI("Aggregations", "", "", oWhrParams1);
                                                var QuoteStatus = oQuoteStatus.Attributes["iQuoteStatus"].sValue;
                                                if (QuoteStatus != "90" && QuoteStatus != "60" && QuoteStatus != "50")
                                                {
                                                    //bPrescriptsuccess = true;
                                                    oQuoteI.Attributes["iQuoteStatus"].sValue = "40"; // Waiting Status
                                                }
                                                //else
                                                //{
                                                //    bPrescriptsuccess = false;
                                                //    oQuoteI.Attributes["iQuoteStatus"].sValue = "90";// pre scriptid failed
                                                //    oCResult.sMessage = "Error:  [QSInstanceID: " + iInstanceID + "] - Failed Pre-script id:" + gPreScript;
                                                //    oXID.SaveErrortoDB(oCResult);
                                                //}
                                                //oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                            }
                                            else
                                            {
                                                //QuoteID not here
                                            }
                                        }
                                        if (CalType == 40)
                                        {
                                            Info.Add("Reached excel calculation step");
                                            UpdateAggregations(0, sQuoteID, 110, 10);
                                            oCResultTry.sMessage = "INFO: getting excel calc path"; ;
                                            oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                            oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                                            oXID.SaveErrortoDB(oCResultTry);
                                            string sExcelCalcPath = GetExcelCalcPath(item1.Attributes["sExcelCalcPath"].sValue);

                                            if (sExcelCalcPath != null)
                                            {
                                                oCResultTry.sMessage = "INFO: excel calc path: " + sExcelCalcPath;
                                                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                                                oXID.SaveErrortoDB(oCResultTry);
                                                UpdateAggregations(0, sQuoteID, 40, 10); // set quote status to waiting
                                                XIIXI oIXIStruct = new XIIXI();
                                                var oLIst = oIXIStruct.BOI("QS Instance", QSIGUID.ToString());
                                                XIBOInstance oQSIStructure = oLIst.Structure("Excel Input QC").XILoad("", false, oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault(), null);
                                                oCResultTry.sMessage = "INFO: finished loading structure";
                                                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                                                oXID.SaveErrortoDB(oCResultTry);
                                                var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, item1.Attributes["fkitemplateidxiguid"].sValue);
                                                oCResultTry.sMessage = "INFO: finished loading template";
                                                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                                                oXID.SaveErrortoDB(oCResultTry);
                                                XIContentEditors oDocumentContent = new XIContentEditors();
                                                oDocumentContent = oContentDef.FirstOrDefault();
                                                XIContentEditors oConent = new XIContentEditors();
                                                oCResultTry.sMessage = "INFO: starting to merge template";
                                                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                                                oXID.SaveErrortoDB(oCResultTry);
                                                oCResult = oConent.MergeContentTemplate(oDocumentContent, oQSIStructure);
                                                Info.Add("Finished loading structure and merging template");


                                                oCResultTry.sMessage = "INFO: Finished merging template";
                                                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                                                oXID.SaveErrortoDB(oCResultTry);

                                                CreateExcelIOSheets(oCResult.oResult.ToString(), sExcelCalcPath,
                                                    oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault(),
                                                    sQuoteID);

                                                //CreateInteropExcelIOSheets(oCResult.oResult.ToString(), sExcelCalcPath,
                                                //        oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault(),
                                                //        sQuoteID);

                                                ReadExcelQuoteOutput(sExcelCalcPath,
                                                    oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault(),
                                                    sQuoteID);
                                                //ReadInteropExcelQuoteOutput(sExcelCalcPath,
                                                //        oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault(),
                                                //        sQuoteID);
                                                //InsertExcelQuoteNotification(sQuoteID, QSIGUID.ToString(), oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault(), "NEWLEAD");
                                            }
                                        }
                                        else
                                        {
                                            // self
                                            if (CalType == 30 || string.IsNullOrEmpty(item1.Attributes["calculation"].sValue))
                                            {
                                                CResult ocr1 = new CResult();
                                                ocr1.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Self Calculation script execution started: ";
                                                oXID.SaveErrortoDB(ocr1, iInstanceID);
                                                if (gScriptIDXIGUID != Guid.Empty)
                                                {
                                                    ocr1 = new CResult();
                                                    ocr1.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - Self Calculation script execution started with scriptID is : " + gScriptIDXIGUID.ToString();
                                                    //oXID.SaveErrortoDB(ocr1, QSIGUID.ToString());
                                                    Info.Add("Started self Script execution: " + gScriptIDXIGUID.ToString());

                                                    //List<CNV> lParam = new List<CNV>();
                                                    //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                                    //lParam.Add(new CNV { sName = "iInsatnceID", sValue = iInstanceID.ToString() });
                                                    //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                                    //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                                    //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                                    //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                                    //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                                    //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                                    //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                                    //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });

                                                    //var ScriptResults = PolicyMainCal(lParam);
                                                    var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), iNewUserID, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, null, null, iQuote, sSessionID);
                                                    oCResult = ScriptResults;
                                                    List<CNV> oWhrParams1 = new List<CNV>();
                                                    oWhrParams1.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                                    oWhrParams1.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                                    oWhrParams1.Add(new CNV { sName = "iType", sValue = "10" });
                                                    oWhrParams1.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                                    var oQuoteStatus = oXII.BOI("Aggregations", "", "", oWhrParams1);
                                                    var QuoteStatus = oQuoteStatus.Attributes["iQuoteStatus"].sValue;
                                                    //if (QuoteStatus == "50")
                                                    //{
                                                    //bPrescriptsuccess = true;
                                                    oQuoteI.Attributes["iQuoteStatus"].sValue = QuoteStatus;
                                                    oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                                    //}
                                                    //else
                                                    //{
                                                    //    oQuoteI.Attributes["iQuoteStatus"].sValue = QuoteStatus;
                                                    //}
                                                }
                                            }
                                        }
                                        //}
                                        if (bPrescriptsuccess == true && CalType == 10)
                                        {
                                            oQuoteI.Attributes["iQuoteStatus"].sValue = "40"; // Waiting Status
                                            oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        }
                                        if (bPrescriptsuccess == true && CalType != 40 && CalType != 50 && (CalType == 30 || string.IsNullOrEmpty(item1.Attributes["calculation"].sValue)))
                                        {
                                            //var ScriptResults = oScript.XIScripting(iScriptID, sGUID, iInstanceID, iNewUserID, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, null, null, iQuote, sSessionID);
                                            //oCResult = ScriptResults;
                                            //if (oCResult.oResult != null)
                                            //{

                                            Guid.TryParse(item1.Attributes["PostScript"].sValue, out gPostScript);
                                            if (gPostScript != Guid.Empty)
                                            {
                                                Info.Add("Started Post Script execution: " + gPostScript.ToString());
                                                oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - post script started executing , script id:" + gPostScript.ToString();
                                                oXID.SaveErrortoDB(oCResult);
                                                if (oQuoteI != null && oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                                {
                                                    //Post Script Excecution
                                                    var rPrice = oQuoteI.Attributes.Where(k => k.Key.ToLower() == "rprice").Select(i => i.Value.sValue).FirstOrDefault();
                                                    //List<CNV> lParam = new List<CNV>();
                                                    //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                                    //lParam.Add(new CNV { sName = "iInsatnceID", sValue = iInstanceID.ToString() });
                                                    //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                                    //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                                    //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                                    //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                                    //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                                    //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                                    //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                                    //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });

                                                    //OCalculation = PolicyMainCal(lParam);
                                                    OCalculation = PostCalculation(gPostScript.ToString(), sGUID, QSIGUID.ToString(), iNewUserID, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, iQuote, rPrice, sSessionID);
                                                    List<CNV> oWhrParams1 = new List<CNV>();
                                                    oWhrParams1.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                                    oWhrParams1.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                                    oWhrParams1.Add(new CNV { sName = "iType", sValue = "10" });
                                                    oWhrParams1.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                                    var oQuoteStatus = oXII.BOI("Aggregations", "", "", oWhrParams1);
                                                    var QuoteStatus = oQuoteStatus.Attributes["iQuoteStatus"].sValue;
                                                    if (QuoteStatus != "100")
                                                    {
                                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "50";// Post scriptid 
                                                    }
                                                    else
                                                    {
                                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "50";// post scriptid failed
                                                                                                         //Info.Add("Post-Script execution: " + iPostScript);
                                                        oCResult.sMessage = "Error: [QSInstanceID: " + QSIGUID.ToString() + "] - failed Post-script id:" + gPostScript.ToString();
                                                        oXID.SaveErrortoDB(oCResult);
                                                    }
                                                    oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                                }
                                                else
                                                {
                                                    //QuoteID not here
                                                }
                                            }
                                        }
                                        //}

                                        //oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                        //oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                        oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                        oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                        oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                        oQuoteI.Save(oQuoteI);

                                        if (sSessionID != "API" && oQuoteI.Attributes["iQuoteStatus"].sValue == "40")
                                        {
                                            //HTTPRequest(iInstanceID, iproductversionid, sRoleName, sDataBase, sGUID, sSessionID, 10);
                                        }
                                    }
                                }
                            }

                            //watch.Stop();
                            //long elapsedSeconds = watch.ElapsedMilliseconds / 1000;
                        }

                        if (oresult.xiStatus == 00)
                        {
                            //XIIXI oIXI = new XIIXI();
                            QueryEngine oQE = new QueryEngine();
                            oWParams = new List<XIWhereParams>();
                            List<CNV> oWhrParams = new List<CNV>();
                            oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                            DateTime dtQuoted = DateTime.MinValue;
                            float rBestQuote = 0;
                            List<SqlParameter> oSQLParams = new List<SqlParameter>();
                            oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = QSIGUID.ToString() });
                            oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = QSIGUID.ToString() });
                            oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "10" });
                            oSQLParams.Add(new SqlParameter { ParameterName = "@iType", Value = "10" });
                            oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                            oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                            oQE.AddBO("Aggregations", "", oWParams);
                            CResult oCresult = oQE.BuildQuery();
                            List<string> OverallStatus = new List<string>();
                            if (oCresult.bOK && oCresult.oResult != null)
                            {
                                var sSql1 = (string)oCresult.oResult;
                                ExecutionEngine oEE = new ExecutionEngine();
                                oEE.XIDataSource = oQE.XIDataSource;
                                oEE.sSQL = sSql1;
                                oEE.SqlParams = oSQLParams;
                                var oQResult = oEE.Execute();
                                if (oQResult.bOK && oQResult.oResult != null)
                                {
                                    var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                    var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                                    oBOIList1.ForEach(x => x.BOD = oBOD1);
                                    var RatedQuotes = oBOIList1.ToList().Where(m => m.Attributes["iQuoteStatus"].sValue == "0").ToList();
                                    if (RatedQuotes != null && RatedQuotes.Count > 0)
                                    {
                                        foreach (var oQuote in RatedQuotes)
                                        {
                                            if (DateTime.TryParse(oQuote.Attributes["CreatedTime"].sValue, out dtQuoted)) { }
                                            var rQuotePrice = string.Empty;
                                            if (rBestQuote == 0)
                                            {
                                                rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                                if (float.TryParse(rQuotePrice, out rBestQuote))
                                                { }
                                            }
                                            else
                                            {
                                                float rPrice = 0;
                                                rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                                if (float.TryParse(rQuotePrice, out rPrice))
                                                {
                                                    if (rPrice < rBestQuote && rPrice != 0)
                                                    {
                                                        rBestQuote = rPrice;
                                                    }
                                                }
                                            }
                                            OverallStatus.Add(oQuote.Attributes["iQuoteStatus"].sValue);
                                        }
                                    }
                                    else
                                    {
                                        foreach (var oQuote in oBOIList1)
                                        {
                                            if (DateTime.TryParse(oQuote.Attributes["CreatedTime"].sValue, out dtQuoted)) { }
                                            var rQuotePrice = string.Empty;
                                            if (rBestQuote == 0)
                                            {
                                                rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                                if (float.TryParse(rQuotePrice, out rBestQuote))
                                                { }
                                            }
                                            else
                                            {
                                                float rPrice = 0;
                                                rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                                if (float.TryParse(rQuotePrice, out rPrice))
                                                {
                                                    if (rPrice < rBestQuote && rPrice != 0)
                                                    {
                                                        rBestQuote = rPrice;
                                                    }
                                                }
                                            }
                                            if (oQuote.Attributes.ContainsKey("iQuoteStatus"))
                                            {
                                                var iQSValue = oQuote.Attributes["iQuoteStatus"].sValue;
                                                if (iQSValue != "30")
                                                {
                                                    OverallStatus.Add(oQuote.Attributes["iQuoteStatus"].sValue);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            var sOverallStatus = string.Empty;
                            if (OverallStatus != null && OverallStatus.Count() > 0)
                            {
                                if (OverallStatus.All(x => x == "0"))
                                {
                                    sOverallStatus = "0";
                                }
                                else
                                {
                                    sOverallStatus = "20";
                                }
                            }
                            var oBOI = oIXI.BOI("Lead_T", "", "UpdateQuoteDetails", oWhrParams);
                            var sPastLeadStatus = string.Empty;
                            var oSourceI = oXII.BOI("XISource_T", oQSI.QSDefinition.FKiSourceID.ToString());
                            if (oBOI != null)
                            {
                                if (oBOI.Attributes.ContainsKey("iStatus"))
                                {
                                    sPastLeadStatus = oBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                    if (string.IsNullOrEmpty(sPastLeadStatus) || (sPastLeadStatus.ToLower() != "mta" && sPastLeadStatus.ToLower() != "renewal"))
                                    {
                                        if (oSourceI != null && oSourceI.Attributes != null && oSourceI.Attributes.ContainsKey("sName"))
                                        {
                                            var sSrcName = oSourceI.Attributes["sName"].sValue;
                                            if (!string.IsNullOrEmpty(sSrcName))
                                            {
                                                if (sSrcName.ToLower() == "Internal".ToLower() && !string.IsNullOrEmpty(sOverallStatus))
                                                {
                                                    if (sOverallStatus == "0")
                                                    {
                                                        oBOI.Attributes["iStatus"].sValue = "180";
                                                        oBOI.Attributes["iQuoteStatus"].sValue = "70";
                                                    }
                                                    else
                                                    {
                                                        oBOI.Attributes["iStatus"].sValue = "180";
                                                        oBOI.Attributes["iQuoteStatus"].sValue = "90";
                                                    }
                                                }
                                                else
                                                {
                                                    if (sOverallStatus == "0")
                                                    {
                                                        oBOI.Attributes["iStatus"].sValue = "180";
                                                        oBOI.Attributes["iQuoteStatus"].sValue = "10";
                                                    }
                                                    else
                                                    {
                                                        oBOI.Attributes["iStatus"].sValue = "180";
                                                        oBOI.Attributes["iQuoteStatus"].sValue = "80";
                                                    }
                                                }
                                            }
                                        }
                                        //oBOI.Attributes["iStatus"].sValue = "10";
                                        oBOI.Attributes["iStatus"].bDirty = true;
                                        oBOI.Attributes["iQuoteStatus"].bDirty = true;
                                    }
                                    oBOI.Attributes["rBestQuote"].sValue = rBestQuote.ToString();
                                    oBOI.Attributes["rBestQuote"].bDirty = true;
                                    oBOI.Attributes["dtQuoteDate"].sValue = dtQuoted.ToString();
                                    oBOI.Attributes["dtQuoteDate"].bDirty = true;
                                    oBOI.Attributes["dtBestPriceDate"].sValue = dtQuoted.ToString();
                                    oBOI.Attributes["dtBestPriceDate"].bDirty = true;
                                    oBOI.Attributes[oBOI.BOD.sPrimaryKey].bDirty = true;
                                    oBOI.Save(oBOI);
                                    //Save into LifeCycle
                                    long iLeadID = 0;
                                    var sLeadID = string.Empty;
                                    var sCurrentLeadStatus = oBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                    if (oBOI.Attributes.ContainsKey(oBOI.BOD.sPrimaryKey))
                                    {
                                        sLeadID = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue;
                                    };
                                    long.TryParse(sLeadID, out iLeadID);
                                    XIIBO oLCBOI = new XIIBO();
                                    var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                                    {
                                        oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInstanceID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiQSIIDXIGUID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiQSIIDXIGUID", new XIIAttribute() { sName = "FKiQSIIDXIGUID", sValue = QSIGUID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                                    {
                                        oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Stage", bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                                    {
                                        oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sPastLeadStatus, bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                                    {
                                        oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sCurrentLeadStatus, bDirty = true });
                                    }
                                    oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                                    oLCBOI.BOD = oBOInsatnce.BOD;
                                    oLCBOI.Save(oLCBOI);
                                }
                            }
                            if (sSessionID != "API")
                                HTTPRequest(QSIGUID.ToString(), 0, sRoleName, sDataBase, sGUID, sSessionID, 10);
                            //notification insertion for best quote and refer quotes
                            oParams.Add(new CNV { sName = "sXiLink", sValue = "Your Best Quote XiLink" });
                            InsertNotification(oParams);

                            bool bIsRefer = false; bool bIsDecline = false;
                            XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Quotes Status List", "");
                            List<CNV> oNVParams = new List<CNV>();
                            oNVParams.Add(new CNV { sName = "{XIP|iQSInstanceID}", sValue = QSIGUID.ToString() });
                            o1ClickD.ReplaceFKExpressions(oNVParams);
                            Dictionary<string, XIIBO> oRes = o1ClickD.OneClick_Execute(SessionItems);
                            if (oRes.Values.Any(x => x.Attributes.ContainsKey("sMessage")))
                            {
                                if (oRes.Values.Any(x => x.Attributes["sMessage"].sValue == "Refer"))
                                {
                                    bIsRefer = true;
                                }
                                if (oRes.Values.Any(x => x.Attributes["sMessage"].sValue == "Decline"))
                                {
                                    bIsDecline = true;
                                }
                            }
                            if (bIsRefer)
                            {
                                var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "sXiLink");
                                oParams.Remove(stuffToRemove);
                                oParams.Add(new CNV { sName = "sXiLink", sValue = "Refer Quotes" });
                                InsertNotification(oParams);
                            }
                            if (bIsDecline)
                            {
                                var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "sXiLink");
                                oParams.Remove(stuffToRemove);
                                oParams.Add(new CNV { sName = "sXiLink", sValue = "Failed Quotes" });
                                InsertNotification(oParams);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string sInfo = "INFO: [QSInstanceID: " + QSIGUID + "] - " + string.Join(",\r\n ", Info);
                oCResult.sMessage = "Error: " + ex.Message + " INFO: " + sInfo;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCResult);
                //                oCResult.sMessage = "ERROR: [SignalR_QSInstanceID" + iID + "_ " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                //                oCResult.LogToFile();
                //                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        
        public CResult PreCalculation(string gPreScriptIDXIGUID, string sGUID, string iInstanceID, int iNewUserID, string sDataBase, int iCustomerID, string sAttrName, string sAttrID, string sProductCode, int iQuote, string sSessionID, int iOrgID, string ProductID)
        {
            //CResult cResult = new CResult();
            XIInstanceBase oIB = new XIInstanceBase();
            CResult oCResult = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            List<CNV> oTraceInfo = new List<CNV>();
            oTrace.sTask = "Pre Calculations based on ScriptID";//expalin about this method logic            
            try
            {
                oTraceInfo.Add(new CNV { sValue = "Pre Script Execution Started with ID " + gPreScriptIDXIGUID });

                XIInfraScript oScript = new XIInfraScript();
                var ScriptResults = oScript.XIScripting(gPreScriptIDXIGUID, sGUID, iInstanceID, iNewUserID, sDataBase, iCustomerID, sAttrName, sAttrID, sProductCode, null, null, iQuote, sSessionID, iOrgID,ProductID);
                oCResult = ScriptResults;
                if (oCResult.oResult != null)
                {
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
                else
                {
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                    oCResult.oResult = null;

                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
            oCResult.oTraceStack = oTraceInfo;
            oIB.SaveErrortoDB(oCResult);
            return oCResult;
        }
        public CResult PostCalculation(string gPostScriptIDXIGUID, string sGUID, string iInstanceID, int iNewUserID, string sDataBase, int iCustomerID, string sAttrName, string sAttrID, string sProductCode, int iQuote, string rPrice, string sSessionID)
        {
            //CResult cResult = new CResult();
            XIInstanceBase oIB = new XIInstanceBase();
            CResult oCResult = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            List<CNV> oTraceInfo = new List<CNV>();
            oTrace.sTask = "Pre Calculations based on ScriptID";//expalin about this method logic            
            try
            {
                oTraceInfo.Add(new CNV { sValue = "Post Script Execution Started with ID " + gPostScriptIDXIGUID });

                XIInfraScript oScript = new XIInfraScript();
                var ScriptResults = oScript.XIScripting(gPostScriptIDXIGUID, sGUID, iInstanceID, iNewUserID, sDataBase, iCustomerID, sAttrName, sAttrID, sProductCode, null, rPrice, iQuote, sSessionID);
                oCResult = ScriptResults;
                if (oCResult.oResult != null)
                {
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
            oCResult.oTraceStack = oTraceInfo;
            oIB.SaveErrortoDB(oCResult);
            return oCResult;
        }

        public CResult ExePartialScript(List<CNV> oParams, List<CNV> SessionItems = null)
        {
            CResult oCResult = new CResult();
            List<string> Info = new List<string>();
            Info.Add("ExecuteScript Method Started");
            string iID = "";
            int iInstanceID = 0;
            try
            {
                CResult oresult = new CResult();
                XIInfraCache oCache = new XIInfraCache();
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sCustomerStartRef = oParams.Where(m => m.sName.ToLower() == "sCustomerStartReference".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sRoleName = oParams.Where(m => m.sName.ToLower() == "srolename".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iCustomerID = 0;
                XID1Click oD1Click = new XID1Click();
                var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
                int.TryParse(iID, out iInstanceID);
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(iID, out QSIGUID);
                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    XIIXI oXII = new XIIXI();
                    XIIBO SourceI = new XIIBO();
                    Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                    XIBOBuilding oBOBuilding = new XIBOBuilding();
                    XIIQS oQS = new XIIQS();
                    int iQSDID = 0;
                    string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                    if (int.TryParse(sQSDID, out iQSDID)) { }
                    //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(iQSDID, iInstanceID, null, 0, 0, null);
                    XIIQS oQSI = new XIIQS();
                    if (QSIGUID != null && QSIGUID != Guid.Empty)
                    {
                        oQSI = oXII.GetQSXIValuesByQSIID(QSIGUID.ToString());
                        iInstanceID = oQSI.ID;
                    }
                    else if (iInstanceID > 0)
                    {
                        oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    }
                    var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                    if (oQSDefinition != null)
                    {
                        oQSI.QSDefinition = oQSDefinition;
                    }
                    //Getting structure Instance
                    //XIIQS oQSI = oQS.QSI(oXII.BOI("QS Instance", iInstanceID.ToString()).Structure("NotationStructure").XILoad());
                    //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iInstanceID);
                    //XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID);
                    //var oQSDI = oBOBuilding.GetQSNVPairs(oQSI);
                    foreach (var xiValue in oQSI.XIValues)
                    {
                        if (!OQSD.ContainsKey(xiValue.Key))
                        {
                            OQSD.Add(xiValue.Key, new CNV { sName = xiValue.Key, sValue = xiValue.Value.sValue });
                        }
                    }
                    string IsWithoutOTP = oQSI.XIIValues("bIsWithoutOTP");
                    var TransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                    var dtOldcoverStart = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|doldcoverstart}");
                    var roldGrossPremium = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|roldGrossPremium}");
                    var ProductVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}");
                    if (oQSI.XIValues != null && oQSI.XIValues.Count() > 0)
                    {
                        var sValues = oQSI.XIValues.Values.ToList().Select(m => m.sValue).ToList();
                        var sNames = oQSI.XIValues.Keys.ToList();
                        if (sNames != null && sNames.Count() > 0)
                        {
                            var sAllNames = string.Join(",", sNames);
                            Info.Add("AllNames" + sAllNames);
                            //oCResult.sMessage = "AllNames" + sAllNames;
                            //oXID.SaveErrortoDB(oCResult);
                        }
                        if (sValues != null && sValues.Count() > 0)
                        {
                            var sALLValues = string.Join(",", sValues);
                            Info.Add("ALLValues" + sALLValues);
                            //oCResult.sMessage = "ALLValues" + sALLValues;
                            //oXID.SaveErrortoDB(oCResult);
                        }
                    }
                    SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                    //User Creation


                    string dtInsuranceCoverStartDate = oQSI.XIIValues("dCoverStart");//"10/30/2018";
                    XILink XiLink = new XILink();
                    //DateTime dtCoverStart=Utility.ConvertToDate(dtInsuranceCoverStartDate);
                    int QuoteID = 0;
                    XIIValue oAttrV = new XIIValue();
                    XIIXI oIXI = new XIIXI();
                    if (!string.IsNullOrEmpty(sStructureName))
                    {
                        var oQSSI = oIXI.BOI("QS Instance", QSIGUID.ToString()).Structure(sStructureName).XILoad();
                        oCache.Set_QsStructureObj(sSessionID, sGUID, "QSInstance_" + QSIGUID + "" + sStructureName + "", oQSSI);
                        var oCacheI = oCache.Get_QsStructureObj(sSessionID, sGUID, "QSInstance_" + QSIGUID + "" + sStructureName + "");
                    }
                    QueryEngine oAggregationsQE = new QueryEngine();
                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                    Info.Add("Info : Reached Script Execution Level");
                    if (TransactionType == "MTA")
                    {
                        Info.Add("Started MTA Execution");
                        if (ProductVersionID != null)
                        {
                            XIInfraScript oScript = new XIInfraScript();
                            XID1Click PV1Click = new XID1Click();
                            var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "MTA Script");
                            XIDStructure oStructure = new XIDStructure();
                            List<CNV> nParams = new List<CNV>();
                            CNV oNV = new CNV();
                            oNV.sName = "{XIP|ProductVersionID}";
                            oNV.sValue = ProductVersionID.ToString();
                            nParams.Add(oNV);
                            var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, nParams);
                            PV1Click.Query = oQuery;
                            PV1Click.Name = "ProductVersion_T";
                            var oOneClick = PV1Click.OneClick_Execute(SessionItems);
                            foreach (var item1 in oOneClick.Values)
                            {
                                var ProductQuery = "select * from product where id = " + item1.Attributes["product"].sValue;
                                PV1Click.Query = ProductQuery;
                                PV1Click.Name = "Product";
                                var oProductClick = PV1Click.OneClick_Execute(SessionItems).FirstOrDefault();
                                var PParams = new Dictionary<string, object>();
                                var sProductName = oProductClick.Value.Attributes["sname"].sValue;
                                var sProductCode = oProductClick.Value.Attributes["sProductcode"].sValue;
                                //int iScriptID = 0;
                                Guid gScriptIDXIGUID = Guid.Empty;
                                Guid gMTAScriptIDXIGUID = Guid.Empty;
                                int iproductversionid = 0;
                                iproductversionid = item1.Attributes["id"].iValue;
                                List<CNV> oWhrParams = new List<CNV>();
                                oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                oWhrParams.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                oWhrParams.Add(new CNV { sName = "iType", sValue = "20" });
                                oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                var oQuoteI = oXII.BOI("Aggregations", "", "", oWhrParams);
                                if (Guid.TryParse(item1.Attributes["Script"].sValue, out gScriptIDXIGUID))
                                {
                                    if (gScriptIDXIGUID != Guid.Empty)
                                    {
                                        oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - script started executing , script id:" + gScriptIDXIGUID.ToString();
                                        oXID.SaveErrortoDB(oCResult, iInstanceID);
                                        int iQuote = 0;
                                        if (oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                        {
                                            string sQuote = oQuoteI.Attributes["id"].sValue;
                                            if (int.TryParse(sQuote, out iQuote))
                                            {
                                            }
                                            //Script Excecution
                                            var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), 0, sDataBase, iCustomerID, sProductName, item1.Attributes["ID"].sValue, sProductCode, dtOldcoverStart, roldGrossPremium, iQuote, sSessionID);
                                            var sQuoteID = ScriptResults.oCollectionResult.Where(m => m.sName == "QuoteID").Select(m => m.sValue).FirstOrDefault();
                                            if (int.TryParse(sQuoteID, out QuoteID))
                                            { }
                                        }
                                        if (Guid.TryParse(item1.Attributes["MTAScript"].sValue, out gMTAScriptIDXIGUID))
                                        {
                                            oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - MTA script started executing , script id:" + gMTAScriptIDXIGUID.ToString();
                                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                                            //Script Excecution
                                            var ScriptResults = oScript.XIScripting(gMTAScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), 0, sDataBase, iCustomerID, sProductName, item1.Attributes["ID"].sValue, sProductCode, dtOldcoverStart, roldGrossPremium, QuoteID, sSessionID);
                                            //PolicyMainCal( iInstanceID, dtOldcoverStart, roldGrossPremium, QuoteID.ToString(),sSessionID,sGUID, item1.Attributes["ID"].sValue);
                                        }
                                        //PolicyMainCal(sGUID, oQSInstance.ID, iUserID, iCustomerID, sDatabase, sProductName, item1.Attributes["ID"].sValue, roldGrossPremium, dtOldcoverStart);
                                    }
                                    else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                    {
                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                        oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        oQuoteI.Attributes["FKiUserID"].sValue = 0.ToString();
                                        oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                        oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                        oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                        oQuoteI.Save(oQuoteI);
                                    }
                                }
                                else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                {
                                    oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                    oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                    oQuoteI.Attributes["FKiUserID"].sValue = 0.ToString();
                                    oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                    oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                    oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                    oQuoteI.Save(oQuoteI);
                                }
                                HTTPRequest(QSIGUID.ToString(), iproductversionid, sRoleName, sDataBase, sGUID, sSessionID, 20);
                            }
                        }
                    }
                    else
                    {
                        Dictionary<string, object> Params = new Dictionary<string, object>();
                        Params["Name"] = "Product";
                        List<CNV> oCNV = new List<CNV>();
                        oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = Convert.ToString(oQSDefinition.FKiClassID) });
                        XIInfraScript oScript = new XIInfraScript();
                        //Getting Product table database
                        //Getting Active scripts
                        //var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "productList");
                        string sQuery = "Active ProductsList";
                        if (string.IsNullOrEmpty(QSType) || (!string.IsNullOrEmpty(QSType) && QSType.ToLower() != "internal"))
                        {
                            sQuery = "Public Active ProductsList";
                        }
                        var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sQuery);
                        oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                        XIDStructure oStructure = new XIDStructure();
                        //oD1Click.Query = o1ClickI.Query;
                        oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, oCNV);
                        oD1Click.Name = "Product";
                        var result = oD1Click.OneClick_Execute(SessionItems);
                        foreach (var item in result.Values)
                        {
                            var ProductID = item.Attributes["ID"].sValue;
                            List<CNV> nParams = new List<CNV>();
                            nParams.Add(new CNV { sName = "{XIP|dPolicyDate}", sValue = dtInsuranceCoverStartDate });
                            nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = ProductID });
                            nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = Convert.ToString(oQSDefinition.FKiClassID) });
                            //Getting scripts with version
                            //var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Product Version");
                            var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "ProductVersion Partial Scripts");
                            oD1Click = (XID1Click)oProductVersion1ClickI.Clone(oProductVersion1ClickI);
                            oD1Click.Name = "productversion_t";
                            oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(oProductVersion1ClickI.Query, nParams);
                            //oCResult.sMessage = "Product version query :" + oD1Click.Query;
                            //oXID.SaveErrortoDB(oCResult);
                            var oOneClick = oD1Click.OneClick_Execute(SessionItems);
                            int iproductversionid = 0;
                            foreach (var item1 in oOneClick.Values)
                            {
                                iproductversionid = item1.Attributes["id"].iValue;
                                //int iScriptID = 0;
                                Guid gScriptIDXIGUID = Guid.Empty;
                                List<CNV> oWhrParams = new List<CNV>();
                                oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                                oWhrParams.Add(new CNV { sName = "FKiProductVersionID", sValue = iproductversionid.ToString() });
                                oWhrParams.Add(new CNV { sName = "iType", sValue = "20" });
                                oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                                var oQuoteI = oXII.BOI("Aggregations", "", "", oWhrParams);
                                int iQuote = 0;
                                string sQuoteID = oQuoteI.Attributes["id"].sValue;
                                if (int.TryParse(sQuoteID, out iQuote))
                                { }
                                if (Guid.TryParse(item1.Attributes["PartialScript"].sValue, out gScriptIDXIGUID))
                                {
                                    if (gScriptIDXIGUID != Guid.Empty && string.IsNullOrEmpty(item1.Attributes["Calculation"].sValue))
                                    {
                                        Info.Add("Started Script execution: " + gScriptIDXIGUID.ToString());
                                        oCResult.sMessage = "Info: [QSInstanceID: " + QSIGUID + "] - script started executing , script id:" + gScriptIDXIGUID.ToString();
                                        oXID.SaveErrortoDB(oCResult);
                                        if (oQuoteI != null && oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                        {
                                            //Script Excecution
                                            //var ScriptResults1 = PolicyMainCal(iInstanceID, iNewUserID, iCustomerID, sDataBase, item.Attributes["Name"].sValue, item.Attributes["ProductCode"].sValue, item1.Attributes["ID"].sValue, sSessionID, sGUID, iQuote);
                                            //var Results = PolicyMainCal(iInstanceID, iNewUserID, iCustomerID, sDataBase, item.Attributes["Name"].sValue, item.Attributes["ProductCode"].sValue, item1.Attributes["ID"].sValue, sSessionID,sGUID, iQuote);
                                            //List<CNV> lParam = new List<CNV>();
                                            //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                            //lParam.Add(new CNV { sName = "iInsatnceID", sValue = iInstanceID.ToString() });
                                            //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                            //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                            //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                            //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                            //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                            //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                            //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                            //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });


                                            //var ScriptResults = PHTowerGateCalculation(lParam);
                                            var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), 0, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, null, null, iQuote, sSessionID);
                                            oresult = ScriptResults;
                                        }
                                    }
                                    else if (item1.Attributes["Calculation"].iValue == 20)
                                    {
                                        //List<CNV> lParam = new List<CNV>();
                                        //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                        //lParam.Add(new CNV { sName = "iInsatnceID", sValue = iInstanceID.ToString() });
                                        //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                        //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                        //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                        //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                        //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                        //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                        //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                        //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });
                                        //lParam.Add(new CNV { sName = "FKiSupplierID", sValue = item.Attributes["SupplierID"].sValue });
                                        //var oQSIO = oCache.Get_QsStructureObj(sSessionID, sGUID, "QSInstance_" + iInstanceID + "NotationStructure");
                                        //var ostructureInstance = oQSIO.oStructureInstance.FirstOrDefault().Value.FirstOrDefault();
                                        //var ScriptResults = PolicyMainCal(lParam);
                                        var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, QSIGUID.ToString(), 0, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, null, null, iQuote, sSessionID);
                                        oresult = ScriptResults;
                                    }
                                    else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                    {
                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                        oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        oQuoteI.Attributes["FKiUserID"].sValue = 0.ToString();
                                        oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                        oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                        oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                        oQuoteI.Save(oQuoteI);
                                    }
                                }
                                else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                {
                                    oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                    oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                    oQuoteI.Attributes["FKiUserID"].sValue = 0.ToString();
                                    oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                    oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                    oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                    oQuoteI.Save(oQuoteI);
                                }
                                HTTPRequest(QSIGUID.ToString(), iproductversionid, sRoleName, sDataBase, sGUID, sSessionID, 20);

                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string sInfo = "INFO: [QSInstanceID: " + iInstanceID + "] - " + string.Join(",\r\n ", Info);
                oCResult.sMessage = sInfo;
                oXID.SaveErrortoDB(oCResult, iInstanceID);
                oCResult.sMessage = "ERROR: [SignalR_QSInstanceID" + iID + "_ " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult BindOverRideValues(List<CNV> oParams, iSiganlR oSignalr)
        {
            CResult oCResult = new CResult();
            try
            {
                oSignalR = oSignalr;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sRoleName = oParams.Where(m => m.sName.ToLower() == "srolename".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string iMainQSinstanceID = oParams.Where(m => m.sName.ToLower() == "iMainQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sParentGUID = oParams.Where(m => m.sName.ToLower() == "sMainQSGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iInstanceID = 0;
                //if (int.TryParse(iMainQSinstanceID, out iInstanceID))
                //{
                //}
                //XIInfraCache oCache = new XIInfraCache();
                //string sQSID = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|iQSInstanceID}");
                if (int.TryParse(iID, out iInstanceID)) { }
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(iID, out QSIGUID);
                //string sParentGUID = sGUID;
                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    Thread threadObj = new Thread(new ThreadStart(() =>
                    {

                        QueryEngine oAggregationsQE = new QueryEngine();
                        List<XIWhereParams> oWParams = new List<XIWhereParams>();
                        List<SqlParameter> oSQLParams = new List<SqlParameter>();
                        oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = QSIGUID.ToString() });
                        oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = QSIGUID.ToString() });
                        oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "10" });
                        oSQLParams.Add(new SqlParameter { ParameterName = "@iType", Value = "10" });
                        oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                        oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                        oAggregationsQE.AddBO("Aggregations", "", oWParams);
                        CResult oCresult1 = oAggregationsQE.BuildQuery();
                        if (oCresult1.bOK && oCresult1.oResult != null)
                        {
                            var sSql1 = (string)oCresult1.oResult;
                            ExecutionEngine oEE = new ExecutionEngine();
                            oEE.XIDataSource = oAggregationsQE.XIDataSource;
                            oEE.sSQL = sSql1;
                            oEE.SqlParams = oSQLParams;
                            var oQResult = oEE.Execute();
                            if (oQResult.bOK && oQResult.oResult != null)
                            {
                                var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                var oBOD1 = oAggregationsQE.QParams.FirstOrDefault().BOD;
                                oBOIList1.ForEach(x => x.BOD = oBOD1);
                                if (oBOIList1 != null && oBOIList1.Count > 0)
                                {
                                    foreach (var oBOI in oBOIList1)
                                    {
                                        if (oBOI.Attributes.ContainsKey("FKiProductVersionID"))
                                        {
                                            string ProductversionID = oBOI.Attributes["FKiProductVersionID"].sValue;
                                            int iproductversionid = 0;
                                            if (int.TryParse(ProductversionID, out iproductversionid))
                                            {
                                                HTTPRequest(QSIGUID.ToString(), iproductversionid, sRoleName, sDataBase, sGUID, sSessionID, 10);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        HTTPRequest(QSIGUID.ToString(), 0, sRoleName, sDataBase, sGUID, sSessionID, 10);
                    }));
                    threadObj.Start();
                    threadObj.IsBackground = true;
                }
            }
            catch (Exception ex)
            {
                //string sInfo = "INFO: [QSInstanceID: " + iInstanceID + "] - " + string.Join(",\r\n ", Info);
                //oCResult.sMessage = sInfo;
                oXID.SaveErrortoDB(oCResult);
                oCResult.sMessage = "ERROR: [SignalR_QSInstanceID" + "_ " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public string CustomerRefNoGeneration(string sPrefixCode)
        {
            XIIXI oIXI = new XIIXI();
            string sRandomString = RandomString(4);
            string sCustomerRefNo = sPrefixCode + sRandomString;
            List<CNV> oWhereParams = new List<CNV>();
            oWhereParams.Add(new CNV { sName = "sReference", sValue = sCustomerRefNo });
            var oCustomerI = oIXI.BOI("Customer_T", null, null, oWhereParams);
            if (oCustomerI != null)
            {
                sCustomerRefNo = CustomerRefNoGeneration(sPrefixCode);
            }
            return sCustomerRefNo;
        }

        public CResult ExecuteScript(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            List<string> Info = new List<string>();
            Info.Add("ExecuteScript Method Started");
            //try
            //{
            //    CResult oresult = new CResult();
            XIInfraCache oCache = new XIInfraCache();
            var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            if (sSessionID != "API")
                sSessionID = HttpContext.Current.Session.SessionID;
            string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            //    string sCustomerStartRef = oParams.Where(m => m.sName.ToLower() == "sCustomerStartReference".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sScriptType = oParams.Where(m => m.sName.ToLower() == "sScriptType".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string ApplicationID = oParams.Where(m => m.sName.ToLower() == "iApplicationID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string OrganizationID = oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string IsDeleteExternalQuote = oParams.Where(m => m.sName.ToLower() == "IsDeleteExternalQuote".ToLower()).Select(m => m.sValue).FirstOrDefault();
            var UserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string StructureID = oParams.Where(x => x.sName.ToLower() == "StructureCodeUID".ToLower()).Select(t => t.sValue).FirstOrDefault();
            //    string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
            //    int iCustomerID = 0;
            XID1Click oD1Click = new XID1Click();
            int iInstanceID = 0;
            XIIXI oXII = new XIIXI();
            XIIQS oQSI = new XIIQS();
            XIDQS oQSDefinition = new XIDQS();
            Guid StructureGuid = Guid.Empty;
            Guid.TryParse(StructureID, out StructureGuid);
            if (int.TryParse(iID, out iInstanceID))
            {
            }
            else
            {
                XIIQS oQS = new XIIQS();
                int iQSDID = 0;
                string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");

                sQSDID = sQSDID == null ? oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault() : sQSDID;
                oQSI = oXII.GetQSXIValuesByQSIID(iID);
                oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iID);//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                if (oQSDefinition.ID == 0)
                {
                    oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, oQSI.FKiQSDefinitionIDXIGUID.ToString());
                }
                if (oQSDefinition != null)
                {
                    oQSI.QSDefinition = oQSDefinition;
                }
            }
            Guid InsGUID = Guid.Empty;
            Guid.TryParse(iID, out InsGUID);
            int iScriptType = 10;
            if (!string.IsNullOrEmpty(sScriptType) && sScriptType.ToLower() == "partial")
            {
                iScriptType = 20;
            }
            List<CNV> oWhrParams = new List<CNV>();
            oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = InsGUID.ToString() });
            var oLeadI = oXII.BOI("Lead_T", "", "Create", oWhrParams);
            int iLeadID = 0;
            if (oLeadI != null && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
            {
                if (int.TryParse(oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue, out iLeadID))
                { }
            }
            if (InsGUID != null && InsGUID != Guid.Empty)
            {
                oQSI = oXII.GetQSXIValuesByQSIID(InsGUID.ToString());
                iInstanceID = oQSI.ID;
            }
            else if (iInstanceID > 0)
            {
                oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
            }
            XIBOInstance oQSSI = new XIBOInstance();
            if (StructureGuid != null && StructureGuid != Guid.Empty)
            {
                List<CNV> oWhrParamsforStr = new List<CNV>();
                oWhrParamsforStr.Add(new CNV { sName = "XIGUID", sValue = StructureGuid.ToString() });
                oWhrParamsforStr.Add(new CNV { sName = "XIDeleted", sValue = "0" });
                oWhrParamsforStr.Add(new CNV { sName = "FKiParentID", sValue = "#" });
                var sStructureCode = oIXI.BOI("XI BOStructure", "", "", oWhrParamsforStr);
                string sCode = string.Empty;
                if (sStructureCode != null && sStructureCode.Attributes.Count() > 0)
                {
                    sCode = sStructureCode.Attributes["scode"].sValue;
                }
                if (!string.IsNullOrEmpty(sCode))
                {
                    oQSSI = oXII.BOI("QS Instance", InsGUID.ToString()).Structure(sCode).XILoad();
                }
            }
            else
            {
                 oQSSI = oXII.BOI("QS Instance", InsGUID.ToString()).Structure("SubCharityRisk").XILoad();
            }
            var TransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
            var ProductVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}");
            var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
            var CoverStart = oQSSI.oSubStructureI("QS Instance").Item(0).ChildI("Charity Risk Copy_new", "0").XIIValue("dCoverStart").sDerivedValue;
            if (string.IsNullOrEmpty(CoverStart))
            {
                CoverStart = oQSSI.oSubStructureI("QS Instance").Item(0).ChildI("Charity Risk Copy_new", "0").XIIValue("mteffctivefrom").sValue;
            }
            string dtInsuranceCoverStartDate = oQSI.XIIValues("dCoverStart");//"10/30/2018";
            if (string.IsNullOrEmpty(dtInsuranceCoverStartDate))
            {
                dtInsuranceCoverStartDate = oQSI.XIIValues("MTEffctiveFrom");
                CoverStart = dtInsuranceCoverStartDate;
            }
            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|dPolicyDate}", dtInsuranceCoverStartDate, null, null);
            string PFScheme = oQSI.XIIValues("sSchemeRef");
            string sName = oQSI.XIIValues("sFirstName") + " " + oQSI.XIIValues("sLastName");
            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}", PFScheme, null, null);
            List<XIIBO> oBOIList = new List<XIIBO>();
            var BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Aggregations");
            int iQSType = 0;
            bool bIsVisibleUser = false;
            if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal")
            {
                iQSType = 10;
            }
            else
            {
                iQSType = 20;
                bIsVisibleUser = true;
            }
            QueryEngine oAggregationsQE = new QueryEngine();
            List<XIWhereParams> oWParams = new List<XIWhereParams>();
            List<SqlParameter> SqlParams = new List<SqlParameter>();
            oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = InsGUID.ToString() });
            oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = iScriptType.ToString() });
            oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
            SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = InsGUID.ToString() });
            SqlParams.Add(new SqlParameter { ParameterName = "@iType", Value = iScriptType.ToString() });
            SqlParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
            if (IsDeleteExternalQuote == "no")
            {
                oWParams.Add(new XIWhereParams { sField = "iQuoteType", sOperator = "<>", sValue = "20" });
                SqlParams.Add(new SqlParameter { ParameterName = "@iQuoteType", Value = "20" });
            }
            List<CNV> oCNVParams = new List<CNV>();
            CNV oCNVParam = new CNV();
            oAggregationsQE.AddBO("Aggregations", "", oWParams);
            CResult oCresult1 = oAggregationsQE.BuildQuery();
            if (oCresult1.bOK && oCresult1.oResult != null)
            {
                var sSql1 = (string)oCresult1.oResult;
                ExecutionEngine oEE = new ExecutionEngine();
                oEE.XIDataSource = oAggregationsQE.XIDataSource;
                oEE.sSQL = sSql1;
                oEE.SqlParams = SqlParams;
                var oQResult = oEE.Execute();
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    var oBOD1 = oAggregationsQE.QParams.FirstOrDefault().BOD;
                    oBOIList1.ForEach(x => x.BOD = oBOD1);
                    if (oBOIList1 != null && oBOIList1.Count > 0)
                    {
                        foreach (var oBOI in oBOIList1)
                        {
                            oCNVParam = new CNV();
                            oCNVParam.sName = oBOI.AttributeI("FKiProductVersionID").sValue;
                            oCNVParam.sValue = oBOI.AttributeI("FKiSubQSInstanceIDXIGUID").sValue;
                            oCNVParams.Add(oCNVParam);
                            XIIBO oBO = new XIIBO();
                            oBO.Delete(oBOI);
                        }
                    }
                }
            }
            var Content = "";
            var sMergeSummaryID = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|iMergeQSSummaryID}");
            int iMergeSummaryID = 0;
            if (int.TryParse(sMergeSummaryID, out iMergeSummaryID))
            {
                var oBOI = oXII.BOI("MergeQsSummary_T", iMergeSummaryID.ToString(), "Create");
                if (oBOI != null && oBOI.Attributes != null && oBOI.Attributes.ContainsKey("scontent"))
                {
                    Content = oBOI.Attributes["scontent"].sValue;
                }
            }
            var sourceD = (XIDSource)oCache.GetObjectFromCache("source", "", oQSI.FKiSourceID.ToString());
            //var SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
            string sPrefix = string.Empty;
            //if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sprefixcode"))
            //{
            sPrefix = sourceD.sPrefixCode;
            //}
            string sButtonType = (string)oCache.GetObjectFromCache(XIConstant.CacheConfig, ApplicationID + "_" + OrganizationID + "_CodeButtonType");
            int iButtonType = 0;

            if (TransactionType == "MTA")
            {
                Info.Add("Started MTA Execution");
                if (ProductVersionID != null)
                {
                    XIInfraScript oScript = new XIInfraScript();
                    XID1Click PV1Click = new XID1Click();
                    var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "MTA Script");
                    oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> nParams = new List<CNV>();
                    CNV oNV = new CNV();
                    oNV.sName = "{XIP|ProductVersionID}";
                    oNV.sValue = ProductVersionID.ToString();
                    nParams.Add(oNV);
                    nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                    var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, nParams);
                    PV1Click.Query = oQuery;
                    PV1Click.Name = "ProductVersion_T";
                    var oOneClick = PV1Click.OneClick_Execute();
                    foreach (var item1 in oOneClick.Values)
                    {
                        var ProductQuery = "select * from product where id = " + item1.Attributes["product"].sValue;
                        PV1Click.Query = ProductQuery;
                        PV1Click.Name = "Product";
                        PV1Click.BOIDXIGUID = new Guid("B5917EAB-E916-4BD9-BD0E-4F643B512D40");
                        var ProductBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Product", null);
                        PV1Click.BOD = ProductBOD;
                        var oProductClick = PV1Click.OneClick_Execute().FirstOrDefault();
                        var PParams = new Dictionary<string, object>();
                        var sProductName = oProductClick.Value.Attributes["sname"].sValue;
                        var sProductCode = oProductClick.Value.Attributes["sProductcode"].sValue;
                        XIIBO oBO = new XIIBO();
                        oBO.BOD = BOD;
                        oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                        oBO.Attributes["FKiQSInstanceIDXIGUID"] = new XIIAttribute { sName = "FKiQSInstanceIDXIGUID", sValue = InsGUID.ToString(), bDirty = true };
                        oBO.Attributes["FKiLeadID"] = new XIIAttribute { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true };
                        oBO.Attributes["sInsurer"] = new XIIAttribute { sName = "sInsurer", sValue = sProductName, bDirty = true };
                        oBO.Attributes["FKiInsurerID"] = new XIIAttribute { sName = "FKiInsurerID", sValue = oProductClick.Value.Attributes["fkisupplierid"].sValue, bDirty = true };
                        oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                        oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "20", bDirty = true };
                        oBO.Attributes["sExternalRefID"] = new XIIAttribute { sName = "sExternalRefID", sValue = oQSI.sExternalRefID, bDirty = true };
                        oBO.Attributes["sTypeOfCover"] = new XIIAttribute { sName = "sTypeOfCover", sValue = oQSI.XIIValues("sTypeOfCoverUpdated"), bDirty = true };
                        oBO.Attributes["ID"] = new XIIAttribute { sName = "ID", bDirty = true };
                        oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sName, bDirty = true };
                        oBO.Attributes["iQSType"] = new XIIAttribute { sName = "iQSType", sValue = iQSType.ToString(), bDirty = true };
                        oBO.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = bIsVisibleUser.ToString(), bDirty = true };
                        oBO.Attributes["sSummaryContent"] = new XIIAttribute { sName = "sSummaryContent", bDirty = true, sValue = Content };
                        oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rGrossPremium"] = new XIIAttribute { sName = "rGrossPremium", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = "0.00", bDirty = true };
                        oBO.Attributes["bIsCoverAbroad"] = new XIIAttribute { sName = "bIsCoverAbroad", sValue = oProductClick.Value.Attributes["biscoverabroad"].sValue, bDirty = true };
                        oBO.Attributes["zDefaultDeposit"] = new XIIAttribute { sName = "zDefaultDeposit", sValue = "0.00", bDirty = true };
                        oBO.Attributes["zDefaultAdmin"] = new XIIAttribute { sName = "zDefaultAdmin", sValue = oProductClick.Value.Attributes["zdefaultadmin"].sValue, bDirty = true };
                        oBO.Attributes["rInsurerCharge"] = new XIIAttribute { sName = "rInsurerCharge", sValue = oProductClick.Value.Attributes["rinsurercharge"].sValue, bDirty = true };
                        oBO.Attributes["rMonthlyPrice"] = new XIIAttribute { sName = "rMonthlyPrice", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rMonthlyTotal"] = new XIIAttribute { sName = "rMonthlyTotal", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rPremiumFinanceAmount"] = new XIIAttribute { sName = "rPremiumFinanceAmount", sValue = "0.00", bDirty = true };
                        oBO.Attributes["CreatedTime"] = new XIIAttribute { sName = "CreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };

                        var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                        oBO.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                        //string sRef = RandomNumber(7);
                        //oBO.Attributes["sRefID"] = new XIIAttribute { sName = "sRefID", sValue = sPrefix + sRef, bDirty = true };
                        oBO.Attributes["zCommission"] = new XIIAttribute { sName = "zCommission", sValue = oProductClick.Value.Attributes["zCommission"].sValue, bDirty = true };
                        oBO.Attributes["iCommissionType"] = new XIIAttribute { sName = "iCommissionType", sValue = oProductClick.Value.Attributes["iCommissionType"].sValue, bDirty = true };
                        oBO.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iScriptType.ToString(), bDirty = true };
                        oBO.Attributes["FKiClassID"] = new XIIAttribute { sName = "FKiClassID", sValue = sFKiClassID, bDirty = true };
                        oBO.Attributes["FKiMTAQSInstanceID"] = new XIIAttribute { sName = "FKiMTAQSInstanceID", sValue = oLeadI.AttributeI("FKiMainQSIID").sValue, bDirty = true };
                        oBO.Attributes["FKiMTAQSInstanceIDXIGUID"] = new XIIAttribute { sName = "FKiMTAQSInstanceIDXIGUID", sValue = oLeadI.AttributeI("FKiMainQSIIDXIGUID").sValue, bDirty = true };
                        if (oProductClick.Value.Attributes.ContainsKey("iButtonType"))
                        {
                            var sButtonTypeOnProduct = oProductClick.Value.Attributes["iButtonType"].sValue;
                            int.TryParse(sButtonTypeOnProduct, out iButtonType);
                        }
                        if (iButtonType == 0 && sButtonType != null)
                        {
                            if (sButtonType.ToLower() == "addtobasket")
                            {
                                iButtonType = 20;
                            }
                            else
                            {
                                iButtonType = 10;
                            }
                        }
                        oBO.Attributes["iButtonType"] = new XIIAttribute { sName = "iButtonType", sValue = iButtonType.ToString(), bDirty = true };
                        oBOIList.Add(oBO);
                    }
                }
            }
            else
            {
                Dictionary<string, object> Params = new Dictionary<string, object>();
                Params["Name"] = "Product";
                XIInfraScript oScript = new XIInfraScript();
                //Getting Product table database
                //Getting Active scripts
                List<CNV> oCNV = new List<CNV>();
                //int iFKiClassID = 0;
                if (oQSDefinition.FKiClassID == 0)
                {
                    sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                }
                else
                {
                    sFKiClassID = oQSDefinition.FKiClassID.ToString();
                }
                oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                string sQuery = "Active ProductsList";
                if (iQSType == 20)
                {
                    sQuery = "Public Active ProductsList";
                }
                var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sQuery);
                oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                XIDStructure oStructure = new XIDStructure();
                //oD1Click.Query = o1ClickI.Query;
                oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, oCNV);
                oD1Click.Name = "Product";
                var result = oD1Click.OneClick_Execute();
                foreach (var item in result.Values)
                {
                    var ProductID = item.Attributes["ID"].sValue;
                    List<CNV> nParams = new List<CNV>();
                    nParams.Add(new CNV { sName = "{XIP|dPolicyDate}", sValue = dtInsuranceCoverStartDate });
                    nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = ProductID });
                    nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                    //Getting scripts with version
                    var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "ProductVersion Scripts");
                    oD1Click = (XID1Click)oProductVersion1ClickI.Clone(oProductVersion1ClickI);
                    oD1Click.Name = "productversion_t";
                    oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(oProductVersion1ClickI.Query, nParams);
                    var oOneClick = oD1Click.OneClick_Execute(null, oD1Click);
                    foreach (var item1 in oOneClick.Values)
                    {
                        XIIBO oBO = new XIIBO();
                        oBO.BOD = BOD;
                        oBO.Attributes["FKiQSInstanceIDXIGUID"] = new XIIAttribute { sName = "FKiQSInstanceIDXIGUID", sValue = InsGUID.ToString(), bDirty = true };
                        oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                        oBO.Attributes["sInsurer"] = new XIIAttribute { sName = "sInsurer", sValue = item.Attributes["name"].sValue, bDirty = true };
                        oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                        oBO.Attributes["FKiInsurerID"] = new XIIAttribute { sName = "FKiInsurerID", sValue = item.Attributes["supplierid"].sValue, bDirty = true };
                        oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "110", bDirty = true };
                        oBO.Attributes["sExternalRefID"] = new XIIAttribute { sName = "sExternalRefID", sValue = oQSI.sExternalRefID, bDirty = true };
                        oBO.Attributes["sTypeOfCover"] = new XIIAttribute { sName = "sTypeOfCover", sValue = oQSI.XIIValues("sTypeofCoverUpdated"), bDirty = true };
                        oBO.Attributes["FKiLeadID"] = new XIIAttribute { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true };
                        if (oCNVParams.Any(x => x.sName == item1.AttributeI("ID").sValue))
                        {
                            oBO.Attributes["FKiSubQSInstanceIDXIGUID"] = new XIIAttribute { sName = "FKiSubQSInstanceIDXIGUID", sValue = oCNVParams.Where(x => x.sName == item1.AttributeI("ID").sValue).Select(t => t.sValue).FirstOrDefault(), bDirty = true };
                        }
                        double rDefaultPrice = 0;
                        if (item1.Attributes.ContainsKey("default price"))
                        {
                            double.TryParse(item1.Attributes["default price"].sValue, out rDefaultPrice);
                        }
                        oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["rGrossPremium"] = new XIIAttribute { sName = "rGrossPremium", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["rQuotePremium"] = new XIIAttribute { sName = "rQuotePremium", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["bIsCoverAbroad"] = new XIIAttribute { sName = "bIsCoverAbroad", sValue = item.Attributes["CoverAbroad"].sValue, bDirty = true };
                        oBO.Attributes["zDefaultDeposit"] = new XIIAttribute { sName = "zDefaultDeposit", sValue = "0.00", bDirty = true };
                        oBO.Attributes["zDefaultAdmin"] = new XIIAttribute { sName = "zDefaultAdmin", sValue = item.Attributes["DefaultAdmin"].sValue, bDirty = true };
                        oBO.Attributes["rMonthlyPrice"] = new XIIAttribute { sName = "rMonthlyPrice", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rMonthlyTotal"] = new XIIAttribute { sName = "rMonthlyTotal", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rPremiumFinanceAmount"] = new XIIAttribute { sName = "rPremiumFinanceAmount", sValue = "0.00", bDirty = true };
                        oBO.Attributes["CreatedTime"] = new XIIAttribute { sName = "CreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                        oBO.Attributes["iQSType"] = new XIIAttribute { sName = "iQSType", sValue = iQSType.ToString(), bDirty = true };
                        oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sName, bDirty = true };
                        var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                        oBO.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                        oBO.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = bIsVisibleUser.ToString(), bDirty = true };
                        oBO.Attributes["ID"] = new XIIAttribute { sName = "ID", bDirty = true };
                        oBO.Attributes["sSummaryContent"] = new XIIAttribute { sName = "sSummaryContent", bDirty = true, sValue = Content };
                        //string sRef = RandomNumber(7);
                        //oBO.Attributes["sRefID"] = new XIIAttribute { sName = "sRefID", sValue = sPrefix + sRef, bDirty = true };
                        oBO.Attributes["rInsurerCharge"] = new XIIAttribute { sName = "rInsurerCharge", sValue = item.Attributes["rinsurercharge"].sValue, bDirty = true };
                        oBO.Attributes["zCommission"] = new XIIAttribute { sName = "zCommission", sValue = item.Attributes["zCommission"].sValue, bDirty = true };
                        oBO.Attributes["iCommissionType"] = new XIIAttribute { sName = "iCommissionType", sValue = item.Attributes["iCommissionType"].sValue, bDirty = true };
                        oBO.Attributes["FKiClassID"] = new XIIAttribute { sName = "FKiClassID", sValue = sFKiClassID, bDirty = true };
                        oBO.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iScriptType.ToString(), bDirty = true };
                        oBO.Attributes["XIDeleted"] = new XIIAttribute { sName = "XIDeleted", sValue = "0", bDirty = true };
                        oBO.Attributes["iCreatedWho"] = new XIIAttribute { sName = "iCreatedWho", sValue = UserID, bDirty = true };
                        oBO.Attributes["FKiOrgID"] = new XIIAttribute { sName = "FKiOrgID", sValue = OrganizationID, bDirty = true };
                        if (item.Attributes.ContainsKey("iButtonType"))
                        {
                            var sButtonTypeOnProduct = item.Attributes["iButtonType"].sValue;
                            int.TryParse(sButtonTypeOnProduct, out iButtonType);
                        }
                        if (iButtonType == 0 && sButtonType != null)
                        {
                            if (sButtonType.ToLower() == "addtobasket")
                            {
                                iButtonType = 20;
                            }
                            else
                            {
                                iButtonType = 10;
                            }
                        }
                        oBO.Attributes["iButtonType"] = new XIIAttribute { sName = "iButtonType", sValue = iButtonType.ToString(), bDirty = true };
                        oBOIList.Add(oBO);
                    }
                }
            }
            XIIBO xibulk = new XIIBO();
            if (oBOIList.Count > 0)
            {
                System.Data.DataTable dtbulk = xibulk.MakeBulkSqlTable(oBOIList);
                xibulk.SaveBulk(dtbulk, oBOIList[0].BOD.iDataSourceXIGUID.ToString(), oBOIList[0].BOD.TableName);
            }
            //ExeThread(oParams);
            return oCResult;
        }

        public CResult ExecuteMTScript(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            List<string> Info = new List<string>();
            Info.Add("ExecuteScript Method Started");
            //try
            //{
            //    CResult oresult = new CResult();
            XIInfraCache oCache = new XIInfraCache();
            var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            if (sSessionID != "API")
                sSessionID = HttpContext.Current.Session.SessionID;
            string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            //    string sCustomerStartRef = oParams.Where(m => m.sName.ToLower() == "sCustomerStartReference".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sScriptType = oParams.Where(m => m.sName.ToLower() == "sScriptType".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string ApplicationID = oParams.Where(m => m.sName.ToLower() == "iApplicationID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string OrganizationID = oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            //    int iCustomerID = 0;
            XID1Click oD1Click = new XID1Click();
            int iInstanceID = 0;

            if (int.TryParse(iID, out iInstanceID))
            {
            }
            int iScriptType = 10;
            if (!string.IsNullOrEmpty(sScriptType) && sScriptType.ToLower() == "partial")
            {
                iScriptType = 20;
            }
            XIIXI oXII = new XIIXI();
            List<CNV> oWhrParams = new List<CNV>();
            oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = iID });
            var oLeadI = oXII.BOI("Lead_T", "", "Create", oWhrParams);
            int iLeadID = 0;
            if (oLeadI != null && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
            {
                if (int.TryParse(oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue, out iLeadID))
                { }
            }
            XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iID);
            var TransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
            var ProductVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}");
            var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
            string dtInsuranceCoverStartDate = string.Empty;
            dtInsuranceCoverStartDate = oQSI.XIIValues("dCoverStart");//"10/30/2018";
            if (string.IsNullOrEmpty(dtInsuranceCoverStartDate))
            {
                dtInsuranceCoverStartDate = oQSI.XIIValues("MTEffctiveFrom");//"10/30/2018";
            }

            //string dtInsuranceCoverStartDate = oQSI.XIIValues("dMTEffctiveDate");//"10/30/2018";
            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|dPolicyDate}", dtInsuranceCoverStartDate, null, null);
            string PFScheme = oQSI.XIIValues("sSchemeRef");
            string sName = oQSI.XIIValues("sMTForeName") + " " + oQSI.XIIValues("MTLastName");
            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}", PFScheme, null, null);
            List<XIIBO> oBOIList = new List<XIIBO>();
            var BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Aggregations");
            int iQSType = 0;
            bool bIsVisibleUser = false;
            if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal")
            {
                iQSType = 10;
            }
            else
            {
                iQSType = 20;
                bIsVisibleUser = true;
            }
            XIInfraUsers oUserD = new XIInfraUsers();
            oUserD.sUserName = oQSI.XIIValues("MTEmailAddress");
            if (oUserD.sUserName == "")
            {
                string sFunction = "xi.s|{xi.a|'XIConfig_T','ConfigEmail','sValue','','sName'}";
                CResult oCR = new CResult();
                XIDScript oXIScript = new XIDScript();
                oXIScript.sScript = sFunction.ToString();
                oCR = oXIScript.Execute_Script("", "");
                if (oCR.bOK && oCR.oResult != null)
                {
                    oUserD.sUserName = oCR.oResult.ToString(); //Get_TaxRateIPT();  // hard coded value
                }
            }
            var UserDetails = oUserD.Get_UserDetails(sDataBase);
            if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
            {
                //Info.Add("Checked User Exists or not and User exists");
                oUserD = (XIInfraUsers)UserDetails.oResult;
            }
            QueryEngine oAggregationsQE = new QueryEngine();
            List<XIWhereParams> oWParams = new List<XIWhereParams>();
            List<SqlParameter> SqlParams = new List<SqlParameter>();
            oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = iID });
            oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = iScriptType.ToString() });
            SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = iID });
            SqlParams.Add(new SqlParameter { ParameterName = "@iType", Value = iScriptType.ToString() });
            oAggregationsQE.AddBO("Aggregations", "", oWParams);
            CResult oCresult1 = oAggregationsQE.BuildQuery();
            if (oCresult1.bOK && oCresult1.oResult != null)
            {
                var sSql1 = (string)oCresult1.oResult;
                ExecutionEngine oEE = new ExecutionEngine();
                oEE.XIDataSource = oAggregationsQE.XIDataSource;
                oEE.sSQL = sSql1;
                oEE.SqlParams = SqlParams;
                var oQResult = oEE.Execute();
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    var oBOD1 = oAggregationsQE.QParams.FirstOrDefault().BOD;
                    oBOIList1.ForEach(x => x.BOD = oBOD1);
                    if (oBOIList1 != null && oBOIList1.Count > 0)
                    {
                        foreach (var oBOI in oBOIList1)
                        {
                            XIIBO oBO = new XIIBO();
                            oBO.Delete(oBOI);
                        }
                    }
                }
            }
            var Content = "";
            var sMergeSummaryID = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|iMergeQSSummaryID}");
            int iMergeSummaryID = 0;
            if (int.TryParse(sMergeSummaryID, out iMergeSummaryID))
            {
                var oBOI = oXII.BOI("MergeQsSummary_T", iMergeSummaryID.ToString(), "Create");
                if (oBOI != null && oBOI.Attributes != null && oBOI.Attributes.ContainsKey("scontent"))
                {
                    Content = oBOI.Attributes["scontent"].sValue;
                }
            }
            var sourceD = (XIDSource)oCache.GetObjectFromCache("source", "", oQSI.FKiSourceID.ToString());
            //var SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
            string sPrefix = string.Empty;
            //if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sprefixcode"))
            //{
            sPrefix = sourceD.sPrefixCode;
            //}
            string sButtonType = (string)oCache.GetObjectFromCache(XIConstant.CacheConfig, ApplicationID + "_" + OrganizationID + "_CodeButtonType");
            int iButtonType = 0;

            if (TransactionType == "MTA")
            {
                Info.Add("Started MTA Execution");
                if (ProductVersionID != null)
                {
                    XIInfraScript oScript = new XIInfraScript();
                    XID1Click PV1Click = new XID1Click();
                    var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "MTA Script");
                    oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> nParams = new List<CNV>();
                    CNV oNV = new CNV();
                    oNV.sName = "{XIP|ProductVersionID}";
                    oNV.sValue = ProductVersionID.ToString();
                    nParams.Add(oNV);
                    var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, nParams);
                    PV1Click.Query = oQuery;
                    PV1Click.Name = "ProductVersion_T";
                    var oOneClick = PV1Click.OneClick_Execute();
                    foreach (var item1 in oOneClick.Values)
                    {
                        var ProductQuery = "select * from product where id = " + item1.Attributes["product"].sValue;
                        PV1Click.Query = ProductQuery;
                        PV1Click.Name = "Product";
                        var oProductClick = PV1Click.OneClick_Execute().FirstOrDefault();
                        var PParams = new Dictionary<string, object>();
                        var sProductName = oProductClick.Value.Attributes["sname"].sValue;
                        var sProductCode = oProductClick.Value.Attributes["sProductcode"].sValue;
                        XIIBO oBO = new XIIBO();
                        oBO.BOD = BOD;
                        oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                        oBO.Attributes["FKiLeadID"] = new XIIAttribute { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true };
                        oBO.Attributes["sInsurer"] = new XIIAttribute { sName = "sInsurer", sValue = sProductName, bDirty = true };
                        oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                        oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "20", bDirty = true };
                        oBO.Attributes["sExternalRefID"] = new XIIAttribute { sName = "sExternalRefID", sValue = oQSI.sExternalRefID, bDirty = true };
                        oBO.Attributes["sTypeOfCover"] = new XIIAttribute { sName = "sTypeOfCover", sValue = oQSI.XIIValues("sTypeOfCoverUpdated"), bDirty = true };
                        oBO.Attributes["ID"] = new XIIAttribute { sName = "ID", bDirty = true };
                        oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sName, bDirty = true };
                        oBO.Attributes["iQSType"] = new XIIAttribute { sName = "iQSType", sValue = iQSType.ToString(), bDirty = true };
                        oBO.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = bIsVisibleUser.ToString(), bDirty = true };
                        oBO.Attributes["sSummaryContent"] = new XIIAttribute { sName = "sSummaryContent", bDirty = true, sValue = Content };
                        oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rGrossPremium"] = new XIIAttribute { sName = "rGrossPremium", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = "0.00", bDirty = true };
                        oBO.Attributes["bIsCoverAbroad"] = new XIIAttribute { sName = "bIsCoverAbroad", sValue = oProductClick.Value.Attributes["biscoverabroad"].sValue, bDirty = true };
                        oBO.Attributes["zDefaultDeposit"] = new XIIAttribute { sName = "zDefaultDeposit", sValue = "0.00", bDirty = true };
                        oBO.Attributes["zDefaultAdmin"] = new XIIAttribute { sName = "zDefaultAdmin", sValue = oProductClick.Value.Attributes["zdefaultadmin"].sValue, bDirty = true };
                        oBO.Attributes["rInsurerCharge"] = new XIIAttribute { sName = "rInsurerCharge", sValue = oProductClick.Value.Attributes["rinsurercharge"].sValue, bDirty = true };
                        oBO.Attributes["rMonthlyPrice"] = new XIIAttribute { sName = "rMonthlyPrice", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rMonthlyTotal"] = new XIIAttribute { sName = "rMonthlyTotal", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rPremiumFinanceAmount"] = new XIIAttribute { sName = "rPremiumFinanceAmount", sValue = "0.00", bDirty = true };
                        oBO.Attributes["CreatedTime"] = new XIIAttribute { sName = "CreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                        var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                        oBO.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                        string sRef = RandomNumber(7);
                        oBO.Attributes["sRefID"] = new XIIAttribute { sName = "sRefID", sValue = sPrefix + sRef, bDirty = true };
                        oBO.Attributes["zCommission"] = new XIIAttribute { sName = "zCommission", sValue = oProductClick.Value.Attributes["zCommission"].sValue, bDirty = true };
                        oBO.Attributes["iCommissionType"] = new XIIAttribute { sName = "iCommissionType", sValue = oProductClick.Value.Attributes["iCommissionType"].sValue, bDirty = true };
                        oBO.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iScriptType.ToString(), bDirty = true };
                        oBO.Attributes["FKiClassID"] = new XIIAttribute { sName = "FKiClassID", sValue = sFKiClassID, bDirty = true };
                        if (oProductClick.Value.Attributes.ContainsKey("iButtonType"))
                        {
                            var sButtonTypeOnProduct = oProductClick.Value.Attributes["iButtonType"].sValue;
                            int.TryParse(sButtonTypeOnProduct, out iButtonType);
                        }
                        if (iButtonType == 0 && sButtonType != null)
                        {
                            if (sButtonType.ToLower() == "addtobasket")
                            {
                                iButtonType = 20;
                            }
                            else
                            {
                                iButtonType = 10;
                            }
                        }
                        oBO.Attributes["iButtonType"] = new XIIAttribute { sName = "iButtonType", sValue = iButtonType.ToString(), bDirty = true };
                        oBOIList.Add(oBO);
                    }
                }
            }
            else
            {
                Dictionary<string, object> Params = new Dictionary<string, object>();
                Params["Name"] = "Product";
                XIInfraScript oScript = new XIInfraScript();
                //Getting Product table database
                //Getting Active scripts
                List<CNV> oCNV = new List<CNV>();
                oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                string sQuery = "Active ProductsList";
                if (iQSType == 20)
                {
                    sQuery = "Public Active ProductsList";
                }
                var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sQuery);
                oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                XIDStructure oStructure = new XIDStructure();
                //oD1Click.Query = o1ClickI.Query;
                oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, oCNV);
                oD1Click.Name = "Product";
                var result = oD1Click.OneClick_Execute();
                foreach (var item in result.Values)
                {
                    var ProductID = item.Attributes["ID"].sValue;
                    List<CNV> nParams = new List<CNV>();
                    nParams.Add(new CNV { sName = "{XIP|dPolicyDate}", sValue = dtInsuranceCoverStartDate });
                    nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = ProductID });
                    nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                    //Getting scripts with version
                    var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "ProductVersion Scripts");
                    oD1Click = (XID1Click)oProductVersion1ClickI.Clone(oProductVersion1ClickI);
                    oD1Click.Name = "productversion_t";
                    oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(oProductVersion1ClickI.Query, nParams);
                    var oOneClick = oD1Click.OneClick_Execute(null, oD1Click);
                    foreach (var item1 in oOneClick.Values)
                    {
                        XIIBO oBO = new XIIBO();
                        oBO.BOD = BOD;
                        oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceIDXIGUID", sValue = iID, bDirty = true };
                        oBO.Attributes["sInsurer"] = new XIIAttribute { sName = "sInsurer", sValue = item.Attributes["name"].sValue, bDirty = true };
                        oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                        var CalType = item1.Attributes["Calculation"].iValue;
                        oBO.Attributes["sExternalRefID"] = new XIIAttribute { sName = "sExternalRefID", sValue = oQSI.sExternalRefID, bDirty = true };
                        oBO.Attributes["sTypeOfCover"] = new XIIAttribute { sName = "sTypeOfCover", sValue = oQSI.XIIValues("sTypeofCoverUpdated"), bDirty = true };
                        oBO.Attributes["FKiLeadID"] = new XIIAttribute { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true };
                        double rDefaultPrice = 0;
                        if (item1.Attributes.ContainsKey("default price"))
                        {
                            double.TryParse(item1.Attributes["default price"].sValue, out rDefaultPrice);
                        }
                        if (CalType == 10)
                        {
                            oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "40", bDirty = true };
                        }
                        else
                        {
                            oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "110", bDirty = true };
                        }
                        oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["rGrossPremium"] = new XIIAttribute { sName = "rGrossPremium", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["rQuotePremium"] = new XIIAttribute { sName = "rQuotePremium", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = rDefaultPrice.ToString(), bDirty = true };
                        oBO.Attributes["bIsCoverAbroad"] = new XIIAttribute { sName = "bIsCoverAbroad", sValue = item.Attributes["CoverAbroad"].sValue, bDirty = true };
                        oBO.Attributes["zDefaultDeposit"] = new XIIAttribute { sName = "zDefaultDeposit", sValue = "0.00", bDirty = true };
                        oBO.Attributes["zDefaultAdmin"] = new XIIAttribute { sName = "zDefaultAdmin", sValue = item.Attributes["DefaultAdmin"].sValue, bDirty = true };
                        oBO.Attributes["rMonthlyPrice"] = new XIIAttribute { sName = "rMonthlyPrice", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rMonthlyTotal"] = new XIIAttribute { sName = "rMonthlyTotal", sValue = "0.00", bDirty = true };
                        oBO.Attributes["rPremiumFinanceAmount"] = new XIIAttribute { sName = "rPremiumFinanceAmount", sValue = "0.00", bDirty = true };
                        oBO.Attributes["CreatedTime"] = new XIIAttribute { sName = "CreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                        oBO.Attributes["iQSType"] = new XIIAttribute { sName = "iQSType", sValue = iQSType.ToString(), bDirty = true };
                        oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sName, bDirty = true };
                        var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                        oBO.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                        oBO.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = bIsVisibleUser.ToString(), bDirty = true };
                        oBO.Attributes["ID"] = new XIIAttribute { sName = "ID", bDirty = true };
                        oBO.Attributes["sSummaryContent"] = new XIIAttribute { sName = "sSummaryContent", bDirty = true, sValue = Content };
                        //string sRef = RandomNumber(7);
                        //oBO.Attributes["sRefID"] = new XIIAttribute { sName = "sRefID", sValue = sPrefix + sRef, bDirty = true };
                        oBO.Attributes["rInsurerCharge"] = new XIIAttribute { sName = "rInsurerCharge", sValue = item.Attributes["rinsurercharge"].sValue, bDirty = true };
                        oBO.Attributes["zCommission"] = new XIIAttribute { sName = "zCommission", sValue = item.Attributes["zCommission"].sValue, bDirty = true };
                        oBO.Attributes["iCommissionType"] = new XIIAttribute { sName = "iCommissionType", sValue = item.Attributes["iCommissionType"].sValue, bDirty = true };
                        oBO.Attributes["FKiClassID"] = new XIIAttribute { sName = "FKiClassID", sValue = sFKiClassID, bDirty = true };
                        oBO.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iScriptType.ToString(), bDirty = true };
                        if (item.Attributes.ContainsKey("iButtonType"))
                        {
                            var sButtonTypeOnProduct = item.Attributes["iButtonType"].sValue;
                            int.TryParse(sButtonTypeOnProduct, out iButtonType);
                        }
                        if (iButtonType == 0 && sButtonType != null)
                        {
                            if (sButtonType.ToLower() == "addtobasket")
                            {
                                iButtonType = 20;
                            }
                            else
                            {
                                iButtonType = 10;
                            }
                        }
                        oBO.Attributes["iButtonType"] = new XIIAttribute { sName = "iButtonType", sValue = iButtonType.ToString(), bDirty = true };
                        oBO.Attributes["FKiUserID"] = new XIIAttribute { sName = "FKiUserID", sValue = oUserD.UserID.ToString(), bDirty = true };
                        oBO.Attributes["FKiCreatedUserID"] = new XIIAttribute { sName = "FKiCreatedUserID", sValue = sUserID, bDirty = true };
                        oBOIList.Add(oBO);
                    }
                }
            }
            XIIBO xibulk = new XIIBO();
            System.Data.DataTable dtbulk = xibulk.MakeBulkSqlTable(oBOIList);
            xibulk.SaveBulk(dtbulk, oBOIList[0].BOD.iDataSourceXIGUID.ToString(), oBOIList[0].BOD.TableName);
            //ExeThread(oParams);
            return oCResult;
        }

        public CResult InsertPolicy(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iQSInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var oPolicy = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>(StringComparer.CurrentCultureIgnoreCase);
                int iParentPolicy = 0;
                var oBOI = oIXI.BOI("Aggregations", QuoteID);
                var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                var sTransType = oCache.Get_ParamVal(sSessionID, sGUID, null, "-transtype");
                var sPolicyType = string.Empty;
                var sPolicyVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}");
                string sUserName = string.Empty;
                XIInfraUsers oUser = new XIInfraUsers();
                CUserInfo oInfo = oUser.Get_UserInfo();
                if (oInfo.iRoleID != 55)
                {
                    sUserName = oInfo.sName == null ? null : (oInfo.sName.Length >= 15 ? oInfo.sName.Substring(0, 14) : oInfo.sName);
                }
                else
                {
                    sUserName = "Client";
                }
                if (int.TryParse(oBOI.AttributeI("FKiQSInstanceID").sValue, out iQSInstanceID))
                { }
                XIIXI oXII = new XIIXI();
                XIIQS oQsInstance = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                oQsInstance.ID = iQSInstanceID;
                var sCoverStart = oQsInstance.XIIValues("dCoverStart");
                if (int.TryParse(PolicyID, out iPolicyID))
                {
                    if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                    {
                        var oPolicyI = oIXI.BOI("ACPolicy_T", PolicyID);
                        var iPolicyproduct = oPolicyI.Attributes["FKiProductID"].sValue;
                        var ProductVersionID = oBOI.Attributes["FKiProductVersionID"].sValue;
                        // loading Product Version bo instance 
                        var oProductVersionI = oIXI.BOI("ProductVersion_T", ProductVersionID);
                        if (oProductVersionI.Attributes != null)
                        {
                            if (oProductVersionI.Attributes.ContainsKey("FKiProductID"))
                            {
                                var iProductID = oProductVersionI.Attributes["FKiProductID"].sValue;
                                if (iProductID == iPolicyproduct)
                                {
                                    if (!OQSD.ContainsKey("iStatus"))
                                    {
                                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "60" };
                                    }
                                    if (!OQSD.ContainsKey("iPolicyStatus"))
                                    {
                                        OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "60" };
                                    }
                                    if (!OQSD.ContainsKey("FKsUserID"))
                                    {
                                        OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = sUserName };
                                    }
                                    sPolicyType = "Renewal";
                                }
                                else
                                {
                                    iParentPolicy = iPolicyID;
                                    oPolicyI.Attributes["iStatus"].sValue = "40";
                                    oPolicyI.Attributes["iStatus"].bDirty = true;
                                    oPolicyI.Save(oPolicyI);
                                    iPolicyID = 0;
                                    PolicyID = null;
                                    sPolicyVersionID = null;
                                    if (!OQSD.ContainsKey("iStatus"))
                                    {
                                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "70" };
                                    }
                                    if (!OQSD.ContainsKey("iPolicyStatus"))
                                    {
                                        OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "70" };
                                    }
                                    sPolicyType = "Rebroke";
                                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}", "10", null, null);
                                    //TimeSpan CoverEndTime = new TimeSpan();
                                    //TimeSpan.TryParse(oPolicyI.Attributes["tCoverEnd"].sValue, out CoverEndTime);
                                    var sRenewalStart = oBOI.ConvertToDtTime(oPolicyI.Attributes["dCoverEnd"].sValue);
                                    var sQSRenewalStart = oBOI.ConvertToDtTime(sCoverStart);
                                    var renewalstartDate = sRenewalStart;
                                    if (sQSRenewalStart > sRenewalStart)
                                    {
                                        renewalstartDate = sQSRenewalStart;
                                    }

                                    if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                                    {
                                        OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = renewalstartDate.Date.ToString() };
                                    }
                                    //if (!OQSD.ContainsKey("tCurrentPolicyCoverStart"))
                                    //{
                                    //    OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = sRenewalStart.TimeOfDay.ToString() };
                                    //}
                                    if (!OQSD.ContainsKey("dCoverStart"))
                                    {
                                        OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = renewalstartDate.Date.ToString() };
                                    }
                                    //if (!OQSD.ContainsKey("tCoverStart"))
                                    //{
                                    //    OQSD["tCoverStart"] = new CNV { sName = "tCoverStart", sValue = sRenewalStart.TimeOfDay.ToString() };
                                    //}
                                }
                            }
                        }
                    }

                }
                string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + "] - PolicyID :" + PolicyID;
                oXID.SaveErrortoDB(oResult, iQSInstanceID);
                int iInsatnceID = 0;
                var PolicySequenceNumber = "";
                int iSupplierID = 0;
                string sCoverEnd = string.Empty;
                var ProductID = ""; var iOldProductID = 0;
                var sAddress = string.Empty;
                string ProductCoverEnd = string.Empty;
                int iAddDaysToCoverEnd = 0;
                var tCoverEnd = "00:00:00";
                int iAccountCategory = 0;
                int iPaymentMethodType = 0;
                int iQuoteType = 0;
                int iQSType = 0;

                List<XIIBO> oListQuotes = new List<XIIBO>();
                string sQuery = "select * from Aggregations_T where FKiQSInstanceID=" + oBOI.AttributeI("FKiQSInstanceID").sValue;
                XID1Click oXI1Click = new XID1Click();
                oXI1Click.Query = sQuery;
                oXI1Click.Name = "Aggregations";
                var Result = oXI1Click.GetList();

                if (Result.bOK || Result.oResult != null)
                {
                    oListQuotes = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                }
                List<XIIBO> oPolicyExist = new List<XIIBO>();
                List<int> QuoteIDs = new List<int>();
                foreach (var item in oListQuotes)
                {
                    QuoteIDs.Add(item.AttributeI("id").iValue);
                }
                sQuery = "select * from ACPolicy_T where FKiQuoteID in(" + string.Join(",", QuoteIDs) + ")";
                oXI1Click = new XID1Click();
                oXI1Click.Query = sQuery;
                oXI1Click.Name = "ACPolicy_T";
                Result = oXI1Click.GetList();
                if (Result.bOK || Result.oResult != null)
                {
                    oPolicyExist = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                }
                if (oPolicyExist.Count() == 0)
                {
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|Aggregations.id}", QuoteID, null, null);
                    double rFinalPremium = 0, rIPT = 0;
                    double rNetPremium = 0;
                    if (oBOI.Attributes != null)
                    {
                        var InstanceID = oBOI.Attributes.Where(m => m.Key == "FKiQSInstanceID").Select(m => m.Value.sValue).FirstOrDefault();
                        var sPaymentType = oBOI.Attributes.Where(m => m.Key == "iPaymentType").Select(m => m.Value.sValue).FirstOrDefault();
                        if (int.TryParse(sPaymentType, out iPaymentMethodType))
                        {
                        }
                        var sQuoteType = oBOI.Attributes.Where(m => m.Key == "iQuoteStatus").Select(m => m.Value.sValue).FirstOrDefault();
                        if (int.TryParse(sQuoteType, out iQuoteType))
                        {
                        }
                        //var sQSType = oBOI.Attributes.Where(m => m.Key == "iQSType").Select(m => m.Value.sValue).FirstOrDefault();
                        //if (int.TryParse(sQSType, out iQSType))
                        //{
                        //}
                        var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
                        if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal")
                        {
                            iQSType = 10;
                        }
                        else
                        {
                            iQSType = 20;
                        }
                        oResult.oTraceStack.Add(new CNV { sName = "InstanceID", sValue = "InstanceID :" + InstanceID });
                        if (InstanceID != null)
                        {
                            iInsatnceID = Convert.ToInt32(InstanceID);
                        }
                        if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rFinalPremium))
                        {
                        }
                        if (double.TryParse(oBOI.Attributes["rInterestAmount"].sValue, out rIPT))
                        {
                        }
                        rNetPremium = rFinalPremium - rIPT;
                    }

                    int iQSDID = 0;
                    string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                    if (int.TryParse(sQSDID, out iQSDID)) { }
                    //XIIQS oQsInstance = oXII.GetQuestionSetInstanceByID(iQSDID, iInsatnceID, null, 0, 0, null);

                    List<CNV> oDriverNvs = new List<CNV>();
                    oDriverNvs.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInsatnceID.ToString() });
                    oDriverNvs.Add(new CNV { sName = "bMainDriver", sValue = "1" });
                    XIIBO oDriverI = oIXI.BOI("Driver_T", "", "", oDriverNvs);
                    if (oDriverI != null && oDriverI.Attributes.Count > 0)
                    {
                        if (oDriverI.Attributes.ContainsKey("sAddressLine1"))
                        {
                            string sAddressline1 = oDriverI.Attributes["sAddressLine1"].sValue;
                            if (!string.IsNullOrEmpty(sAddressline1))
                            {
                                var sProposerAddress = string.Empty;
                                sProposerAddress += oDriverI.Attributes["sAddressLine1"].sValue;
                                if (oDriverI.Attributes.ContainsKey("sAddressLine2") && !string.IsNullOrEmpty(oDriverI.Attributes["sAddressLine2"].sValue))
                                {
                                    sProposerAddress += "," + oDriverI.Attributes["sAddressLine2"].sValue;
                                }
                                if (oDriverI.Attributes.ContainsKey("sAddressLine3") && !string.IsNullOrEmpty(oDriverI.Attributes["sAddressLine3"].sValue))
                                {
                                    sProposerAddress += "," + oDriverI.Attributes["sAddressLine3"].sValue;
                                }
                                if (oDriverI.Attributes.ContainsKey("sTown") && !string.IsNullOrEmpty(oDriverI.Attributes["sTown"].sValue))
                                {
                                    sProposerAddress += "," + oDriverI.Attributes["sTown"].sValue;
                                }
                                if (!OQSD.ContainsKey("sAddress"))
                                {
                                    OQSD["sAddress"] = new CNV { sName = "sAddress", sValue = sProposerAddress };
                                }
                            }
                        }
                        if (oDriverI.Attributes.ContainsKey("sPostcode") && !string.IsNullOrEmpty(oDriverI.Attributes["sPostcode"].sValue))
                        {
                            if (!OQSD.ContainsKey("sPostcode"))
                            {
                                OQSD["sPostcode"] = new CNV { sName = "sPostcode", sValue = oDriverI.Attributes["sPostcode"].sValue };
                            }
                        }
                        if (oDriverI.Attributes.ContainsKey("dDOB") && !string.IsNullOrEmpty(oDriverI.Attributes["dDOB"].sValue))
                        {
                            if (!OQSD.ContainsKey("dDOB"))
                            {
                                OQSD["dDOB"] = new CNV { sName = "dDOB", sValue = oDriverI.Attributes["dDOB"].sValue };
                            }
                        }
                    }
                    var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                    if (oQSDefinition != null)
                    {
                        oQsInstance.QSDefinition = oQSDefinition;
                    }
                    string sPolicyCoverStart = "";
                    var bIsWithOutPayment = oQsInstance.XIIValues("bAcceptWithOutPayment");
                    var tOldCoverEnd = "";

                    if (oBOI.Attributes != null)
                    {
                        var ProductVersionID = oBOI.Attributes["FKiProductVersionID"].sValue;
                        // loading Product Version bo instance 
                        var oProductVersionI = oIXI.BOI("ProductVersion_T", ProductVersionID);
                        if (oProductVersionI.Attributes != null)
                        {
                            if (oProductVersionI.Attributes.ContainsKey("FKiProductID"))
                            {
                                ProductID = oProductVersionI.Attributes["FKiProductID"].sValue;
                            }
                        }
                        var oProductI = oIXI.BOI("Product", ProductID);
                        tCoverEnd = oProductI.Attributes["tendtime"].sValue;
                        ProductCoverEnd = oProductI.Attributes["iadddaystoenddate"].sValue;
                        if (int.TryParse(ProductCoverEnd, out iAddDaysToCoverEnd))
                        {
                        }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iProductID}", ProductID, null, null);
                        oParams.Add(new CNV { sName = "iProductID", sValue = ProductID });
                        if (oProductI.Attributes.ContainsKey("FKiSupplierID"))
                        {
                            var SupplierID = oProductI.Attributes["FKiSupplierID"].sValue;
                            if (int.TryParse(SupplierID, out iSupplierID))
                            { }
                        }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iSupplierID}", iSupplierID.ToString(), null, null);
                        if (string.IsNullOrEmpty(PolicyID))
                        {
                            //if (oProductVersionI.Attributes != null)
                            //{

                            //    if (oProductVersionI.Attributes.ContainsKey("FKiProductID"))
                            //    {
                            //        ProductID = oProductVersionI.Attributes["FKiProductID"].sValue;
                            //    }
                            if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                            {
                                var oCResult = PolicyNoGeneration(oProductI);
                                if (oCResult.bOK && oCResult.oResult != null)
                                {
                                    PolicySequenceNumber = (string)oCResult.oResult;
                                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyNo}", PolicySequenceNumber, null, null);
                                }
                            }
                            if (!OQSD.ContainsKey("iParentID"))
                            {
                                OQSD["iParentID"] = new CNV { sName = "iParentID", sValue = iParentPolicy.ToString() };
                            }
                        }
                        else
                        {
                            var oPolicyI = oIXI.BOI("ACPolicy_T", PolicyID);
                            if (oPolicyI.Attributes.ContainsKey("dCoverEnd"))
                            {
                                sCoverEnd = oPolicyI.Attributes["dCoverEnd"].sValue;
                            }
                            if (oPolicyI.Attributes.ContainsKey("dCoverStart"))
                            {
                                sPolicyCoverStart = oPolicyI.Attributes["dCoverStart"].sValue;
                            }
                            if (oPolicyI.Attributes.ContainsKey("tCoverEnd"))
                            {
                                tOldCoverEnd = oPolicyI.Attributes["tCoverEnd"].sValue;
                            }
                            if (oPolicyI.Attributes.ContainsKey("sPolicyNo"))
                            {
                                PolicySequenceNumber = oPolicyI.Attributes["sPolicyNo"].sValue;
                            }
                            if (oPolicyI.Attributes.ContainsKey("FKiProductID"))
                            {
                                iOldProductID = Convert.ToInt32(oPolicyI.Attributes["FKiProductID"].sValue);
                            }
                            if (!OQSD.ContainsKey("iStatus") && oPolicyI.Attributes.ContainsKey("iStatus"))
                            {
                                OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = oPolicyI.Attributes["iStatus"].sValue };
                            }
                            if (!OQSD.ContainsKey("tCoverStart") && oPolicyI.Attributes.ContainsKey("tCoverStart"))
                            {
                                OQSD["tCoverStart"] = new CNV { sName = "tCoverStart", sValue = oPolicyI.Attributes["tCoverStart"].sValue };
                            }
                            if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                            {
                                if (oPolicyI.Attributes.ContainsKey("dCoverEnd")/*&& oPolicyI.Attributes.ContainsKey("tCoverEnd")*/)
                                {
                                    var sRenewalStart = oBOI.ConvertToDtTime(oPolicyI.Attributes["dCoverEnd"].sValue);
                                    var sQSRenewalStart = oBOI.ConvertToDtTime(sCoverStart);
                                    var renewalstartDate = sRenewalStart;
                                    if (sQSRenewalStart > sRenewalStart)
                                    {
                                        renewalstartDate = sQSRenewalStart;
                                    }
                                    //TimeSpan CoverEndTime = new TimeSpan();
                                    //TimeSpan.TryParse(oPolicyI.Attributes["tCoverEnd"].sValue, out CoverEndTime);
                                    //var sRenewalStart = oBOI.ConvertToDtTime(oPolicyI.Attributes["dCoverEnd"].sValue).Add(CoverEndTime).AddMinutes(1);
                                    if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                                    {
                                        OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = renewalstartDate.ToString() };
                                    }
                                    //if (!OQSD.ContainsKey("tCurrentPolicyCoverStart"))
                                    //{
                                    //    OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = sRenewalStart.TimeOfDay.ToString() };
                                    //}
                                }
                            }
                            else
                            {
                                if (!OQSD.ContainsKey("dCurrentPolicyOnCover") && oPolicyI.Attributes.ContainsKey("dCurrentPolicyOnCover"))
                                {
                                    OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = oPolicyI.Attributes["dCurrentPolicyOnCover"].sValue };
                                }
                                if (!OQSD.ContainsKey("tCurrentPolicyCoverStart") && oPolicyI.Attributes.ContainsKey("tCurrentPolicyCoverStart"))
                                {
                                    OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = oPolicyI.Attributes["tCurrentPolicyCoverStart"].sValue };
                                }
                                if (!OQSD.ContainsKey("FKsPostUserID") && oPolicyI.Attributes.ContainsKey("FKsPostUserID"))
                                {
                                    OQSD["FKsPostUserID"] = new CNV { sName = "FKsPostUserID", sValue = oPolicyI.Attributes["FKsPostUserID"].sValue };
                                }
                                if (!OQSD.ContainsKey("dCreated") && oPolicyI.Attributes.ContainsKey("dCreated"))
                                {
                                    OQSD["dCreated"] = new CNV { sName = "dCreated", sValue = oPolicyI.Attributes["dCreated"].sValue };
                                }
                                if (!OQSD.ContainsKey("dCoverEnd") && oPolicyI.Attributes.ContainsKey("dCoverEnd"))
                                {
                                    OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = oPolicyI.Attributes["dCoverEnd"].sValue };
                                }
                            }
                            sCoverStart = oQsInstance.XIIValues("dtEffectiveFrom");
                            //QueryEngine oQE = new QueryEngine();
                            //List<XIWhereParams> oWParams = new List<XIWhereParams>();
                            //oWParams.Add(new XIWhereParams { sField = "sPolicyNo", sOperator = "=", sValue = PolicySequenceNumber });
                            //oWParams.Add(new XIWhereParams { sField = "dLastInsurance", sOperator = ">", sValue = DateTime.Now.ToString() });
                            //oWParams.Add(new XIWhereParams { sField = "iStatus", sOperator = "=", sValue = "10" });
                            //oQE.AddBO("ACPolicy_T", "Create", oWParams);
                            //CResult oCresult = oQE.BuildQuery();
                            //if (oCresult.bOK && oCresult.oResult != null)
                            //{
                            //    var sSql = (string)oCresult.oResult;
                            //    ExecutionEngine oEE = new ExecutionEngine();
                            //    oEE.XIDataSource = oQE.XIDataSource;
                            //    oEE.sSQL = sSql;
                            //    var oCResult = oEE.Execute();
                            //    if (oCResult.bOK && oCResult.oResult != null)
                            //    {
                            //        var oBOIList = ((Dictionary<string, XIIBO>)oCResult.oResult).Values.ToList();
                            //        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                            //        oBOIList.ForEach(x => x.BOD = oBOD);
                            //        foreach (var instance in oBOIList)
                            //        {
                            //            if (instance.Attributes.ContainsKey("dLastInsurance"))
                            //            {
                            //                instance.Attributes["dLastInsurance"].sValue = sCoverStart;
                            //                instance.Attributes["dLastInsurance"].bDirty = true;
                            //                instance.Save(instance);
                            //            }
                            //        }
                            //    }
                            //}
                            if (!OQSD.ContainsKey("dCoverStart"))
                            {
                                OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = sPolicyCoverStart };
                            }
                            if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                            {
                                OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = sPolicyCoverStart };
                            }
                            if (!OQSD.ContainsKey("rGrossPremium"))
                            {
                                double rFinalQuote = 0;
                                double rPreviousQuote = 0;
                                double rTotalQuote = 0;
                                if (double.TryParse(oBOI.Attributes["rFinalQuote"].sValue, out rFinalQuote))
                                {
                                }
                                if (oPolicyI.Attributes.ContainsKey("rGrossPremium"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rGrossPremium"].sValue, out rPreviousQuote))
                                    {
                                    }
                                }
                                rTotalQuote = rFinalQuote + rPreviousQuote;
                                OQSD["rGrossPremium"] = new CNV { sName = "rGrossPremium", sValue = rTotalQuote.ToString() };
                            }
                            if (!OQSD.ContainsKey("rQuotePremium"))
                            {
                                double rPreviousQuotePremium = 0;
                                double rTotalQuotePremium = 0;
                                if (oPolicyI.Attributes.ContainsKey("rQuotePremium"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rQuotePremium"].sValue, out rPreviousQuotePremium))
                                    {
                                    }
                                }
                                double rQuote = 0;
                                if (double.TryParse(oBOI.Attributes["rQuotePremium"].sValue, out rQuote))
                                {
                                }
                                rTotalQuotePremium = rQuote + rPreviousQuotePremium;
                                OQSD["rQuotePremium"] = new CNV { sName = "rQuotePremium", sValue = String.Format("{0:0.00}", rTotalQuotePremium) };
                            }
                            if (!OQSD.ContainsKey("rNetPremium"))
                            {
                                double rPreviousNetPremium = 0;
                                double rTotalNetPremium = 0;
                                if (oPolicyI.Attributes.ContainsKey("rNetPremium"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rNetPremium"].sValue, out rPreviousNetPremium))
                                    {
                                    }
                                }
                                rTotalNetPremium = rNetPremium + rPreviousNetPremium;
                                OQSD["rNetPremium"] = new CNV { sName = "rNetPremium", sValue = String.Format("{0:0.00}", rTotalNetPremium) };
                            }
                            if (!OQSD.ContainsKey("rPaidAmount"))
                            {
                                double rPreviousPaidAmount = 0;
                                double rPaidAmount = 0;
                                double rTotalPaidAmount = 0;
                                if (double.TryParse(oBOI.Attributes["rPayableAmount"].sValue, out rPaidAmount))
                                {
                                }
                                if (oPolicyI.Attributes.ContainsKey("rPaidAmount"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rPaidAmount"].sValue, out rPreviousPaidAmount))
                                    {
                                    }
                                }
                                rTotalPaidAmount = rPreviousPaidAmount + rPaidAmount;
                                OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = String.Format("{0:0.00}", rTotalPaidAmount) };
                            }
                            if (!OQSD.ContainsKey("rBalance"))
                            {
                                double rPFAmount = 0;
                                double rPreviousPF = 0;
                                double rTotalPF = 0;
                                if (double.TryParse(oBOI.Attributes["rPremiumFinanceAmount"].sValue, out rPFAmount))
                                {
                                }
                                if (oPolicyI.Attributes.ContainsKey("rBalance"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rBalance"].sValue, out rPreviousPF))
                                    {
                                    }
                                }
                                rTotalPF = rPFAmount + rPreviousPF;
                                OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = rTotalPF.ToString() };
                            }
                            double rTotalPremium = 0;
                            double rPreviousPremium = 0;
                            if (!OQSD.ContainsKey("rTotalPremium"))
                            {
                                /*double rQuote = 0;double rAdmin = 0; double rAddon = 0;*/
                                if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                                {
                                }
                                if (oPolicyI.Attributes.ContainsKey("rTotalPremium"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rTotalPremium"].sValue, out rPreviousPremium))
                                    {
                                    }
                                }
                                //if (double.TryParse(oBOI.Attributes["rAddonAdmin"].sValue, out rAdmin))
                                //{
                                //}
                                //if (double.TryParse(oBOI.Attributes["rAddonPrice"].sValue, out rAddon))
                                //{
                                //}
                                //double rTotalPremium = rQuote + rAddon;
                                OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = (rTotalPremium + rPreviousPremium).ToString() };
                            }
                            if (!OQSD.ContainsKey("rCurrentPolicyTotalPremium") && !string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                            {
                                OQSD["rCurrentPolicyTotalPremium"] = new CNV { sName = "rCurrentPolicyTotalPremium", sValue = rTotalPremium.ToString() };
                            }
                            else if (!OQSD.ContainsKey("rCurrentPolicyTotalPremium"))
                            {
                                OQSD["rCurrentPolicyTotalPremium"] = new CNV { sName = "rCurrentPolicyTotalPremium", sValue = (rTotalPremium + rPreviousPremium).ToString() };
                            }
                            if (!OQSD.ContainsKey("rMTATotal"))
                            {
                                double rMTA = 0;
                                double rPreviousMTA = 0;
                                double rTotalMTA = 0;
                                if (double.TryParse(oBOI.Attributes["rFinalQuote"].sValue, out rMTA))
                                {
                                }
                                if (oPolicyI.Attributes.ContainsKey("rMTATotal"))
                                {
                                    if (double.TryParse(oPolicyI.Attributes["rMTATotal"].sValue, out rPreviousMTA))
                                    {
                                    }
                                }
                                rTotalMTA = rMTA + rPreviousMTA;
                                OQSD["rMTATotal"] = new CNV { sName = "rMTATotal", sValue = rTotalMTA.ToString() };
                            }
                            if (!OQSD.ContainsKey("iVersionNo"))
                            {
                                OQSD["iVersionNo"] = new CNV { sName = "iVersionNo", sValue = oPolicyI.Attributes["iVersionNo"].sValue };
                            }
                            if (!OQSD.ContainsKey("FKsUserID"))
                            {
                                OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = oPolicyI.Attributes["FKsUserID"].sValue };
                            }
                            if (!OQSD.ContainsKey("sAddonID") && (string.IsNullOrEmpty(sPolicyType) || (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() != "renewal")))
                            {
                                OQSD["sAddonID"] = new CNV { sName = "sAddonID", sValue = oPolicyI.Attributes["sAddonID"].sValue };
                            }
                            if (!OQSD.ContainsKey("iRenewalCount"))
                            {
                                int iRenewalCount = 0;
                                var Renewalcount = oPolicyI.Attributes["iRenewalCount"].sValue;
                                if (int.TryParse(Renewalcount, out iRenewalCount))
                                { }
                                if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                {
                                    OQSD["iRenewalCount"] = new CNV { sName = "iRenewalCount", sValue = (iRenewalCount++).ToString() };
                                }
                            }
                        }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{-iInstanceID}", PolicyID, null, null);
                        oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + "] - PolicySequenceNumber :" + PolicySequenceNumber;
                        oXID.SaveErrortoDB(oResult);
                        foreach (var fields in oBOI.Attributes.Where(m => m.Key.Contains("FK")).Select(m => m.Value).ToList())
                        {
                            if (!OQSD.ContainsKey(fields.sName))
                            {
                                OQSD[fields.sName] = new CNV { sName = fields.sName, sValue = fields.sValue };
                            }
                        }
                        var sProcuctVersionID = oBOI.Attributes.Where(m => m.Key.Contains("FKiProductVersionID")).Select(m => m.Value.sValue).FirstOrDefault();
                        //var oProductVersionI = oIXI.BOI("ProductVersion_T", sProcuctVersionID);
                        foreach (var fields in oProductVersionI.Attributes.Where(m => m.Key.Contains("FK")).Select(m => m.Value).ToList())
                        {
                            if (!OQSD.ContainsKey(fields.sName))
                            {
                                OQSD[fields.sName] = new CNV { sName = fields.sName, sValue = fields.sValue };
                            }
                        }
                        if (!OQSD.ContainsKey("FKiQuoteID"))
                        {
                            OQSD["FKiQuoteID"] = new CNV { sName = "FKiQuoteID", sValue = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue };
                        }
                    }
                    var iPaymentType = oQsInstance.XIIValues("iClientPayment");
                    oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + "] - iPaymentType:" + iPaymentType;
                    oXID.SaveErrortoDB(oResult);
                    var sourceD = (XIDSource)oCache.GetObjectFromCache("source", "", oQsInstance.FKiSourceID.ToString());
                    //var SourceI = oIXI.BOI("XISource_T", oQsInstance.FKiSourceID.ToString());
                    //if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("refAccountCategory"))
                    //{
                    iAccountCategory = sourceD.refAccountCategory;
                    //if (int.TryParse(AccountCategory, out iAccountCategory))
                    //{ }
                    //}
                    //if (iPaymentType == "20")
                    //{
                    //    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "FPThank You", null, null);
                    //}
                    //else
                    //{
                    //    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "Payment Option", null, null);
                    //}
                    if (!string.IsNullOrEmpty(oQsInstance.XIIValues("sAddressLine1")))
                    {
                        sAddress += oQsInstance.XIIValues("sAddressLine1");
                    }
                    if (!string.IsNullOrEmpty(oQsInstance.XIIValues("sAddressLine2")))
                    {
                        sAddress += "," + oQsInstance.XIIValues("sAddressLine2");
                    }
                    if (!string.IsNullOrEmpty(oQsInstance.XIIValues("sAddressLine3")))
                    {
                        sAddress += "," + oQsInstance.XIIValues("sAddressLine3");
                    }
                    if (!string.IsNullOrEmpty(oQsInstance.XIIValues("sTown")))
                    {
                        sAddress += "," + oQsInstance.XIIValues("sTown");
                    }
                    //sAddress = oQsInstance.XIIValues("sAddressLine1") + "," + oQsInstance.XIIValues("sAddressLine2") + "," + oQsInstance.XIIValues("sAddressLine3") +","+ oQsInstance.XIIValues("sTown");
                    XIBOBuilding oBOBuilding = new XIBOBuilding();
                    foreach (var oQS in oQsInstance.XIValues)
                    {
                        if (!OQSD.ContainsKey(oQS.Key))
                        {
                            OQSD.Add(oQS.Key, new CNV { sName = oQS.Key, sValue = oQS.Value.sValue });
                        }
                    }
                    if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                    {
                        //sCoverEnd
                        sCoverStart = oQsInstance.XIIValues("dCoverStart");
                    }
                    //if (!string.IsNullOrEmpty(sTranstype) && sTranstype.ToLower() == "PolicyRenewal".ToLower())
                    //{
                    //    if (Convert.ToInt32(ProductID) != iOldProductID)
                    //    {
                    //        if (!OQSD.ContainsKey("iStatus"))
                    //        {
                    //            OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "50" };
                    //        }
                    //        //if (!OQSD.ContainsKey("FKiProductID"))
                    //        //{
                    //        //    OQSD["FKiProductID"] = new CNV { sName = "FKiProductID", sValue = ProductID };
                    //        //}
                    //    }
                    //    else
                    //    {
                    //        if (!OQSD.ContainsKey("iStatus"))
                    //        {
                    //            OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "20" };
                    //        }
                    //    }
                    //}
                    //else
                    //{
                    if (iPaymentMethodType != 0 && iPaymentMethodType == 10 && iQSType == 10)
                    {
                        if (!OQSD.ContainsKey("iStatus"))
                        {
                            OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "20" };
                        }
                        if (!OQSD.ContainsKey("iPolicyStatus"))
                        {
                            OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "20" };
                        }
                    }
                    else if (iPaymentMethodType != 0 && iPaymentMethodType == 10 && iQSType == 20)
                    {
                        if (!OQSD.ContainsKey("iStatus"))
                        {
                            OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "10" };
                        }
                        if (!OQSD.ContainsKey("iPolicyStatus"))
                        {
                            OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "10" };
                        }
                    }
                    else
                    {
                        if (!OQSD.ContainsKey("iStatus"))
                        {
                            OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "5" };
                        }
                        if (!OQSD.ContainsKey("iPolicyStatus"))
                        {
                            OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "5" };
                        }
                    }
                    if (!OQSD.ContainsKey("FKsPostUserID") && OQSD.ContainsKey("FKiPostUserID"))
                    {
                        var sOwner = OQSD["FKiPostUserID"].sValue;
                        int iOwner = 0;
                        if (int.TryParse(sOwner, out iOwner))
                        {
                            var oOwner = (XIInfraUsers)oUser.Get_UserDetails(sDataBase, iOwner).oResult;
                            if (oOwner != null)
                            {
                                OQSD["FKsPostUserID"] = new CNV { sName = "FKsPostUserID", sValue = oOwner.sFirstName + " " + oOwner.sLastName };
                            }
                        }

                    }
                    //}
                    List<CNV> oPaymentNV = new List<CNV>();
                    oPaymentNV.Add(new CNV { sName = "FKiQuoteID", sValue = QuoteID });
                    oPaymentNV.Add(new CNV { sName = "iStatus", sValue = "10" });
                    var oPaymentI = oIXI.BOI("PaymentDetails_T", "", "Create", oPaymentNV);
                    if ((bIsWithOutPayment == "true" || bIsWithOutPayment == "on") && oPaymentI == null)
                    {
                        if (!OQSD.ContainsKey("rPaidAmount"))
                        {
                            OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = "0.00" };
                        }
                        if (!OQSD.ContainsKey("rBalance"))
                        {
                            OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = oBOI.Attributes["rFinalPremium"].sValue };
                        }
                        else
                        {
                            double rPFAmount = 0;
                            double rPreviousPF = 0;
                            if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rPFAmount))
                            {
                            }
                            if (double.TryParse(OQSD["rBalance"].sValue, out rPreviousPF))
                            {
                            }
                            OQSD["rBalance"].sValue = String.Format("{0:0.00}", (rPFAmount + rPreviousPF));
                        }
                        if (!OQSD.ContainsKey("rTotalPremium"))
                        {
                            double rTotalPremium = 0;
                            if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                            {
                            }
                            OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = rTotalPremium.ToString() };
                        }
                        if (!OQSD.ContainsKey("rCurrentPolicyTotalPremium"))
                        {
                            double rTotalPremium = 0;
                            if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                            {
                            }
                            OQSD["rCurrentPolicyTotalPremium"] = new CNV { sName = "rCurrentPolicyTotalPremium", sValue = rTotalPremium.ToString() };
                        }
                        if (!OQSD.ContainsKey("bIsWithoutPayment"))
                        {
                            OQSD["bIsWithoutPayment"] = new CNV { sName = "bIsWithoutPayment", sValue = "true" };
                        }
                    }
                    if (iQSType == 20 && oPaymentI == null)
                    {

                        string skey = "StepMessage";
                        Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                        { dictMsgs.Add("20", "Something went wrong!! Please try again or contact admin"); }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                        List<CNV> oLeadNV = new List<CNV>();
                        oLeadNV.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInsatnceID.ToString() });
                        var oLeadI = oIXI.BOI("Lead_T", "", "Create", oLeadNV);
                        if (oLeadI != null && oLeadI.Attributes.Count > 0 && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                        {
                            XIIBO oLCBOI = new XIIBO();
                            var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                            if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                            {
                                oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue, bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                            {
                                oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                            {
                                oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInsatnceID.ToString(), bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                            {
                                oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Payment", bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                            {
                                oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = "Client tried without payment", bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                            {
                                oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = "Declined policy", bDirty = true });
                            }
                            oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                            oLCBOI.BOD = oBOInsatnce.BOD;
                            oLCBOI.Save(oLCBOI);
                        }
                    }
                    else
                    {
                        if (!OQSD.ContainsKey("rPaidAmount"))
                        {
                            OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = oBOI.Attributes["rPayableAmount"].sValue };
                        }
                        if (!OQSD.ContainsKey("rGrossPremium"))
                        {
                            OQSD["rGrossPremium"] = new CNV { sName = "rGrossPremium", sValue = oBOI.Attributes["rFinalQuote"].sValue };
                        }
                        if (!OQSD.ContainsKey("rNetPremium"))
                        {
                            OQSD["rNetPremium"] = new CNV { sName = "rNetPremium", sValue = String.Format("{0:0.00}", rNetPremium) };
                        }
                        if (!OQSD.ContainsKey("rBalance"))
                        {
                            OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = oBOI.Attributes["rPremiumFinanceAmount"].sValue };
                        }
                        if (!OQSD.ContainsKey("rTotalPremium"))
                        {
                            /*double rQuote = 0;double rAdmin = 0; double rAddon = 0;*/
                            double rTotalPremium = 0;
                            if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                            {
                            }
                            //if (double.TryParse(oBOI.Attributes["rAddonAdmin"].sValue, out rAdmin))
                            //{
                            //}
                            //if (double.TryParse(oBOI.Attributes["rAddonPrice"].sValue, out rAddon))
                            //{
                            //}
                            //double rTotalPremium = rQuote + rAddon;
                            OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = rTotalPremium.ToString() };
                        }
                        if (!OQSD.ContainsKey("rQuotePremium"))
                        {
                            OQSD["rQuotePremium"] = new CNV { sName = "rQuotePremium", sValue = oBOI.Attributes["rPrice"].sValue };
                        }
                        if (!OQSD.ContainsKey("rMTATotal"))
                        {
                            OQSD["rMTATotal"] = new CNV { sName = "rMTATotal", sValue = "0.00" };
                        }
                        //if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                        //{
                        if (!OQSD.ContainsKey("sPolicyNo"))
                        {
                            OQSD["sPolicyNo"] = new CNV { sName = "sPolicyNo", sValue = PolicySequenceNumber };
                        }
                        //}
                        //else
                        //{
                        //    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyNo}", PolicySequenceNumber, null, null);
                        //}
                        string CoverStart = "";
                        XIIBO oBOIns = new XIIBO();
                        DateTime dtNow = DateTime.Now;
                        var startDate = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                        if (OQSD.ContainsKey("tStartTime"))
                        {
                            CoverStart = OQSD["tStartTime"].sValue;
                        }
                        else if (startDate.Date == dtNow.Date)
                        {
                            CoverStart = dtNow.ToString(XIConstant.Time_Format);
                        }
                        else
                        {
                            CoverStart = "12:00:00"; //DateTime.Now.TimeOfDay; //dt.TimeOfDay;
                        }
                        if (!OQSD.ContainsKey("tCoverStart"))
                        {
                            OQSD["tCoverStart"] = new CNV { sName = "tCoverStart", sValue = CoverStart.ToString() };
                        }
                        if (!OQSD.ContainsKey("tCurrentPolicyCoverStart"))
                        {
                            OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = CoverStart };
                        }
                        if (!OQSD.ContainsKey("dEffectiveFrom"))
                        {
                            OQSD["dEffectiveFrom"] = new CNV { sName = "dEffectiveFrom", sValue = sCoverStart };
                        }
                        if (!string.IsNullOrEmpty(sTranstype) && sTranstype.ToLower() == "Renewal".ToLower())
                        {
                            //XIIBO oBOIns = new XIIBO();
                            if (OQSD.ContainsKey("dCurrentPolicyOnCover"))
                            {
                                string RenewalStart = OQSD["dCurrentPolicyOnCover"].sValue;
                                if (!string.IsNullOrEmpty(RenewalStart))
                                {
                                    //oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                    DateTime dt = oBOIns.ConvertToDtTime(RenewalStart);
                                    oResult.sMessage = "dCoverEnd after conversion" + dt;
                                    if (dt != DateTime.MinValue)
                                    {
                                        //DateTime dCoverStart = dt.AddDays(1);
                                        //if (OQSD.ContainsKey("dCoverStart"))
                                        //{
                                        //    OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = dCoverStart.ToString() };
                                        //}
                                        OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                    }
                                }
                                else
                                {
                                    oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                    DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                                    oResult.sMessage = "dCoverStart after conversion" + dt;
                                    if (dt != DateTime.MinValue)
                                    {
                                        OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                    }
                                }
                            }
                            else
                            {
                                oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                                oResult.sMessage = "dCoverStart after conversion" + dt;
                                if (dt != DateTime.MinValue)
                                {
                                    OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                }
                            }
                        }
                        if (!OQSD.ContainsKey("dCoverEnd"))
                        {
                            //XIIBO oBOIns = new XIIBO();
                            DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                            oResult.sMessage = "dCoverStart after conversion" + dt;
                            if (dt != DateTime.MinValue)
                            {
                                OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                            }
                        }
                        if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                        {
                            OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = OQSD["dCoverStart"].sValue };
                        }
                        if (!OQSD.ContainsKey("dLastInsurance"))
                        {
                            //XIIBO oBOIns = new XIIBO();
                            oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                            DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                            oResult.sMessage = "dCoverStart after conversion" + dt;
                            if (dt != DateTime.MinValue)
                            {
                                OQSD["dLastInsurance"] = new CNV { sName = "dLastInsurance", sValue = dt.AddYears(1).ToString() };
                            }
                        }
                        if (!OQSD.ContainsKey("tCoverEnd"))
                        {
                            OQSD["tCoverEnd"] = new CNV { sName = "tCoverEnd", sValue = tCoverEnd };
                        }
                        if (!OQSD.ContainsKey("dCreated"))
                        {
                            OQSD["dCreated"] = new CNV { sName = "dCreated", sValue = DateTime.Now.ToString() };
                        }
                        if (!OQSD.ContainsKey("FKiSupplierID"))
                        {
                            OQSD["FKiSupplierID"] = new CNV { sName = "FKiSupplierID", sValue = iSupplierID.ToString() };
                        }
                        if (!OQSD.ContainsKey("sAddonID"))
                        {
                            List<string> oAddonID = new List<string>();
                            string sAddon = string.Empty;
                            QueryEngine oQE = new QueryEngine();
                            List<XIWhereParams> oWParams = new List<XIWhereParams>();
                            XIWhereParams oWP = new XIWhereParams();
                            oWP.sField = "FKiQsInstanceID";
                            oWP.sOperator = "=";
                            oWP.sValue = iInsatnceID.ToString();
                            oWParams.Add(oWP);
                            XIWhereParams oWP1 = new XIWhereParams();
                            oWP1.sField = "iStatus";
                            oWP1.sOperator = "=";
                            oWP1.sValue = "0";
                            oWParams.Add(oWP1);
                            oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                            List<SqlParameter> SqlParams = new List<SqlParameter>();
                            SqlParams.Add(new SqlParameter { ParameterName = "@FKiQsInstanceID", Value = iInsatnceID.ToString() });
                            SqlParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "0" });
                            SqlParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                            //load requirement template definition of productid and FKiTransactionTypeID
                            oQE.AddBO("ACPurchase_T", "Create", oWParams);
                            CResult oCresult = oQE.BuildQuery();
                            //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                            if (oCresult.bOK && oCresult.oResult != null)
                            {
                                var sSql = (string)oCresult.oResult;
                                ExecutionEngine oEE = new ExecutionEngine();
                                oEE.XIDataSource = oQE.XIDataSource;
                                oEE.sSQL = sSql;
                                oEE.SqlParams = SqlParams;
                                var oQResult = oEE.Execute();
                                if (oQResult.bOK && oQResult.oResult != null)
                                {
                                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                                    var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                    foreach (var BOI in oBOIList)
                                    {
                                        if (BOI.Attributes.ContainsKey("refAddOn"))
                                        {
                                            if (!string.IsNullOrEmpty(BOI.Attributes["refAddOn"].sValue))
                                            {
                                                oAddonID.Add(BOI.Attributes["refAddOn"].sValue);
                                            }
                                        }
                                    }
                                    sAddon = string.Join("|||", oAddonID);
                                }
                            }
                            OQSD["sAddonID"] = new CNV { sName = "sAddonID", sValue = sAddon };
                        }
                        if (!OQSD.ContainsKey("sAddress"))
                        {
                            OQSD["sAddress"] = new CNV { sName = "sAddress", sValue = sAddress };
                        }
                        if (!OQSD.ContainsKey("FKiSourceID"))
                        {
                            OQSD["FKiSourceID"] = new CNV { sName = "FKiSourceID", sValue = oQsInstance.FKiSourceID.ToString() };
                        }
                        if (!OQSD.ContainsKey("rXSCompulsary"))
                        {
                            string SCompulsary = oBOI.Attributes["rCompulsoryExcess"].sValue;
                            OQSD["rXSCompulsary"] = new CNV { sName = "rXSCompulsary", sValue = SCompulsary };
                        }
                        if (!OQSD.ContainsKey("refAccountCategory"))
                        {
                            OQSD["refAccountCategory"] = new CNV { sName = "refAccountCategory", sValue = iAccountCategory.ToString() };
                        }
                        if (!OQSD.ContainsKey("sExternalRefID"))
                        {
                            OQSD["sExternalRefID"] = new CNV { sName = "sExternalRefID", sValue = oQsInstance.sExternalRefID };
                        }
                        if (!OQSD.ContainsKey("FKiClassID"))
                        {
                            OQSD["FKiClassID"] = new CNV { sName = "FKiClassID", sValue = oQsInstance.FKiClassID.ToString() };
                        }
                        if (oQsInstance.FKiClassID > 0)
                        {
                            XIDClass oClassD = (XIDClass)oCache.GetObjectFromCache(XIConstant.CacheClass, null, oQsInstance.FKiClassID.ToString());
                            if (!OQSD.ContainsKey("FKsClass"))
                            {
                                OQSD["FKsClass"] = new CNV { sName = "FKsClass", sValue = oClassD.sName };
                            }
                        }
                        if (!OQSD.ContainsKey("sCaravanMake"))
                        {
                            if (oQsInstance.XIValues.ContainsKey("sCaravanMakeUpdated"))
                            {
                                var sMake = oQsInstance.XIValues["sCaravanMakeUpdated"].sDerivedValue;
                                if (!string.IsNullOrEmpty(sMake) && sMake.ToLower() == "other")
                                {
                                    if (oQsInstance.XIValues.ContainsKey("VehicleMakeother"))
                                    {
                                        sMake = oQsInstance.XIValues["VehicleMakeother"].sDerivedValue;
                                    }
                                }
                                OQSD["sCaravanMake"] = new CNV { sName = "sCaravanMake", sValue = sMake };
                            }
                        }
                        if (!OQSD.ContainsKey("sCaravanModel"))
                        {
                            string sCaravanMake = string.Empty;
                            if (oQsInstance.XIValues.ContainsKey("sModelofCaravanUpdated"))
                            {
                                if (!string.IsNullOrEmpty(oQsInstance.XIIValues("sModelofCaravanUpdated")))
                                {
                                    sCaravanMake = oQsInstance.XIIValues("sModelofCaravanUpdated");
                                }
                            }
                            OQSD["sCaravanModel"] = new CNV { sName = "sCaravanModel", sValue = sCaravanMake };
                        }
                        if (!string.IsNullOrEmpty(sPolicyVersionID))
                        {
                            if (!OQSD.ContainsKey("iMTAVersionID"))
                            {
                                OQSD["iMTAVersionID"] = new CNV { sName = "iMTAVersionID", sValue = sPolicyVersionID };
                            }
                            if (!OQSD.ContainsKey("dMTAEffectiveFrom"))
                            {
                                OQSD["dMTAEffectiveFrom"] = new CNV { sName = "dMTAEffectiveFrom", sValue = sCoverStart };
                            }
                        }
                        if (!OQSD.ContainsKey("bDirectMailOptOut"))
                        {
                            OQSD["bDirectMailOptOut"] = new CNV { sName = "bDirectMailOptOut", sValue = oQsInstance.XIIValues("bIsEmail") };
                        }
                        if (!OQSD.ContainsKey("FKsUserID"))
                        {
                            OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = sUserName };
                        }
                        if (!OQSD.ContainsKey("FKiOrgID"))
                        {
                            OQSD["FKiOrgID"] = new CNV { sName = "FKiOrgID", sValue = oInfo.iOrganizationID.ToString() };
                        }
                        if (!OQSD.ContainsKey("bIsClientEmail"))
                        {
                            OQSD["bIsClientEmail"] = new CNV { sName = "bIsClientEmail", sValue = "true" };
                        }
                        // Create policy
                        var PolicyData = oBO.BuildBoObject("ACPolicy_T", "Create", OQSD, PolicyID);
                        if (PolicyData.xiStatus == 0 && PolicyData.oResult != null)
                        {
                            var oRes = (CResult)PolicyData.oResult;
                            oPolicy = (XIIBO)oRes.oResult;
                            if (int.TryParse(oPolicy.Attributes["ID"].sValue, out iPolicyID))
                            { }
                            int iVersion = 1;

                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", oPolicy.Attributes["ID"].sValue, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-iPolicyID", oPolicy.Attributes["ID"].sValue, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyHolderName}", oPolicy.Attributes["sName"].sValue, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyNo}", PolicySequenceNumber, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iCustomerID}", oPolicy.Attributes["FKiCustomerID"].sValue, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|dInceptionDate}", oPolicy.Attributes["dCoverStart"].sValue, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|ActiveBO}", oPolicy.BOD.Name, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|" + oPolicy.BOD.Name + ".id}", oPolicy.Attributes["ID"].sValue, null, null);
                            oResult.oTraceStack.Add(new CNV { sName = "Create Policy", sValue = "Success: Policy Created Sucessfully" });
                            CNV oNV1 = new CNV();
                            oNV1.sName = "FKi" + oPolicy.BOD.TableName.Split('_').FirstOrDefault() + oPolicy.BOD.sPrimaryKey;
                            oNV1.sValue = oPolicy.Attributes[oPolicy.BOD.sPrimaryKey].sValue;
                            int iACPolicyID = Convert.ToInt32(oPolicy.Attributes[oPolicy.BOD.sPrimaryKey].sValue);
                            oResult.oTraceStack.Add(new CNV { sName = "Policy ID", sValue = "Policy ID:" + oNV1.sValue });
                            if (!OQSD.ContainsKey(oNV1.sName))
                            {
                                OQSD.Add(oNV1.sName, oNV1);
                            }
                            List<CNV> oNV = new List<CNV>();
                            oNV.Add(oNV1);
                            var PolicyVersionID = "";
                            var oPolicyVersionI = oXII.BOI("Policy Version", "", "Create", oNV);
                            if (!string.IsNullOrEmpty(sPolicyVersionID))
                            {
                                if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                                {
                                    if (!OQSD.ContainsKey("iType"))
                                    {
                                        OQSD["iType"] = new CNV { sName = "iType", sValue = "25" };
                                    }
                                    if (!OQSD.ContainsKey("rMTACost"))
                                    {
                                        OQSD["rMTACost"] = new CNV { sName = "rMTACost", sValue = "0.00" };
                                    }
                                    if (!OQSD.ContainsKey("rPaidAmount"))
                                    {
                                        OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = oBOI.Attributes["rPayableAmount"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("rGrossPremium"))
                                    {
                                        OQSD["rGrossPremium"] = new CNV { sName = "rGrossPremium", sValue = oBOI.Attributes["rFinalQuote"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("rNetPremium"))
                                    {
                                        OQSD["rNetPremium"] = new CNV { sName = "rNetPremium", sValue = String.Format("{0:0.00}", rNetPremium) };
                                    }
                                    if (!OQSD.ContainsKey("rBalance"))
                                    {
                                        OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = oBOI.Attributes["rPremiumFinanceAmount"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("rTotalPremium"))
                                    {
                                        double rTotalPremium = 0;
                                        if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                                        {
                                        }
                                        OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = rTotalPremium.ToString() };
                                    }
                                }

                                QueryEngine oQE = new QueryEngine();
                                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                                List<SqlParameter> SqlParams = new List<SqlParameter>();

                                oWParams.Add(new XIWhereParams { sField = "FKi" + oPolicy.BOD.TableName.Split('_').FirstOrDefault() + oPolicy.BOD.sPrimaryKey, sOperator = "=", sValue = iACPolicyID.ToString() });
                                oWParams.Add(new XIWhereParams { sField = "id", sOperator = "!=", sValue = sPolicyVersionID });
                                oWParams.Add(new XIWhereParams { sField = "iStatus", sOperator = "=", sValue = "10" });
                                SqlParams.Add(new SqlParameter { ParameterName = "@FKi" + oPolicy.BOD.TableName.Split('_').FirstOrDefault() + oPolicy.BOD.sPrimaryKey, Value = iACPolicyID.ToString() });
                                SqlParams.Add(new SqlParameter { ParameterName = "@id", Value = sPolicyVersionID });
                                SqlParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "10" });
                                oQE.AddBO("ACPolicyVersion_T", "", oWParams);
                                CResult oCresult = oQE.BuildQuery();
                                if (oCresult.bOK && oCresult.oResult != null)
                                {
                                    var sSql = (string)oCresult.oResult;
                                    ExecutionEngine oEE = new ExecutionEngine();
                                    oEE.XIDataSource = oQE.XIDataSource;
                                    oEE.sSQL = sSql;
                                    oEE.SqlParams = SqlParams;
                                    var oCResult = oEE.Execute();
                                    if (oCResult.bOK && oCResult.oResult != null)
                                    {
                                        var oBOIList = ((Dictionary<string, XIIBO>)oCResult.oResult).Values.ToList();
                                        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                                        oBOIList.ForEach(x => x.BOD = oBOD);
                                        foreach (var instance in oBOIList)
                                        {
                                            double iDays = 0;
                                            double rTotalPremium = 0;
                                            string EffectiveFrom = string.Empty;
                                            if (instance.Attributes.ContainsKey("dEffectiveFrom"))
                                            {
                                                EffectiveFrom = instance.Attributes["dEffectiveFrom"].sValue;
                                                var Days = Convert.ToDateTime(sCoverStart) - Convert.ToDateTime(EffectiveFrom);
                                                iDays = Days.TotalDays;
                                            }
                                            if (instance.Attributes.ContainsKey("rTotalPremium") && iDays > 0)
                                            {
                                                if (double.TryParse(instance.Attributes["rTotalPremium"].sValue, out rTotalPremium))
                                                {
                                                    instance.Attributes["rUsedPremium"].sValue = String.Format("{0:0.00}", (rTotalPremium * iDays / 365));
                                                    instance.Attributes["rUsedPremium"].bDirty = true;
                                                }
                                            }
                                            if (instance.Attributes.ContainsKey("dEffectiveTo"))
                                            {
                                                //instance.SetAttribute("dEffectiveTo", sCoverStart);
                                                instance.Attributes["dEffectiveTo"].sValue = sCoverStart;
                                                instance.Attributes["dEffectiveTo"].bDirty = true;
                                                instance.Attributes["iStatus"].sValue = "20";
                                                instance.Attributes["iStatus"].bDirty = true;
                                                //instance.SetAttribute("iStatus", "20");
                                                instance.Save(instance);
                                            }
                                            if (instance.Attributes.ContainsKey("sVersion") && (string.IsNullOrEmpty(sTranstype) || (!string.IsNullOrEmpty(sTranstype) && sTranstype.ToLower() != "Renewal".ToLower())))
                                            {
                                                int iPreVersion = 0;
                                                if (int.TryParse(instance.Attributes["sVersion"].sValue, out iPreVersion))
                                                {
                                                    iVersion = iPreVersion + 1;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!OQSD.ContainsKey("rMTACost"))
                                {
                                    OQSD["rMTACost"] = new CNV { sName = "rMTACost", sValue = oBOI.Attributes["rFinalPremium"].sValue };
                                }
                                if (!OQSD.ContainsKey("iType"))
                                {
                                    OQSD["iType"] = new CNV { sName = "iType", sValue = "15" };
                                }
                            }


                            //if (oPolicyVersionI != null && oPolicyVersionI.Attributes != null && oPolicyVersionI.Attributes.Count > 0)
                            //{
                            //    if (oPolicyVersionI.Attributes.ContainsKey(oPolicyVersionI.BOD.sPrimaryKey))
                            //    {
                            //        PolicyVersionID = oPolicyVersionI.Attributes[oPolicyVersionI.BOD.sPrimaryKey].sValue;
                            //    }
                            //}
                            oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _ iPolicyID: " + iPolicyID + "] - PolicyVersionID :" + PolicyVersionID;
                            oXID.SaveErrortoDB(oResult, iQSInstanceID, iPolicyID);
                            if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "rebroke" && !OQSD.ContainsKey("iType"))
                            {
                                OQSD["iType"] = new CNV { sName = "iType", sValue = "50" };
                            }
                            //Update Previous version
                            if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                            {
                                DateTime dt = oBO.ConvertToDtTime(sCoverStart);
                                TimeSpan tEnd = new TimeSpan();
                                if (!string.IsNullOrEmpty(tOldCoverEnd))
                                {
                                    if (TimeSpan.TryParse(tOldCoverEnd, out tEnd))
                                    {
                                        dt = dt.Add(tEnd);
                                    }
                                }
                                if (OQSD.ContainsKey("dEffectiveFrom"))
                                {
                                    OQSD["dEffectiveFrom"] = new CNV { sName = "dEffectiveFrom", sValue = dt.ToString() };
                                }
                                if (!OQSD.ContainsKey("dEffectiveTo"))
                                {
                                    OQSD["dEffectiveTo"] = new CNV { sName = "dEffectiveTo", sValue = oPolicy.Attributes["dCoverEnd"].sValue };
                                }
                            }
                            else
                            {
                                // Create policy Version
                                if (!OQSD.ContainsKey("dEffectiveFrom"))
                                {
                                    OQSD["dEffectiveFrom"] = new CNV { sName = "dEffectiveFrom", sValue = sCoverStart };
                                }
                                else
                                {
                                    OQSD["dEffectiveFrom"].sValue = sCoverStart;
                                }
                                if (!OQSD.ContainsKey("dEffectiveTo") && oPolicy.Attributes.ContainsKey("dCoverEnd"))
                                {
                                    OQSD["dEffectiveTo"] = new CNV { sName = "dEffectiveTo", sValue = oPolicy.Attributes["dCoverEnd"].sValue };
                                }
                                else
                                {
                                    OQSD["dEffectiveTo"].sValue = oPolicy.Attributes["dCoverEnd"].sValue;
                                }
                            }
                            if (!OQSD.ContainsKey("iStatus"))
                            {
                                OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "10" };
                            }
                            else
                            {
                                OQSD["iStatus"].sValue = "10";
                            }
                            if (!OQSD.ContainsKey("rMTACost"))
                            {
                                OQSD["rMTACost"] = new CNV { sName = "rMTACost", sValue = "0.00" };
                            }
                            if ((bIsWithOutPayment == "true" || bIsWithOutPayment == "on") && oPaymentI == null)
                            {
                                OQSD["rBalance"].sValue = oBOI.Attributes["rFinalPremium"].sValue;
                            }
                            else
                            {
                                OQSD["rBalance"].sValue = "0.00";
                            }
                            if (!OQSD.ContainsKey("sVersion"))
                            {
                                OQSD["sVersion"] = new CNV { sName = "sVersion", sValue = iVersion.ToString() };
                            }
                            if (!OQSD.ContainsKey("iType"))
                            {
                                OQSD["iType"] = new CNV { sName = "iType", sValue = "10" };
                            }
                            if (!OQSD.ContainsKey("FKsUserID"))
                            {
                                OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = sUserName };
                            }
                            else
                            {
                                OQSD["FKsUserID"].sValue = sUserName;
                            }
                            int iPolicyVersionID = 0;
                            var PolicyVersionData = oBO.BuildBoObject("ACPolicyVersion_T", "", OQSD, sPolicyVersionID);
                            if (PolicyVersionData.xiStatus == 0 && PolicyVersionData.oResult != null)
                            {
                                oResult.oTraceStack.Add(new CNV { sName = "Create Policy Version", sValue = "Success: Policy Version Created Sucessfully" });
                                var oPolicyVersionRes = (CResult)PolicyVersionData.oResult;
                                var oPolicyVersion = (XIIBO)oPolicyVersionRes.oResult;
                                var sPolVersionID = oPolicyVersion.Attributes[oPolicyVersion.BOD.sPrimaryKey].sValue;
                                int.TryParse(sPolVersionID, out iPolicyVersionID);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}", iPolicyVersionID.ToString(), null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "-iACPolicyVersionID", iPolicyVersionID.ToString(), null, null);
                                if (oPolicy.Attributes.ContainsKey("iVersionNo") && (string.IsNullOrEmpty(sPolicyVersionID) || (!string.IsNullOrEmpty(sPolicyVersionID) && OQSD["iPolicyStatus"].sValue == "10")))
                                {
                                    oPolicy.Attributes["iVersionNo"].sValue = iPolicyVersionID.ToString();
                                    oPolicy.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                                    // Update policy with version
                                    var UpdatedPolicyData = oBOI.Save(oPolicy);
                                }
                                CNV oNV2 = new CNV();
                                oNV2.sName = "FKi" + oPolicyVersion.BOD.TableName.Split('_').FirstOrDefault() + oPolicyVersion.BOD.sPrimaryKey;
                                oNV2.sValue = iPolicyVersionID.ToString();
                                oResult.oTraceStack.Add(new CNV { sName = "Policy Version ID", sValue = "Policy Version ID:" + oNV2.sValue });
                                if (!OQSD.ContainsKey(oNV2.sName))
                                {
                                    OQSD.Add(oNV2.sName, oNV2);
                                }
                            }
                            oResult.oTraceStack.Add(new CNV { sName = "QSI ID", sValue = "QS Instance ID:" + oQsInstance.ID });
                            // Update QSInstance with version
                            var QsInstanceData = oBO.BuildBoObject("QS Instance", "Create", OQSD, oQsInstance.ID.ToString());
                            if (QsInstanceData.xiStatus == 0 && QsInstanceData.oResult != null)
                            {
                                oResult.oTraceStack.Add(new CNV { sName = "Update QuestionSet Instance to policy version", sValue = "Success: QuestionSet Instance is Updated with policy version" });
                            }
                            // Update Quotes Status
                            if (oBOI.Attributes.ContainsKey("iStatus"))
                            {
                                oBOI.Attributes["iStatus"] = new XIIAttribute { sValue = "10", bDirty = true, sName = "iStatus" };
                                oBOI.Attributes[oBOI.BOD.sPrimaryKey].bDirty = true;
                                oBO.Save(oBOI);
                                var iID = oBOI.Attributes["FKiQSInstanceID"].sValue;
                                QueryEngine oQE = new QueryEngine();
                                List<SqlParameter> SqlParams = new List<SqlParameter>();
                                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                                oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sValue = iID, sOperator = "=" });
                                SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iID });
                                oQE.AddBO("Aggregations", "", oWParams);
                                CResult oCresult = oQE.BuildQuery();
                                if (oCresult.bOK && oCresult.oResult != null)
                                {
                                    var sSql = (string)oCresult.oResult;
                                    ExecutionEngine oEE = new ExecutionEngine();
                                    oEE.XIDataSource = oQE.XIDataSource;
                                    oEE.sSQL = sSql;
                                    oEE.SqlParams = SqlParams;
                                    var oQResult = oEE.Execute();
                                    if (oQResult.bOK && oQResult.oResult != null)
                                    {
                                        var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult);
                                        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                                        oBOIList1.Values.ToList().ForEach(x => x.BOD = oBOD);
                                        var oBOIList = oBOIList1.Values.Where(m => m.Attributes[m.BOD.sPrimaryKey].sValue != QuoteID).ToList();
                                        foreach (var oQuoteI in oBOIList)
                                        {
                                            if (oQuoteI.Attributes.ContainsKey("iStatus"))
                                            {
                                                oQuoteI.Attributes["iStatus"].sValue = "20";
                                                oQuoteI.Attributes["iStatus"].bDirty = true;
                                                oQuoteI.Attributes[oQuoteI.BOD.sPrimaryKey].bDirty = true;
                                                oBO.Save(oQuoteI);
                                            }
                                        }
                                    }
                                }
                            }
                            List<CNV> oLeadNV = new List<CNV>();
                            oLeadNV.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInsatnceID.ToString() });
                            var oLeadI = oXII.BOI("Lead_T", "", "Create", oLeadNV);
                            if (oLeadI != null && oLeadI.Attributes.ContainsKey("iStatus"))
                            {
                                var iPastStatus = oLeadI.Attributes["iStatus"].sValue;
                                var sPastLeadStatus = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sValues == iPastStatus).Select(m => m.sOptionName).FirstOrDefault();
                                if (sTranstype == "MTA")
                                {
                                    oLeadI.Attributes["iStatus"].sValue = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sOptionName == "MTA On Cover").Select(m => m.sValues).FirstOrDefault();
                                }
                                else if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                {
                                    oLeadI.Attributes["iStatus"].sValue = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sOptionName == "Renewed On Cover").Select(m => m.sValues).FirstOrDefault();
                                }
                                else if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "rebroke")
                                {
                                    oLeadI.Attributes["iStatus"].sValue = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sOptionName == "Re-Broke On Cover").Select(m => m.sValues).FirstOrDefault();
                                }
                                else
                                {
                                    oLeadI.Attributes["iStatus"].sValue = "30";
                                }
                                oLeadI.Attributes["iStatus"].bDirty = true;
                                oLeadI.Attributes["dPolicyDate"].sValue = DateTime.Now.ToString();
                                oLeadI.Attributes["dPolicyDate"].bDirty = true;
                                oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].bDirty = true;
                                oBO.Save(oLeadI);

                                //Save into LifeCycle
                                long iLeadID = 0;
                                var sLeadID = string.Empty;
                                var sCurrentLeadStatus = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                if (oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                                {
                                    sLeadID = oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue;
                                };
                                long.TryParse(sLeadID, out iLeadID);
                                XIIBO oLCBOI = new XIIBO();
                                var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                                if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                                {
                                    oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                                {
                                    oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                                {
                                    oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInsatnceID.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                                {
                                    oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Stage", bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                                {
                                    oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sPastLeadStatus, bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                                {
                                    oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sCurrentLeadStatus, bDirty = true });
                                }
                                oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                                oLCBOI.BOD = oBOInsatnce.BOD;
                                oLCBOI.Save(oLCBOI);
                            }
                            //Insert call for rebroke
                            if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal" && iParentPolicy > 0)
                            {
                                XIIBO oCallI = new XIIBO();
                                XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Call_T", null);
                                oCallI.BOD = oBOD;
                                oCallI.LoadBOI("AutoCreate");
                                if (oCallI.Attributes.ContainsKey("fkiacpolicyid"))
                                {
                                    oCallI.Attributes["fkiacpolicyid"].sValue = iPolicyID.ToString();
                                }
                                if (oCallI.Attributes.ContainsKey("sname"))
                                {
                                    oCallI.Attributes["sname"].sValue = "Re-broked";
                                }
                                if (oCallI.Attributes.ContainsKey("snotes"))
                                {
                                    oCallI.Attributes["snotes"].sValue = "Re-broke from Policy ID: " + iParentPolicy;
                                }
                                if (oCallI.Attributes.ContainsKey("istatus"))
                                {
                                    oCallI.Attributes["istatus"].sValue = "10";
                                }
                                var oCallResult = oCallI.Save(oCallI, false);
                            }
                            var customerID = oPolicy.Attributes["FKiCustomerID"].sValue;
                            if ((string.IsNullOrEmpty(customerID) || customerID == "0") && oLeadI.Attributes.ContainsKey("fkiclientid"))
                            {
                                customerID = oLeadI.Attributes["fkiclientid"].sValue;
                            }
                            if (string.IsNullOrEmpty(PolicyID) && !string.IsNullOrEmpty(customerID))
                            {
                                int iPolicyCount = 0;
                                var oCustomerI = oXII.BOI("Customer_T", customerID);
                                if (oCustomerI != null && oCustomerI.Attributes.ContainsKey("ilivepolicycount"))
                                {
                                    if (int.TryParse(oCustomerI.Attributes["ilivepolicycount"].sValue, out iPolicyCount))
                                    {
                                        oCustomerI.Attributes["ilivepolicycount"].sValue = (iPolicyCount + 1).ToString();
                                        oCustomerI.Attributes["ilivepolicycount"].bDirty = true;
                                        oCustomerI.Attributes["id"].bDirty = true;
                                        oCustomerI.Save(oCustomerI);
                                    }
                                }
                            }
                            //var CustomerData = oBOI.BuildBoObject("Customer_T", "UpdateData", OQSD, customerID);

                            oParams.Add(new CNV { sName = "iACPolicyID", sValue = iACPolicyID.ToString() });
                            oParams.Add(new CNV { sName = "sPolicyNo", sValue = PolicySequenceNumber });
                            oParams.Add(new CNV { sName = "iPaymentMethodType", sValue = iPaymentMethodType.ToString() });
                            oParams.Add(new CNV { sName = "iQSType", sValue = iQSType.ToString() });
                            oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = iPolicyVersionID.ToString() });
                            sTranstype = sTranstype == sPolicyType ? sTranstype : sPolicyType;
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", sTranstype.ToString(), null, null);
                            oParams.Add(new CNV { sName = "sTranstype", sValue = sTranstype });
                            if (iQSType == 20)
                            {
                                if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                                {
                                    XIDefinitionBase oDef = new XIDefinitionBase();
                                    //var oParamsN = (List<CNV>)oDef.Clone(oParams);
                                    var oParamsN = oParams.GetCopy();
                                    Thread threadObj = new Thread(new ThreadStart(() => { ThreadRunMethods(oParamsN); }));
                                    threadObj.Start();
                                }


                                Thread threaInsertdObj = new Thread(new ThreadStart(() =>
                                {
                                    ThreadInsertTransactions(oParams, iPaymentMethodType, string.IsNullOrEmpty(iPaymentType) ? 10 : Convert.ToInt32(iPaymentType));
                                }));
                                threaInsertdObj.Start();
                            }
                        }
                    }
                }
                else
                {
                    string skey = "StepMessage";
                    Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                    if (iQSType == 10) { dictMsgs.Add("10", "Policy already in Live."); } else { dictMsgs.Add("20", "Something went wrong!! Please try again or contact admin"); }
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                    oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQSInstanceID);
            }
            return oResult;
        }
        public CResult InsertPolicy_Charity(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iQSInstanceID = 0;
            Guid QSInsGUID = Guid.Empty;
            int iPolicyID = 0;
            try
            {
                int iQSType = 0;
                XIIBO oBO = new XIIBO();
                var oPolicy = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInternalCurrentStep = oParams.Where(m => m.sName.ToLower() == "sInternalCurrentStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPublicCurrentStep = oParams.Where(m => m.sName.ToLower() == "sPublicCurrentStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>(StringComparer.CurrentCultureIgnoreCase);
                int iParentPolicy = 0;
                //Loading Quote Instance
                var oBOI = oIXI.BOI("Aggregations", QuoteID);
                if (oBOI.AttributeI("bISConfirmPolicy").sValue == "True")
                {
                    var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "-iPolicyID"); //{XIP|iACPolicyID}
                    var sTransType = oCache.Get_ParamVal(sSessionID, sGUID, null, "-transtype");
                    var sPolicyType = string.Empty;
                    var sPolicyVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}");
                    string sUserName = string.Empty;
                    int iUserID = 0;
                    XIInfraUsers oUser = new XIInfraUsers();
                    CUserInfo oInfo = oUser.Get_UserInfo();
                    if (oInfo.iRoleID != 55)
                    {
                        sUserName = oInfo.sName == null ? null : (oInfo.sName.Length >= 15 ? oInfo.sName.Substring(0, 14) : oInfo.sName);
                        iUserID = oInfo.iUserID;
                    }
                    else
                    {
                        sUserName = "Client";

                    }
                    if (int.TryParse(oBOI.AttributeI("FKiQSInstanceID").sValue, out iQSInstanceID))
                    { }
                    Guid.TryParse(oBOI.AttributeI("FKiQSInstanceIDXIGUID").sValue, out QSInsGUID);
                    XIIXI oXII = new XIIXI();
                    XIIQS oQsInstance = oXII.GetQSXIValuesByQSIID(QSInsGUID.ToString());
                    string sRenewalUserName = string.Empty;
                    string FkiRenewalUser = string.Empty;
                    var FKiNBUser = string.Empty;
                    //oQsInstance.ID = iQSInstanceID;
                    var sCoverStart = oQsInstance.XIIValues("dCoverStart");
                    // checking is the policy is renewal or new.
                    if (int.TryParse(PolicyID, out iPolicyID))
                    {
                        if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                        {
                            var oPolicyI = oIXI.BOI("ACPolicy_T", PolicyID);
                            var iPolicyproduct = oPolicyI.Attributes["FKiProductVersionID"].sValue;
                            //var ProductVersionID = oBOI.Attributes["FKiProductVersionID"].sValue;
                            //// loading Product Version bo instance 
                            //var oProductVersionI = oIXI.BOI("ProductVersion_T", ProductVersionID);
                            //if (oProductVersionI.Attributes != null)
                            //{
                            if (oBOI.Attributes.ContainsKey("FKiProductVersionID"))
                            {
                                var iProductID = oBOI.Attributes["FKiProductVersionID"].sValue;
                                if (iProductID == iPolicyproduct)
                                {
                                    if (!string.IsNullOrEmpty(oPolicyI.AttributeI("FKiRenewalLeadID").sValue))
                                    {
                                        var oLeadI = oIXI.BOI("Lead_T", oPolicyI.AttributeI("FKiRenewalLeadID").sValue);
                                        sRenewalUserName = string.IsNullOrEmpty(oLeadI.AttributeI("sHandler").sValue) ? sUserName : oLeadI.AttributeI("sHandler").sValue;
                                        FkiRenewalUser = string.IsNullOrEmpty(oLeadI.AttributeI("FKiUserID").sValue) ? iUserID.ToString() : oLeadI.AttributeI("FKiUserID").sValue;
                                    }
                                    if (!OQSD.ContainsKey("iStatus"))
                                    {
                                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "60" };
                                    }
                                    if (!OQSD.ContainsKey("iPolicyStatus"))
                                    {
                                        OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "60" };
                                    }
                                    if (!OQSD.ContainsKey("FKsUserID"))
                                    {
                                        OQSD["FKsRenewalUserID"] = new CNV { sName = "FKsRenewalUserID", sValue = sUserName };
                                    }
                                    sPolicyType = "Renewal";
                                }
                                else
                                {
                                    iParentPolicy = iPolicyID;
                                    oPolicyI.Attributes["iStatus"].sValue = "40";
                                    oPolicyI.Attributes["iStatus"].bDirty = true;
                                    oPolicyI.Save(oPolicyI);
                                    iPolicyID = 0;
                                    PolicyID = null;
                                    sPolicyVersionID = null;
                                    if (!OQSD.ContainsKey("iStatus"))
                                    {
                                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "70" };
                                    }
                                    if (!OQSD.ContainsKey("iPolicyStatus"))
                                    {
                                        OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "70" };
                                    }
                                    sPolicyType = "Rebroke";
                                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}", "10", null, null);
                                    //TimeSpan CoverEndTime = new TimeSpan();
                                    //TimeSpan.TryParse(oPolicyI.Attributes["tCoverEnd"].sValue, out CoverEndTime);
                                    var sRenewalStart = oBOI.ConvertToDtTime(oPolicyI.Attributes["dCoverEnd"].sValue);
                                    var sQSRenewalStart = oBOI.ConvertToDtTime(sCoverStart);
                                    var renewalstartDate = sRenewalStart;
                                    if (sQSRenewalStart > sRenewalStart)
                                    {
                                        renewalstartDate = sQSRenewalStart;
                                    }

                                    if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                                    {
                                        OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = renewalstartDate.Date.ToString() };
                                    }
                                    //if (!OQSD.ContainsKey("tCurrentPolicyCoverStart"))
                                    //{
                                    //    OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = sRenewalStart.TimeOfDay.ToString() };
                                    //}
                                    if (!OQSD.ContainsKey("dCoverStart"))
                                    {
                                        OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = renewalstartDate.Date.ToString() };
                                    }
                                    //if (!OQSD.ContainsKey("tCoverStart"))
                                    //{
                                    //    OQSD["tCoverStart"] = new CNV { sName = "tCoverStart", sValue = sRenewalStart.TimeOfDay.ToString() };
                                    //}
                                }
                            }
                            //}
                        }

                    }
                    string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                    oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + "] - PolicyID :" + PolicyID;
                    oXID.SaveErrortoDB(oResult, iQSInstanceID);
                    int iInsatnceID = 0;
                    var QSInstanceGUID = string.Empty;
                    var PolicySequenceNumber = "";
                    int iSupplierID = 0;
                    string sCoverEnd = string.Empty;
                    var ProductID = ""; var iOldProductID = 0; var ProductVersionID = ""; var ProductsID = "";
                    var sAddress = string.Empty;
                    string ProductCoverEnd = string.Empty;
                    int iAddDaysToCoverEnd = 0;
                    var tCoverEnd = "00:00:00";
                    int iAccountCategory = 0;
                    int iPaymentMethodType = 0;
                    int iQuoteType = 0;

                    List<XIIBO> oListQuotes = new List<XIIBO>();
                    string sQuery = "select * from Aggregations_T where FKiQSInstanceIDXIGUID='" + oBOI.AttributeI("FKiQSInstanceIDXIGUID").sValue + "'";
                    XID1Click oXI1Click = new XID1Click();
                    oXI1Click.Query = sQuery;
                    oXI1Click.Name = "Aggregations";
                    var Result = oXI1Click.GetList();

                    if (Result.bOK || Result.oResult != null)
                    {
                        oListQuotes = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                    }
                    List<XIIBO> oPolicyExist = new List<XIIBO>();
                    List<int> QuoteIDs = new List<int>();
                    foreach (var item in oListQuotes)
                    {
                        QuoteIDs.Add(item.AttributeI("id").iValue);
                    }
                    sQuery = "select * from ACPolicy_T where FKiQuoteID in(" + string.Join(",", QuoteIDs) + ")";
                    oXI1Click = new XID1Click();
                    oXI1Click.Query = sQuery;
                    oXI1Click.Name = "ACPolicy_T";
                    Result = oXI1Click.GetList();
                    if (Result.bOK || Result.oResult != null)
                    {
                        oPolicyExist = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                    }
                    //Checking if the policy is already created for this quote
                    if (oPolicyExist.Count() == 0)
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|Aggregations.id}", QuoteID, null, null);
                        double rFinalPremium = 0, rIPT = 0;
                        double rNetPremium = 0;
                        if (oBOI.Attributes != null)
                        {
                            var InstanceID = oBOI.Attributes.Where(m => m.Key == "FKiQSInstanceID").Select(m => m.Value.sValue).FirstOrDefault();
                            QSInstanceGUID = oBOI.Attributes.Where(m => m.Key == "FKiQSInstanceIDXIGUID").Select(m => m.Value.sValue).FirstOrDefault();
                            //Loading payment type from Quote instance
                            var sPaymentType = oBOI.Attributes.Where(m => m.Key == "iPaymentType").Select(m => m.Value.sValue).FirstOrDefault();
                            if (int.TryParse(sPaymentType, out iPaymentMethodType))
                            {
                            }
                            var sQuoteType = oBOI.Attributes.Where(m => m.Key == "iQuoteStatus").Select(m => m.Value.sValue).FirstOrDefault();
                            if (int.TryParse(sQuoteType, out iQuoteType))
                            {
                            }
                            var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
                            if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal")
                            {
                                iQSType = 10;
                            }
                            else
                            {
                                iQSType = 20;
                            }

                            oResult.oTraceStack.Add(new CNV { sName = "InstanceID", sValue = "InstanceID :" + InstanceID });
                            if (!string.IsNullOrEmpty(InstanceID))
                            {
                                iInsatnceID = Convert.ToInt32(InstanceID);
                            }
                            if (double.TryParse(oBOI.Attributes["rPrice"].sValue, out rFinalPremium))
                            {
                            }
                            if (double.TryParse(oBOI.Attributes["rInterestAmount"].sValue, out rIPT))
                            {
                            }
                            rNetPremium = rFinalPremium - rIPT;
                        }

                        int iQSDID = 0;
                        var bIsSubQS = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|bIsSubQS}");
                        string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                        if (int.TryParse(sQSDID, out iQSDID)) { }
                        if (!string.IsNullOrEmpty(bIsSubQS))
                        {
                            iQSDID = 10605;
                        }
                        Guid QSDGUID = Guid.Empty;
                        Guid.TryParse(sQSDID, out QSDGUID);
                        var oQSDefinition = new XIDQS();
                        if (QSDGUID != null && QSDGUID != Guid.Empty)
                        {
                            oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, QSDGUID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                        }
                        else if (iQSDID > 0)
                        {
                            oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                        }

                        if (oQSDefinition != null)
                        {
                            oQsInstance.QSDefinition = oQSDefinition;
                        }
                        string sPolicyCoverStart = "";
                        //Static code --> QS field without payment checkbox
                        var bIsWithOutPayment = oQsInstance.XIIValues("bAcceptWithOutPayment");
                        if (string.IsNullOrEmpty(bIsWithOutPayment))
                        {
                            bIsWithOutPayment = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|bIsWithOutPayment}");
                        }
                        var tOldCoverEnd = "";

                        if (oBOI.Attributes != null)
                        {
                            //var ProductVersionID = oBOI.Attributes["FKiProductVersionID"].sValue;
                            //// loading Product Version bo instance 
                            //var oProductVersionI = oIXI.BOI("ProductVersion_T", ProductVersionID);
                            //if (oProductVersionI.Attributes != null)
                            //{
                            if (oBOI.Attributes.ContainsKey("FKiProductID"))
                            {
                                ProductID = oBOI.Attributes["FKiProductID"].sValue;
                            }
                            if (oBOI.Attributes.ContainsKey("FKiProductVersionID"))
                            {
                                ProductVersionID = oBOI.Attributes["FKiProductVersionID"].sValue;
                                var Productversion = oIXI.BOI("ProductVersion_T", ProductVersionID);
                                ProductsID = Productversion.Attributes["FKiProductID"].sValue;
                                ProductID = ProductsID;
                            }
                            //}
                            var oProductI = oIXI.BOI("Product", ProductID);
                            tCoverEnd = oProductI.Attributes["tendtime"].sValue;
                            ProductCoverEnd = oProductI.Attributes["iadddaystoenddate"].sValue;
                            if (int.TryParse(ProductCoverEnd, out iAddDaysToCoverEnd))
                            {
                            }
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iProductID}", ProductID, null, null);
                            oParams.Add(new CNV { sName = "iProductID", sValue = ProductID });
                            if (oProductI.Attributes.ContainsKey("FKiSupplierID"))
                            {
                                var SupplierID = oProductI.Attributes["FKiSupplierID"].sValue;
                                if (int.TryParse(SupplierID, out iSupplierID))
                                { }
                            }
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iSupplierID}", iSupplierID.ToString(), null, null);
                            if (string.IsNullOrEmpty(PolicyID))
                            {
                                if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                                {
                                    var oCResult = PolicyNoGeneration(oProductI);
                                    if (oCResult.bOK && oCResult.oResult != null)
                                    {
                                        PolicySequenceNumber = (string)oCResult.oResult;
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyNo}", PolicySequenceNumber, null, null);
                                    }
                                }
                                if (!OQSD.ContainsKey("iParentID"))
                                {
                                    OQSD["iParentID"] = new CNV { sName = "iParentID", sValue = iParentPolicy.ToString() };
                                }
                            }
                            else
                            {
                                var oPolicyI = oIXI.BOI("ACPolicy_T", PolicyID);
                                if (oPolicyI.Attributes.ContainsKey("dCoverEnd"))
                                {
                                    sCoverEnd = oPolicyI.Attributes["dCoverEnd"].sValue;
                                }
                                if (oPolicyI.Attributes.ContainsKey("dCoverStart"))
                                {
                                    sPolicyCoverStart = oPolicyI.Attributes["dCoverStart"].sValue;
                                }
                                if (oPolicyI.Attributes.ContainsKey("tCoverEnd"))
                                {
                                    tOldCoverEnd = oPolicyI.Attributes["tCoverEnd"].sValue;
                                }
                                if (oPolicyI.Attributes.ContainsKey("sPolicyNo"))
                                {
                                    PolicySequenceNumber = oPolicyI.Attributes["sPolicyNo"].sValue;
                                }
                                if (oPolicyI.Attributes.ContainsKey("FKiProductID"))
                                {
                                    iOldProductID = Convert.ToInt32(oPolicyI.Attributes["FKiProductID"].sValue);
                                }
                                if (!OQSD.ContainsKey("iStatus") && oPolicyI.Attributes.ContainsKey("iStatus"))
                                {
                                    OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = oPolicyI.Attributes["iStatus"].sValue };
                                }
                                if (!OQSD.ContainsKey("tCoverStart") && oPolicyI.Attributes.ContainsKey("tCoverStart"))
                                {
                                    OQSD["tCoverStart"] = new CNV { sName = "tCoverStart", sValue = oPolicyI.Attributes["tCoverStart"].sValue };
                                }
                                if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                {
                                    if (oPolicyI.Attributes.ContainsKey("dCoverEnd")/*&& oPolicyI.Attributes.ContainsKey("tCoverEnd")*/)
                                    {
                                        var sRenewalStart = oBOI.ConvertToDtTime(oPolicyI.Attributes["dCoverEnd"].sValue);
                                        var sQSRenewalStart = oBOI.ConvertToDtTime(sCoverStart);
                                        var renewalstartDate = sRenewalStart;
                                        if (sQSRenewalStart > sRenewalStart)
                                        {
                                            renewalstartDate = sQSRenewalStart;
                                        }
                                        if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                                        {
                                            OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = renewalstartDate.ToString() };
                                        }
                                    }
                                }
                                else
                                {
                                    if (!OQSD.ContainsKey("dCurrentPolicyOnCover") && oPolicyI.Attributes.ContainsKey("dCurrentPolicyOnCover"))
                                    {
                                        OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = oPolicyI.Attributes["dCurrentPolicyOnCover"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("tCurrentPolicyCoverStart") && oPolicyI.Attributes.ContainsKey("tCurrentPolicyCoverStart"))
                                    {
                                        OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = oPolicyI.Attributes["tCurrentPolicyCoverStart"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("FKsPostUserID") && oPolicyI.Attributes.ContainsKey("FKsPostUserID"))
                                    {
                                        OQSD["FKsPostUserID"] = new CNV { sName = "FKsPostUserID", sValue = oPolicyI.Attributes["FKsPostUserID"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("dCreated") && oPolicyI.Attributes.ContainsKey("dCreated"))
                                    {
                                        OQSD["dCreated"] = new CNV { sName = "dCreated", sValue = oPolicyI.Attributes["dCreated"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("dCoverEnd") && oPolicyI.Attributes.ContainsKey("dCoverEnd"))
                                    {
                                        OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = oPolicyI.Attributes["dCoverEnd"].sValue };
                                    }
                                }
                                sCoverStart = oQsInstance.XIIValues("dCoverStart");
                                if (!OQSD.ContainsKey("dCoverStart"))
                                {
                                    OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = sPolicyCoverStart };
                                }
                                if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                                {
                                    OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = sPolicyCoverStart };
                                }
                                if (!OQSD.ContainsKey("rGrossPremium"))
                                {
                                    double rFinalQuote = 0;
                                    double rPreviousQuote = 0;
                                    double rTotalQuote = 0;
                                    if (double.TryParse(oBOI.Attributes["rFinalQuote"].sValue, out rFinalQuote))
                                    {
                                    }
                                    if (oPolicyI.Attributes.ContainsKey("rGrossPremium"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rGrossPremium"].sValue, out rPreviousQuote))
                                        {
                                        }
                                    }
                                    rTotalQuote = rFinalQuote + rPreviousQuote;
                                    OQSD["rGrossPremium"] = new CNV { sName = "rGrossPremium", sValue = rTotalQuote.ToString() };
                                }
                                if (!OQSD.ContainsKey("rQuotePremium"))
                                {
                                    double rPreviousQuotePremium = 0;
                                    double rTotalQuotePremium = 0;
                                    if (oPolicyI.Attributes.ContainsKey("rQuotePremium"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rQuotePremium"].sValue, out rPreviousQuotePremium))
                                        {
                                        }
                                    }
                                    double rQuote = 0;
                                    if (double.TryParse(oBOI.Attributes["rPrice"].sValue, out rQuote))
                                    {
                                    }
                                    rTotalQuotePremium = rQuote + rPreviousQuotePremium;
                                    OQSD["rQuotePremium"] = new CNV { sName = "rQuotePremium", sValue = String.Format("{0:0.00}", rTotalQuotePremium) };
                                }
                                if (!OQSD.ContainsKey("rNetPremium"))
                                {
                                    double rPreviousNetPremium = 0;
                                    double rTotalNetPremium = 0;
                                    if (oPolicyI.Attributes.ContainsKey("rNetPremium"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rNetPremium"].sValue, out rPreviousNetPremium))
                                        {
                                        }
                                    }
                                    rTotalNetPremium = rNetPremium + rPreviousNetPremium;
                                    OQSD["rNetPremium"] = new CNV { sName = "rNetPremium", sValue = String.Format("{0:0.00}", rTotalNetPremium) };
                                }
                                if (!OQSD.ContainsKey("rPaidAmount"))
                                {
                                    double rPreviousPaidAmount = 0;
                                    double rPaidAmount = 0;
                                    double rTotalPaidAmount = 0;
                                    if (double.TryParse(oBOI.Attributes["rPayableAmount"].sValue, out rPaidAmount))
                                    {
                                    }
                                    if (oPolicyI.Attributes.ContainsKey("rPaidAmount"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rPaidAmount"].sValue, out rPreviousPaidAmount))
                                        {
                                        }
                                    }
                                    rTotalPaidAmount = rPreviousPaidAmount + rPaidAmount;
                                    OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = String.Format("{0:0.00}", rTotalPaidAmount) };
                                }
                                if (!OQSD.ContainsKey("rBalance"))
                                {
                                    double rPFAmount = 0;
                                    double rPreviousPF = 0;
                                    double rTotalPF = 0;
                                    if (double.TryParse(oBOI.Attributes["rPremiumFinanceAmount"].sValue, out rPFAmount))
                                    {
                                    }
                                    if (oPolicyI.Attributes.ContainsKey("rBalance"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rBalance"].sValue, out rPreviousPF))
                                        {
                                        }
                                    }
                                    rTotalPF = rPFAmount + rPreviousPF;
                                    OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = rTotalPF.ToString() };
                                }
                                double rTotalPremium = 0;
                                double rPreviousPremium = 0;
                                if (!OQSD.ContainsKey("rTotalPremium"))
                                {
                                    /*double rQuote = 0;double rAdmin = 0; double rAddon = 0;*/
                                    if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                                    {
                                    }
                                    if (oPolicyI.Attributes.ContainsKey("rTotalPremium"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rTotalPremium"].sValue, out rPreviousPremium))
                                        {
                                        }
                                    }
                                    OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = (rTotalPremium + rPreviousPremium).ToString() };
                                }
                                if (!OQSD.ContainsKey("rCurrentPolicyTotalPremium") && !string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                {
                                    OQSD["rCurrentPolicyTotalPremium"] = new CNV { sName = "rCurrentPolicyTotalPremium", sValue = rTotalPremium.ToString() };
                                }
                                else if (!OQSD.ContainsKey("rCurrentPolicyTotalPremium"))
                                {
                                    OQSD["rCurrentPolicyTotalPremium"] = new CNV { sName = "rCurrentPolicyTotalPremium", sValue = (rTotalPremium + rPreviousPremium).ToString() };
                                }
                                if (!OQSD.ContainsKey("rMTATotal"))
                                {
                                    double rMTA = 0;
                                    double rPreviousMTA = 0;
                                    double rTotalMTA = 0;
                                    if (double.TryParse(oBOI.Attributes["rFinalQuote"].sValue, out rMTA))
                                    {
                                    }
                                    if (oPolicyI.Attributes.ContainsKey("rMTATotal"))
                                    {
                                        if (double.TryParse(oPolicyI.Attributes["rMTATotal"].sValue, out rPreviousMTA))
                                        {
                                        }
                                    }
                                    rTotalMTA = rMTA + rPreviousMTA;
                                    OQSD["rMTATotal"] = new CNV { sName = "rMTATotal", sValue = rTotalMTA.ToString() };
                                }
                                if (!OQSD.ContainsKey("iVersionNo"))
                                {
                                    OQSD["iVersionNo"] = new CNV { sName = "iVersionNo", sValue = oPolicyI.Attributes["iVersionNo"].sValue };
                                }
                                if (!OQSD.ContainsKey("FKsUserID"))
                                {
                                    OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = oPolicyI.Attributes["FKsUserID"].sValue };
                                }
                                if (!OQSD.ContainsKey("sAddonID") && (string.IsNullOrEmpty(sPolicyType) || (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() != "renewal")))
                                {
                                    OQSD["sAddonID"] = new CNV { sName = "sAddonID", sValue = oPolicyI.Attributes["sAddonID"].sValue };
                                }
                                if (!OQSD.ContainsKey("iRenewalCount"))
                                {
                                    int iRenewalCount = 0;
                                    var Renewalcount = oPolicyI.Attributes["iRenewalCount"].sValue;
                                    if (int.TryParse(Renewalcount, out iRenewalCount))
                                    { }
                                    if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                    {
                                        OQSD["iRenewalCount"] = new CNV { sName = "iRenewalCount", sValue = (iRenewalCount++).ToString() };
                                    }
                                }
                            }
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{-iInstanceID}", PolicyID, null, null);
                            oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + "] - PolicySequenceNumber :" + PolicySequenceNumber;
                            oXID.SaveErrortoDB(oResult);
                            foreach (var fields in oBOI.Attributes.Where(m => m.Key.Contains("FK")).Select(m => m.Value).ToList())
                            {
                                if (!OQSD.ContainsKey(fields.sName))
                                {
                                    OQSD[fields.sName] = new CNV { sName = fields.sName, sValue = fields.sValue };
                                }
                            }
                            var sProcuctVersionID = oBOI.Attributes.Where(m => m.Key.Contains("FKiProductVersionID")).Select(m => m.Value.sValue).FirstOrDefault();
                            //var oProductVersionI = oIXI.BOI("ProductVersion_T", sProcuctVersionID);

                            if (!OQSD.ContainsKey("FKiProductID"))
                            {
                                OQSD["FKiProductID"] = new CNV { sName = "FKiProductID", sValue = ProductID };
                            }

                            if (!OQSD.ContainsKey("FKiQuoteID"))
                            {
                                OQSD["FKiQuoteID"] = new CNV { sName = "FKiQuoteID", sValue = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue };
                            }
                        }
                        var iPaymentType = oQsInstance.XIIValues("iClientPayment");
                        oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + "] - iPaymentType:" + iPaymentType;
                        oXID.SaveErrortoDB(oResult);
                        var sourceD = (XIDSource)oCache.GetObjectFromCache("source", "", oQsInstance.FKiSourceID.ToString());
                        iAccountCategory = sourceD.refAccountCategory;
                        XIBOBuilding oBOBuilding = new XIBOBuilding();
                        foreach (var oQS in oQsInstance.XIValues)
                        {
                            if (!OQSD.ContainsKey(oQS.Key))
                            {
                                OQSD.Add(oQS.Key, new CNV { sName = oQS.Key, sValue = oQS.Value.sValue });
                            }
                        }
                        if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                        {
                            //sCoverEnd
                            sCoverStart = oQsInstance.XIIValues("dCoverStart");
                        }
                        if (iPaymentMethodType != 0 && iPaymentMethodType == 10 && iQSType == 10)
                        {
                            if (!OQSD.ContainsKey("iStatus"))
                            {
                                OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "20" };
                            }
                            if (!OQSD.ContainsKey("iPolicyStatus"))
                            {
                                OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "20" };
                            }
                        }
                        else if ((iPaymentMethodType != 0 && iPaymentMethodType == 10 && iQSType == 20) || oBOI.AttributeI("iPaymentMethodType").sValue == "3")
                        {
                            if (!OQSD.ContainsKey("iStatus"))
                            {
                                OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "10" };
                            }
                            if (!OQSD.ContainsKey("iPolicyStatus"))
                            {
                                OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "10" };
                            }
                        }
                        else
                        {
                            if (!OQSD.ContainsKey("iStatus"))
                            {
                                OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "5" };
                            }
                            if (!OQSD.ContainsKey("iPolicyStatus"))
                            {
                                OQSD["iPolicyStatus"] = new CNV { sName = "iPolicyStatus", sValue = "5" };
                            }
                        }
                        if (!OQSD.ContainsKey("FKsPostUserID") && OQSD.ContainsKey("FKiPostUserID"))
                        {
                            var sOwner = OQSD["FKiPostUserID"].sValue;
                            int iOwner = 0;
                            if (int.TryParse(sOwner, out iOwner))
                            {
                                var oOwner = (XIInfraUsers)oUser.Get_UserDetails(sDataBase, iOwner).oResult;
                                if (oOwner != null)
                                {
                                    OQSD["FKsPostUserID"] = new CNV { sName = "FKsPostUserID", sValue = oOwner.sFirstName + " " + oOwner.sLastName };
                                }
                            }

                        }
                        //}
                        List<CNV> oPaymentNV = new List<CNV>();
                        oPaymentNV.Add(new CNV { sName = "FKiQuoteID", sValue = QuoteID });
                        oPaymentNV.Add(new CNV { sName = "iStatus", sValue = "10" });
                        var oPaymentI = oIXI.BOI("PaymentDetails_T", "", "Create", oPaymentNV);
                        if ((bIsWithOutPayment == "true" || bIsWithOutPayment == "on") && oPaymentI == null)
                        {
                            if (!OQSD.ContainsKey("rPaidAmount"))
                            {
                                OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = "0.00" };
                            }
                            if (!OQSD.ContainsKey("rBalance"))
                            {
                                OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = oBOI.Attributes["rPrice"].sValue };
                            }
                            else
                            {
                                double rPFAmount = 0;
                                double rPreviousPF = 0;
                                if (double.TryParse(oBOI.Attributes["rPrice"].sValue, out rPFAmount))
                                {
                                }
                                if (double.TryParse(OQSD["rBalance"].sValue, out rPreviousPF))
                                {
                                }
                                OQSD["rBalance"].sValue = String.Format("{0:0.00}", (rPFAmount + rPreviousPF));
                            }
                            if (!OQSD.ContainsKey("rTotalPremium"))
                            {
                                double rTotalPremium = 0;
                                if (double.TryParse(oBOI.Attributes["rPrice"].sValue, out rTotalPremium))
                                {
                                }
                                OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = rTotalPremium.ToString() };
                            }
                            if (!OQSD.ContainsKey("rCurrentPolicyTotalPremium"))
                            {
                                double rTotalPremium = 0;
                                if (double.TryParse(oBOI.Attributes["rPrice"].sValue, out rTotalPremium))
                                {
                                }
                                OQSD["rCurrentPolicyTotalPremium"] = new CNV { sName = "rCurrentPolicyTotalPremium", sValue = rTotalPremium.ToString() };
                            }
                            if (!OQSD.ContainsKey("bIsWithoutPayment"))
                            {
                                OQSD["bIsWithoutPayment"] = new CNV { sName = "bIsWithoutPayment", sValue = "true" };
                            }
                        }
                        //For Public QS, if payment is not done showing an error message
                        if (iQSType == 20 && oPaymentI == null && string.IsNullOrEmpty(bIsSubQS))
                        {

                            string skey = "StepMessage";
                            Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                            { dictMsgs.Add("20", "Something went wrong!! Please try again or contact admin"); }
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                            List<CNV> oLeadNV = new List<CNV>();
                            oLeadNV.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSInstanceGUID.ToString() });
                            var oLeadI = oIXI.BOI("Lead_T", "", "Create", oLeadNV);
                            if (oLeadI != null && oLeadI.Attributes.Count > 0 && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                            {
                                XIIBO oLCBOI = new XIIBO();
                                var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                                if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                                {
                                    oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue, bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                                {
                                    oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                                {
                                    oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInsatnceID.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("FKiQSIIDXIGUID"))
                                {
                                    oLCBOI.Attributes.Add("FKiQSIIDXIGUID", new XIIAttribute() { sName = "FKiQSIIDXIGUID", sValue = QSInstanceGUID.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                                {
                                    oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Payment", bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                                {
                                    oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = "Client tried without payment", bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                                {
                                    oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = "Declined policy", bDirty = true });
                                }
                                oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                                oLCBOI.BOD = oBOInsatnce.BOD;
                                oLCBOI.Save(oLCBOI);
                            }
                        }
                        else
                        {
                            if (!OQSD.ContainsKey("rPaidAmount"))
                            {
                                OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = oBOI.Attributes["rPayableAmount"].sValue };
                            }
                            if (!OQSD.ContainsKey("rGrossPremium"))
                            {
                                OQSD["rGrossPremium"] = new CNV { sName = "rGrossPremium", sValue = oBOI.Attributes["rFinalQuote"].sValue };
                            }
                            if (!OQSD.ContainsKey("rNetPremium"))
                            {
                                OQSD["rNetPremium"] = new CNV { sName = "rNetPremium", sValue = String.Format("{0:0.00}", rNetPremium) };
                            }
                            if (!OQSD.ContainsKey("rBalance"))
                            {
                                OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = oBOI.Attributes["rPremiumFinanceAmount"].sValue };
                            }
                            if (!OQSD.ContainsKey("rTotalPremium"))
                            {
                                double rTotalPremium = 0;
                                if (double.TryParse(oBOI.Attributes["rFinalPremium"].sValue, out rTotalPremium))
                                {
                                }
                                OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = rTotalPremium.ToString() };
                            }
                            if (!OQSD.ContainsKey("rQuotePremium"))
                            {
                                OQSD["rQuotePremium"] = new CNV { sName = "rQuotePremium", sValue = oBOI.Attributes["rPrice"].sValue };
                            }
                            if (!OQSD.ContainsKey("rMTATotal"))
                            {
                                OQSD["rMTATotal"] = new CNV { sName = "rMTATotal", sValue = "0.00" };
                            }
                            if (!OQSD.ContainsKey("sPolicyNo"))
                            {
                                OQSD["sPolicyNo"] = new CNV { sName = "sPolicyNo", sValue = PolicySequenceNumber };
                            }
                            string CoverStart = "";
                            XIIBO oBOIns = new XIIBO();
                            DateTime dtNow = DateTime.Now;
                            var startDate = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                            if (OQSD.ContainsKey("tStartTime"))
                            {
                                CoverStart = OQSD["tStartTime"].sValue;
                            }
                            else if (startDate.Date == dtNow.Date)
                            {
                                CoverStart = dtNow.ToString(XIConstant.Time_Format);
                            }
                            else
                            {
                                CoverStart = "12:00:00"; //DateTime.Now.TimeOfDay; //dt.TimeOfDay;
                            }
                            if (!OQSD.ContainsKey("tCoverStart"))
                            {
                                OQSD["tCoverStart"] = new CNV { sName = "tCoverStart", sValue = CoverStart.ToString() };
                            }
                            if (!OQSD.ContainsKey("tCurrentPolicyCoverStart"))
                            {
                                OQSD["tCurrentPolicyCoverStart"] = new CNV { sName = "tCurrentPolicyCoverStart", sValue = CoverStart };
                            }
                            if (!OQSD.ContainsKey("dEffectiveFrom"))
                            {
                                OQSD["dEffectiveFrom"] = new CNV { sName = "dEffectiveFrom", sValue = sCoverStart };
                            }
                            if (!string.IsNullOrEmpty(sTranstype) && sTranstype.ToLower() == "Renewal".ToLower())
                            {
                                //XIIBO oBOIns = new XIIBO();
                                if (OQSD.ContainsKey("dCurrentPolicyOnCover"))
                                {
                                    string RenewalStart = OQSD["dCurrentPolicyOnCover"].sValue;
                                    if (!string.IsNullOrEmpty(RenewalStart))
                                    {
                                        //oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                        DateTime dt = oBOIns.ConvertToDtTime(RenewalStart);
                                        oResult.sMessage = "dCoverEnd after conversion" + dt;
                                        if (dt != DateTime.MinValue)
                                        {
                                            //DateTime dCoverStart = dt.AddDays(1);
                                            //if (OQSD.ContainsKey("dCoverStart"))
                                            //{
                                            //    OQSD["dCoverStart"] = new CNV { sName = "dCoverStart", sValue = dCoverStart.ToString() };
                                            //}
                                            OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                        }
                                    }
                                    else
                                    {
                                        oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                        DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                                        oResult.sMessage = "dCoverStart after conversion" + dt;
                                        if (dt != DateTime.MinValue)
                                        {
                                            OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                        }
                                    }
                                }
                                else
                                {
                                    oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                    DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                                    oResult.sMessage = "dCoverStart after conversion" + dt;
                                    if (dt != DateTime.MinValue)
                                    {
                                        OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                    }
                                }
                            }
                            if (!OQSD.ContainsKey("dCoverEnd"))
                            {
                                //XIIBO oBOIns = new XIIBO();
                                DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                                oResult.sMessage = "dCoverStart after conversion" + dt;
                                if (dt != DateTime.MinValue)
                                {
                                    OQSD["dCoverEnd"] = new CNV { sName = "dCoverEnd", sValue = dt.AddYears(1).AddDays(iAddDaysToCoverEnd).ToString() };
                                }
                            }
                            if (!OQSD.ContainsKey("dCurrentPolicyOnCover"))
                            {
                                OQSD["dCurrentPolicyOnCover"] = new CNV { sName = "dCurrentPolicyOnCover", sValue = OQSD["dCoverStart"].sValue };
                            }
                            if (!OQSD.ContainsKey("dLastInsurance"))
                            {
                                //XIIBO oBOIns = new XIIBO();
                                oResult.sMessage = "dCoverStart before conversion" + OQSD["dCoverStart"].sValue;
                                DateTime dt = oBOIns.ConvertToDtTime(OQSD["dCoverStart"].sValue);
                                oResult.sMessage = "dCoverStart after conversion" + dt;
                                if (dt != DateTime.MinValue)
                                {
                                    OQSD["dLastInsurance"] = new CNV { sName = "dLastInsurance", sValue = dt.AddYears(1).ToString() };
                                }
                            }
                            if (!OQSD.ContainsKey("tCoverEnd"))
                            {
                                OQSD["tCoverEnd"] = new CNV { sName = "tCoverEnd", sValue = tCoverEnd };
                            }
                            if (!OQSD.ContainsKey("dCreated"))
                            {
                                OQSD["dCreated"] = new CNV { sName = "dCreated", sValue = DateTime.Now.ToString() };
                            }
                            if (!OQSD.ContainsKey("FKiSupplierID"))
                            {
                                OQSD["FKiSupplierID"] = new CNV { sName = "FKiSupplierID", sValue = iSupplierID.ToString() };
                            }
                            if (!OQSD.ContainsKey("sAddonID"))
                            {
                                List<string> oAddonID = new List<string>();
                                string sAddon = string.Empty;
                                QueryEngine oQE = new QueryEngine();
                                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                                XIWhereParams oWP = new XIWhereParams();
                                oWP.sField = "FKiQsInstanceIDXIGUID";
                                oWP.sOperator = "=";
                                oWP.sValue = QSInstanceGUID.ToString();
                                oWParams.Add(oWP);
                                XIWhereParams oWP1 = new XIWhereParams();
                                oWP1.sField = "iStatus";
                                oWP1.sOperator = "=";
                                oWP1.sValue = "0";
                                oWParams.Add(oWP1);
                                oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                                List<SqlParameter> SqlParams = new List<SqlParameter>();
                                SqlParams.Add(new SqlParameter { ParameterName = "@FKiQsInstanceIDXIGUID", Value = QSInstanceGUID.ToString() });
                                SqlParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "0" });
                                SqlParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                                //load requirement template definition of productid and FKiTransactionTypeID
                                oQE.AddBO("ACPurchase_T", "Create", oWParams);
                                CResult oCresult = oQE.BuildQuery();
                                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                                if (oCresult.bOK && oCresult.oResult != null)
                                {
                                    var sSql = (string)oCresult.oResult;
                                    ExecutionEngine oEE = new ExecutionEngine();
                                    oEE.XIDataSource = oQE.XIDataSource;
                                    oEE.sSQL = sSql;
                                    oEE.SqlParams = SqlParams;
                                    var oQResult = oEE.Execute();
                                    if (oQResult.bOK && oQResult.oResult != null)
                                    {
                                        //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                                        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                        foreach (var BOI in oBOIList)
                                        {
                                            if (BOI.Attributes.ContainsKey("refAddOn"))
                                            {
                                                if (!string.IsNullOrEmpty(BOI.Attributes["refAddOn"].sValue))
                                                {
                                                    oAddonID.Add(BOI.Attributes["refAddOn"].sValue);
                                                }
                                            }
                                        }
                                        sAddon = string.Join("|||", oAddonID);
                                    }
                                }
                                OQSD["sAddonID"] = new CNV { sName = "sAddonID", sValue = sAddon };
                            }
                            if (!OQSD.ContainsKey("sAddress"))
                            {
                                OQSD["sAddress"] = new CNV { sName = "sAddress", sValue = sAddress };
                            }
                            if (!OQSD.ContainsKey("FKiSourceID"))
                            {
                                OQSD["FKiSourceID"] = new CNV { sName = "FKiSourceID", sValue = oQsInstance.FKiSourceID.ToString() };
                            }
                            if (!OQSD.ContainsKey("rXSCompulsary"))
                            {
                                string SCompulsary = oBOI.Attributes["rCompulsoryExcess"].sValue;
                                OQSD["rXSCompulsary"] = new CNV { sName = "rXSCompulsary", sValue = SCompulsary };
                            }
                            if (!OQSD.ContainsKey("refAccountCategory"))
                            {
                                OQSD["refAccountCategory"] = new CNV { sName = "refAccountCategory", sValue = iAccountCategory.ToString() };
                            }
                            if (!OQSD.ContainsKey("sExternalRefID"))
                            {
                                OQSD["sExternalRefID"] = new CNV { sName = "sExternalRefID", sValue = oQsInstance.sExternalRefID };
                            }
                            if (!OQSD.ContainsKey("FKiClassID"))
                            {
                                OQSD["FKiClassID"] = new CNV { sName = "FKiClassID", sValue = oQsInstance.FKiClassID.ToString() };
                            }
                            if (oQsInstance.FKiClassID > 0)
                            {
                                XIDClass oClassD = (XIDClass)oCache.GetObjectFromCache(XIConstant.CacheClass, null, oQsInstance.FKiClassID.ToString());
                                if (!OQSD.ContainsKey("FKsClass"))
                                {
                                    OQSD["FKsClass"] = new CNV { sName = "FKsClass", sValue = oClassD.sName };
                                }
                            }
                            if (!OQSD.ContainsKey("bDirectMailOptOut"))
                            {
                                OQSD["bDirectMailOptOut"] = new CNV { sName = "bDirectMailOptOut", sValue = oQsInstance.XIIValues("bIsEmail") };
                            }
                            List<CNV> oLeadNV = new List<CNV>();
                            oLeadNV.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSInstanceGUID });
                            var oLeadI = oIXI.BOI("Lead_T", "", "Create", oLeadNV);
                            if (!OQSD.ContainsKey("FKsUserID"))
                            {
                                sRenewalUserName = string.IsNullOrEmpty(oLeadI.AttributeI("sHandler").sValue) ? sUserName : oLeadI.AttributeI("sHandler").sValue;
                                FKiNBUser = string.IsNullOrEmpty(oLeadI.AttributeI("FKiUserID").sValue) ? iUserID.ToString() : oLeadI.AttributeI("FKiUserID").sValue;
                                OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = sRenewalUserName };
                                OQSD["FkiNBUser"] = new CNV { sName = "FkiNBUser", sValue = FKiNBUser };
                            }
                            if (!OQSD.ContainsKey("FKiOrgID"))
                            {
                                OQSD["FKiOrgID"] = new CNV { sName = "FKiOrgID", sValue = oInfo.iOrganizationID.ToString() };
                            }
                            if (!OQSD.ContainsKey("bIsClientEmail"))
                            {
                                OQSD["bIsClientEmail"] = new CNV { sName = "bIsClientEmail", sValue = "true" };
                            }
                            oLeadNV = new List<CNV>();
                            oLeadNV.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSInstanceGUID });
                            oLeadI = oIXI.BOI("Lead_T", "", "Create", oLeadNV);
                            if (oLeadI != null && oLeadI.Attributes.Count > 0 && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                            {
                                if (!OQSD.ContainsKey("sFirstName"))
                                {
                                    OQSD["sFirstName"] = new CNV { sName = "sFirstName", sValue = oLeadI.Attributes["sFirstName"].sValue };
                                }
                                if (!OQSD.ContainsKey("sLastName"))
                                {
                                    OQSD["sLastName"] = new CNV { sName = "sLastName", sValue = oLeadI.Attributes["sLastName"].sValue };
                                }
                                if (!OQSD.ContainsKey("sName"))
                                {
                                    OQSD["sName"] = new CNV { sName = "sName", sValue = oLeadI.Attributes["sFirstName"].sValue + " " + oLeadI.Attributes["sLastName"].sValue };
                                }
                            }
                            if (!OQSD.ContainsKey("FKiPublicQSInstanceIDXIGUID"))
                            {
                                OQSD["FKiPublicQSInstanceIDXIGUID"] = new CNV { sName = "FKiPublicQSInstanceIDXIGUID", sValue = oParams.Where(x => x.sName == "iQSInstanceID").Select(t => t.sValue).FirstOrDefault() };
                            }
                            // Create policy
                            var PolicyData = oBO.BuildBoObject("ACPolicy_T", "Create", OQSD, PolicyID);
                            if (PolicyData.xiStatus == 0 && PolicyData.oResult != null)
                            {
                                var oRes = (CResult)PolicyData.oResult;
                                oPolicy = (XIIBO)oRes.oResult;
                                if (int.TryParse(oPolicy.Attributes["ID"].sValue, out iPolicyID))
                                { }
                                int iVersion = 1;

                                XID1Click PV1Click = new XID1Click();
                                var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Policy SignalR");
                                PV1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                                var oOneClick = PV1Click.OneClick_Execute();
                                foreach (var item1 in oOneClick.Values)
                                {
                                    CNV Nparam = new CNV();
                                    List<CNV> oNparams = new List<CNV>();
                                    oNparams = new List<CNV>();
                                    Nparam = new CNV();
                                    Nparam.sName = "iInstanceID";
                                    Nparam.sValue = oPolicy.Attributes["ID"].sValue;
                                    oNparams.Add(Nparam);
                                    Nparam = new CNV();
                                    Nparam.sName = "iInstanceIDXIGUID";
                                    Nparam.sValue = "";//oPolicy.Attributes["XIGUID"].sValue;
                                    oNparams.Add(Nparam);
                                    Nparam = new CNV();
                                    Nparam.sName = "FKiBOID";
                                    Nparam.sValue = item1.Attributes["fkiboid"].sValue;
                                    oNparams.Add(Nparam);
                                    Nparam = new CNV();
                                    Nparam.sName = "FKiBOIDXIGUID";
                                    Nparam.sValue = "";//item1.Attributes["fkiboidxiguid"].sValue;
                                    oNparams.Add(Nparam);
                                    Nparam = new CNV();
                                    Nparam.sName = "sAlertMessage";
                                    Nparam.sValue = item1.Attributes["sAlertText"].sValue;
                                    oNparams.Add(Nparam);
                                    Nparam = new CNV();
                                    Nparam.sName = "iUserID";
                                    Nparam.sValue = item1.Attributes["iUserID"].sValue;
                                    oNparams.Add(Nparam);
                                    Nparam = new CNV();
                                    Nparam.sName = "sAlertType";
                                    Nparam.sValue = item1.Attributes["sConfig"].sValue;
                                    oNparams.Add(Nparam);
                                    NotificationInsersion(oNparams);
                                }



                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", oPolicy.Attributes["ID"].sValue, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "-iPolicyID", oPolicy.Attributes["ID"].sValue, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyHolderName}", oPolicy.Attributes["sName"].sValue, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sPolicyNo}", PolicySequenceNumber, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iCustomerID}", oPolicy.Attributes["FKiCustomerID"].sValue, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|dInceptionDate}", oPolicy.Attributes["dCoverStart"].sValue, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|ActiveBO}", oPolicy.BOD.Name, null, null);
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|" + oPolicy.BOD.Name + ".id}", oPolicy.Attributes["ID"].sValue, null, null);
                                oResult.oTraceStack.Add(new CNV { sName = "Create Policy", sValue = "Success: Policy Created Sucessfully" });
                                CNV oNV1 = new CNV();
                                oNV1.sName = "FKi" + oPolicy.BOD.TableName.Split('_').FirstOrDefault() + oPolicy.BOD.sPrimaryKey;
                                oNV1.sValue = oPolicy.Attributes[oPolicy.BOD.sPrimaryKey].sValue;
                                int iACPolicyID = Convert.ToInt32(oPolicy.Attributes[oPolicy.BOD.sPrimaryKey].sValue);
                                oResult.oTraceStack.Add(new CNV { sName = "Policy ID", sValue = "Policy ID:" + oNV1.sValue });
                                if (!OQSD.ContainsKey(oNV1.sName))
                                {
                                    OQSD.Add(oNV1.sName, oNV1);
                                }
                                List<CNV> oNV = new List<CNV>();
                                oNV.Add(oNV1);
                                var PolicyVersionID = "";
                                var oPolicyVersionI = oXII.BOI("Policy Version", "", "Create", oNV);
                                if (!string.IsNullOrEmpty(sPolicyVersionID))
                                {
                                    if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                                    {
                                        if (!OQSD.ContainsKey("iType"))
                                        {
                                            OQSD["iType"] = new CNV { sName = "iType", sValue = "25" };
                                        }
                                        if (!OQSD.ContainsKey("rMTACost"))
                                        {
                                            OQSD["rMTACost"] = new CNV { sName = "rMTACost", sValue = "0.00" };
                                        }
                                        if (!OQSD.ContainsKey("rPaidAmount"))
                                        {
                                            OQSD["rPaidAmount"] = new CNV { sName = "rPaidAmount", sValue = oBOI.Attributes["rPayableAmount"].sValue };
                                        }
                                        if (!OQSD.ContainsKey("rGrossPremium"))
                                        {
                                            OQSD["rGrossPremium"] = new CNV { sName = "rGrossPremium", sValue = oBOI.Attributes["rFinalQuote"].sValue };
                                        }
                                        if (!OQSD.ContainsKey("rNetPremium"))
                                        {
                                            OQSD["rNetPremium"] = new CNV { sName = "rNetPremium", sValue = String.Format("{0:0.00}", rNetPremium) };
                                        }
                                        if (!OQSD.ContainsKey("rBalance"))
                                        {
                                            OQSD["rBalance"] = new CNV { sName = "rBalance", sValue = oBOI.Attributes["rPremiumFinanceAmount"].sValue };
                                        }
                                        if (!OQSD.ContainsKey("rTotalPremium"))
                                        {
                                            double rTotalPremium = 0;
                                            if (double.TryParse(oBOI.Attributes["rFinalQuote"].sValue, out rTotalPremium))
                                            {
                                            }
                                            OQSD["rTotalPremium"] = new CNV { sName = "rTotalPremium", sValue = rTotalPremium.ToString() };
                                        }
                                    }

                                    QueryEngine oQE = new QueryEngine();
                                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                                    List<SqlParameter> SqlParams = new List<SqlParameter>();

                                    oWParams.Add(new XIWhereParams { sField = "FKi" + oPolicy.BOD.TableName.Split('_').FirstOrDefault() + oPolicy.BOD.sPrimaryKey, sOperator = "=", sValue = iACPolicyID.ToString() });
                                    oWParams.Add(new XIWhereParams { sField = "id", sOperator = "!=", sValue = sPolicyVersionID });
                                    oWParams.Add(new XIWhereParams { sField = "iStatus", sOperator = "=", sValue = "10" });
                                    SqlParams.Add(new SqlParameter { ParameterName = "@FKi" + oPolicy.BOD.TableName.Split('_').FirstOrDefault() + oPolicy.BOD.sPrimaryKey, Value = iACPolicyID.ToString() });
                                    SqlParams.Add(new SqlParameter { ParameterName = "@id", Value = sPolicyVersionID });
                                    SqlParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "10" });
                                    oQE.AddBO("ACPolicyVersion_T", "", oWParams);
                                    CResult oCresult = oQE.BuildQuery();
                                    if (oCresult.bOK && oCresult.oResult != null)
                                    {
                                        var sSql = (string)oCresult.oResult;
                                        ExecutionEngine oEE = new ExecutionEngine();
                                        oEE.XIDataSource = oQE.XIDataSource;
                                        oEE.sSQL = sSql;
                                        oEE.SqlParams = SqlParams;
                                        var oCResult = oEE.Execute();
                                        if (oCResult.bOK && oCResult.oResult != null)
                                        {
                                            var oBOIList = ((Dictionary<string, XIIBO>)oCResult.oResult).Values.ToList();
                                            var oBOD = oQE.QParams.FirstOrDefault().BOD;
                                            oBOIList.ForEach(x => x.BOD = oBOD);
                                            foreach (var instance in oBOIList)
                                            {
                                                double iDays = 0;
                                                double rTotalPremium = 0;
                                                string EffectiveFrom = string.Empty;
                                                if (instance.Attributes.ContainsKey("dEffectiveFrom"))
                                                {
                                                    EffectiveFrom = instance.Attributes["dEffectiveFrom"].sValue;
                                                    var Days = Convert.ToDateTime(sCoverStart) - Convert.ToDateTime(EffectiveFrom);
                                                    iDays = Days.TotalDays;
                                                }
                                                if (instance.Attributes.ContainsKey("rTotalPremium") && iDays > 0)
                                                {
                                                    if (double.TryParse(instance.Attributes["rTotalPremium"].sValue, out rTotalPremium))
                                                    {
                                                        instance.Attributes["rUsedPremium"].sValue = String.Format("{0:0.00}", (rTotalPremium * iDays / 365));
                                                        instance.Attributes["rUsedPremium"].bDirty = true;
                                                    }
                                                }
                                                if (instance.Attributes.ContainsKey("dEffectiveTo"))
                                                {
                                                    //instance.SetAttribute("dEffectiveTo", sCoverStart);
                                                    instance.Attributes["dEffectiveTo"].sValue = sCoverStart;
                                                    instance.Attributes["dEffectiveTo"].bDirty = true;
                                                    instance.Attributes["iStatus"].sValue = "20";
                                                    instance.Attributes["iStatus"].bDirty = true;
                                                    //instance.SetAttribute("iStatus", "20");
                                                    instance.Save(instance);
                                                }
                                                if (instance.Attributes.ContainsKey("sVersion") && (string.IsNullOrEmpty(sTranstype) || (!string.IsNullOrEmpty(sTranstype) && sTranstype.ToLower() != "Renewal".ToLower())))
                                                {
                                                    int iPreVersion = 0;
                                                    if (int.TryParse(instance.Attributes["sVersion"].sValue, out iPreVersion))
                                                    {
                                                        iVersion = iPreVersion + 1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (!OQSD.ContainsKey("rMTACost"))
                                    {
                                        OQSD["rMTACost"] = new CNV { sName = "rMTACost", sValue = oBOI.Attributes["rFinalPremium"].sValue };
                                    }
                                    if (!OQSD.ContainsKey("iType"))
                                    {
                                        OQSD["iType"] = new CNV { sName = "iType", sValue = "15" };
                                    }
                                }


                                //if (oPolicyVersionI != null && oPolicyVersionI.Attributes != null && oPolicyVersionI.Attributes.Count > 0)
                                //{
                                //    if (oPolicyVersionI.Attributes.ContainsKey(oPolicyVersionI.BOD.sPrimaryKey))
                                //    {
                                //        PolicyVersionID = oPolicyVersionI.Attributes[oPolicyVersionI.BOD.sPrimaryKey].sValue;
                                //    }
                                //}
                                oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _ iPolicyID: " + iPolicyID + "] - PolicyVersionID :" + PolicyVersionID;
                                oXID.SaveErrortoDB(oResult, iQSInstanceID, iPolicyID);
                                if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "rebroke" && !OQSD.ContainsKey("iType"))
                                {
                                    OQSD["iType"] = new CNV { sName = "iType", sValue = "50" };
                                }
                                //Update Previous version
                                if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                {
                                    DateTime dt = oBO.ConvertToDtTime(sCoverStart);
                                    TimeSpan tEnd = new TimeSpan();
                                    if (!string.IsNullOrEmpty(tOldCoverEnd))
                                    {
                                        if (TimeSpan.TryParse(tOldCoverEnd, out tEnd))
                                        {
                                            dt = dt.Add(tEnd);
                                        }
                                    }
                                    if (OQSD.ContainsKey("dEffectiveFrom"))
                                    {
                                        OQSD["dEffectiveFrom"] = new CNV { sName = "dEffectiveFrom", sValue = dt.ToString() };
                                    }
                                    if (!OQSD.ContainsKey("dEffectiveTo"))
                                    {
                                        OQSD["dEffectiveTo"] = new CNV { sName = "dEffectiveTo", sValue = oPolicy.Attributes["dCoverEnd"].sValue };
                                    }
                                }
                                else
                                {
                                    // Create policy Version
                                    if (!OQSD.ContainsKey("dEffectiveFrom"))
                                    {
                                        OQSD["dEffectiveFrom"] = new CNV { sName = "dEffectiveFrom", sValue = sCoverStart };
                                    }
                                    else
                                    {
                                        OQSD["dEffectiveFrom"].sValue = sCoverStart;
                                    }
                                    if (!OQSD.ContainsKey("dEffectiveTo") && oPolicy.Attributes.ContainsKey("dCoverEnd"))
                                    {
                                        OQSD["dEffectiveTo"] = new CNV { sName = "dEffectiveTo", sValue = oPolicy.Attributes["dCoverEnd"].sValue };
                                    }
                                    else
                                    {
                                        OQSD["dEffectiveTo"].sValue = oPolicy.Attributes["dCoverEnd"].sValue;
                                    }
                                }
                                if (!OQSD.ContainsKey("iStatus"))
                                {
                                    OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "10" };
                                }
                                else
                                {
                                    OQSD["iStatus"].sValue = "10";
                                }
                                if (!OQSD.ContainsKey("rMTACost"))
                                {
                                    OQSD["rMTACost"] = new CNV { sName = "rMTACost", sValue = "0.00" };
                                }
                                if ((bIsWithOutPayment == "true" || bIsWithOutPayment == "on") && oPaymentI == null)
                                {
                                    OQSD["rBalance"].sValue = oBOI.Attributes["rFinalPremium"].sValue;
                                }
                                else
                                {
                                    OQSD["rBalance"].sValue = "0.00";
                                }
                                if (!OQSD.ContainsKey("sVersion"))
                                {
                                    OQSD["sVersion"] = new CNV { sName = "sVersion", sValue = iVersion.ToString() };
                                }
                                if (!OQSD.ContainsKey("iType"))
                                {
                                    OQSD["iType"] = new CNV { sName = "iType", sValue = "10" };
                                }
                                if (!OQSD.ContainsKey("FKsUserID"))
                                {
                                    OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = sUserName };
                                }
                                else
                                {
                                    OQSD["FKsUserID"].sValue = sUserName;
                                }
                                if (!OQSD.ContainsKey("FKiQSInstanceIDXIGUID"))
                                {
                                    OQSD["FKiQSInstanceIDXIGUID"] = new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = oQsInstance.XIGUID.ToString() };
                                }
                                else
                                {
                                    OQSD["FKiQSInstanceIDXIGUID"].sValue = oQsInstance.XIGUID.ToString();
                                }
                                int iPolicyVersionID = 0;
                                var PolicyVersionData = oBO.BuildBoObject("ACPolicyVersion_T", "", OQSD, sPolicyVersionID);
                                if (PolicyVersionData.xiStatus == 0 && PolicyVersionData.oResult != null)
                                {
                                    oResult.oTraceStack.Add(new CNV { sName = "Create Policy Version", sValue = "Success: Policy Version Created Sucessfully" });
                                    var oPolicyVersionRes = (CResult)PolicyVersionData.oResult;
                                    var oPolicyVersion = (XIIBO)oPolicyVersionRes.oResult;
                                    var sPolVersionID = oPolicyVersion.Attributes[oPolicyVersion.BOD.sPrimaryKey].sValue;
                                    int.TryParse(sPolVersionID, out iPolicyVersionID);
                                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}", iPolicyVersionID.ToString(), null, null);
                                    oCache.Set_ParamVal(sSessionID, sGUID, null, "-iACPolicyVersionID", iPolicyVersionID.ToString(), null, null);
                                    if (oPolicy.Attributes.ContainsKey("iVersionNo") && (string.IsNullOrEmpty(sPolicyVersionID) || (!string.IsNullOrEmpty(sPolicyVersionID) && OQSD["iPolicyStatus"].sValue == "10")))
                                    {
                                        oPolicy.Attributes["iVersionNo"].sValue = iPolicyVersionID.ToString();
                                        oPolicy.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                                        // Update policy with version
                                        var UpdatedPolicyData = oBOI.Save(oPolicy);
                                    }
                                    CNV oNV2 = new CNV();
                                    oNV2.sName = "FKi" + oPolicyVersion.BOD.TableName.Split('_').FirstOrDefault() + oPolicyVersion.BOD.sPrimaryKey;
                                    oNV2.sValue = iPolicyVersionID.ToString();
                                    oResult.oTraceStack.Add(new CNV { sName = "Policy Version ID", sValue = "Policy Version ID:" + oNV2.sValue });
                                    if (!OQSD.ContainsKey(oNV2.sName))
                                    {
                                        OQSD.Add(oNV2.sName, oNV2);
                                    }
                                }
                                oResult.oTraceStack.Add(new CNV { sName = "QSI ID", sValue = "QS Instance ID:" + oQsInstance.ID });
                                // Update QSInstance with version
                                var QsInstanceData = oBO.BuildBoObject("QS Instance", "Create", OQSD, oQsInstance.ID.ToString(), null, null, null, oQsInstance.XIGUID.ToString());
                                if (QsInstanceData.xiStatus == 0 && QsInstanceData.oResult != null)
                                {
                                    oResult.oTraceStack.Add(new CNV { sName = "Update QuestionSet Instance to policy version", sValue = "Success: QuestionSet Instance is Updated with policy version" });
                                }
                                // Update Quotes Status
                                if (oBOI.Attributes.ContainsKey("iStatus"))
                                {
                                    oBOI.Attributes["iStatus"] = new XIIAttribute { sValue = "10", bDirty = true, sName = "iStatus" };
                                    oBOI.Attributes[oBOI.BOD.sPrimaryKey].bDirty = true;
                                    oBO.Save(oBOI);
                                    var iID = oBOI.Attributes["FKiQSInstanceIDXIGUID"].sValue;
                                    QueryEngine oQE = new QueryEngine();
                                    List<SqlParameter> SqlParams = new List<SqlParameter>();
                                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                                    oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sValue = iID, sOperator = "=" });
                                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = iID });
                                    oQE.AddBO("Aggregations", "ID,iStatus", oWParams);
                                    CResult oCresult = oQE.BuildQuery();
                                    if (oCresult.bOK && oCresult.oResult != null)
                                    {
                                        var sSql = (string)oCresult.oResult;
                                        ExecutionEngine oEE = new ExecutionEngine();
                                        oEE.XIDataSource = oQE.XIDataSource;
                                        oEE.sSQL = sSql;
                                        oEE.SqlParams = SqlParams;
                                        var oQResult = oEE.Execute();
                                        if (oQResult.bOK && oQResult.oResult != null)
                                        {
                                            var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult);
                                            var oBOD = oQE.QParams.FirstOrDefault().BOD;
                                            oBOIList1.Values.ToList().ForEach(x => x.BOD = oBOD);
                                            var oBOIList = oBOIList1.Values.Where(m => m.Attributes[m.BOD.sPrimaryKey].sValue != QuoteID).ToList();
                                            foreach (var oQuoteI in oBOIList)
                                            {
                                                if (oQuoteI.Attributes.ContainsKey("iStatus"))
                                                {
                                                    oQuoteI.Attributes["iStatus"].sValue = "20";
                                                    oQuoteI.Attributes["iStatus"].bDirty = true;
                                                    oQuoteI.Attributes[oQuoteI.BOD.sPrimaryKey].bDirty = true;
                                                    oBO.Save(oQuoteI);
                                                }
                                            }
                                        }
                                    }
                                }
                                //List<CNV> oLeadNV = new List<CNV>();
                                //oLeadNV.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInsatnceID.ToString() });
                                //var oLeadI = oXII.BOI("Lead_T", "", "Create", oLeadNV);
                                if (oLeadI != null && oLeadI.Attributes.ContainsKey("iStatus"))
                                {
                                    var iPastStatus = oLeadI.Attributes["iStatus"].sValue;
                                    var sPastLeadStatus = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sValues == iPastStatus).Select(m => m.sOptionName).FirstOrDefault();
                                    if (sTranstype == "MTA" || sTransType == "MTA")
                                    {
                                        oLeadI.Attributes["iStatus"].sValue = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sOptionName == "MTA On Cover").Select(m => m.sValues).FirstOrDefault();
                                    }
                                    else if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "renewal")
                                    {
                                        oLeadI.Attributes["iStatus"].sValue = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sOptionName == "Renewed On Cover").Select(m => m.sValues).FirstOrDefault();
                                    }
                                    else if (!string.IsNullOrEmpty(sPolicyType) && sPolicyType.ToLower() == "rebroke")
                                    {
                                        oLeadI.Attributes["iStatus"].sValue = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sOptionName == "Re-Broke On Cover").Select(m => m.sValues).FirstOrDefault();
                                    }
                                    else
                                    {
                                        oLeadI.Attributes["iStatus"].sValue = "30";
                                    }
                                    oLeadI.Attributes["iStatus"].bDirty = true;
                                    oLeadI.Attributes["dPolicyDate"].sValue = DateTime.Now.ToString();
                                    oLeadI.Attributes["dPolicyDate"].bDirty = true;
                                    oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].bDirty = true;
                                    oBO.Save(oLeadI);

                                    //Save into LifeCycle
                                    long iLeadID = 0;
                                    var sLeadID = string.Empty;
                                    var sCurrentLeadStatus = oLeadI.BOD.Attributes["iStatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                    if (oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                                    {
                                        sLeadID = oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue;
                                    };
                                    long.TryParse(sLeadID, out iLeadID);
                                    XIIBO oLCBOI = new XIIBO();
                                    var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                                    {
                                        oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInsatnceID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiQSIIDXIGUID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiQSIIDXIGUID", new XIIAttribute() { sName = "FKiQSIIDXIGUID", sValue = QSInstanceGUID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                                    {
                                        oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Stage", bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                                    {
                                        oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sPastLeadStatus, bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                                    {
                                        oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sCurrentLeadStatus, bDirty = true });
                                    }
                                    oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                                    oLCBOI.BOD = oBOInsatnce.BOD;
                                    oLCBOI.Save(oLCBOI);
                                }
                                //Insert call for rebroke
                                if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal" && iParentPolicy > 0)
                                {
                                    XIIBO oCallI = new XIIBO();
                                    XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Call_T", null);
                                    oCallI.BOD = oBOD;
                                    oCallI.LoadBOI("AutoCreate");
                                    if (oCallI.Attributes.ContainsKey("fkiacpolicyid"))
                                    {
                                        oCallI.Attributes["fkiacpolicyid"].sValue = iPolicyID.ToString();
                                    }
                                    if (oCallI.Attributes.ContainsKey("sname"))
                                    {
                                        oCallI.Attributes["sname"].sValue = "Re-broked";
                                    }
                                    if (oCallI.Attributes.ContainsKey("snotes"))
                                    {
                                        oCallI.Attributes["snotes"].sValue = "Re-broke from Policy ID: " + iParentPolicy;
                                    }
                                    if (oCallI.Attributes.ContainsKey("istatus"))
                                    {
                                        oCallI.Attributes["istatus"].sValue = "10";
                                    }
                                    var oCallResult = oCallI.Save(oCallI, false);
                                }
                                var customerID = oPolicy.Attributes["FKiCustomerID"].sValue;
                                if ((string.IsNullOrEmpty(customerID) || customerID == "0") && oLeadI.Attributes.ContainsKey("fkiclientid"))
                                {
                                    customerID = oLeadI.Attributes["fkiclientid"].sValue;
                                }
                                if (string.IsNullOrEmpty(PolicyID) && !string.IsNullOrEmpty(customerID))
                                {
                                    int iPolicyCount = 0;
                                    var oCustomerI = oXII.BOI("Customer_T", customerID);
                                    if (oCustomerI != null && oCustomerI.Attributes.ContainsKey("ilivepolicycount"))
                                    {
                                        if (int.TryParse(oCustomerI.Attributes["ilivepolicycount"].sValue, out iPolicyCount))
                                        {
                                            oCustomerI.Attributes["ilivepolicycount"].sValue = (iPolicyCount + 1).ToString();
                                            oCustomerI.Attributes["ilivepolicycount"].bDirty = true;
                                            oCustomerI.Attributes["id"].bDirty = true;
                                            oCustomerI.Save(oCustomerI);
                                        }
                                    }
                                }
                                //var CustomerData = oBOI.BuildBoObject("Customer_T", "UpdateData", OQSD, customerID);

                                oParams.Add(new CNV { sName = "iACPolicyID", sValue = iACPolicyID.ToString() });
                                oParams.Add(new CNV { sName = "sPolicyNo", sValue = PolicySequenceNumber });
                                oParams.Add(new CNV { sName = "iPaymentMethodType", sValue = iPaymentMethodType.ToString() });
                                oParams.Add(new CNV { sName = "iQSType", sValue = iQSType.ToString() });
                                oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = iPolicyVersionID.ToString() });
                                sTranstype = sTranstype == sPolicyType ? sTransType : sPolicyType;
                                if (string.IsNullOrEmpty(sTranstype) && !string.IsNullOrEmpty(sTransType))
                                {
                                    sTranstype = sTransType;
                                }
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", sTranstype.ToString(), null, null);
                                oParams.Add(new CNV { sName = "sTranstype", sValue = sTranstype });
                                if (iQSType == 20 && string.IsNullOrEmpty(bIsSubQS))
                                {
                                    if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                                    {
                                        XIDefinitionBase oDef = new XIDefinitionBase();
                                        //var oParamsN = (List<CNV>)oDef.Clone(oParams);
                                        var oParamsN = oParams.GetCopy();
                                        Thread threadObj = new Thread(new ThreadStart(() => { ThreadRunMethods(oParamsN); }));
                                        threadObj.Start();
                                    }


                                    Thread threaInsertdObj = new Thread(new ThreadStart(() =>
                                    {
                                        ThreadInsertTransactions(oParams, iPaymentMethodType, string.IsNullOrEmpty(iPaymentType) ? 10 : Convert.ToInt32(iPaymentType));
                                    }));
                                    threaInsertdObj.Start();
                                }
                                else if (!string.IsNullOrEmpty(bIsSubQS))
                                {
                                    if (oParams.Count() > 0)
                                    {
                                        foreach (var item in oParams)
                                        {
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|" + item.sName + "}", item.sValue.ToString(), null, null);
                                        }
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|FKiProductID}", oBOI.AttributeI("FKiProductVersionID").sValue.ToString(), null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sQuoteGUID}", oBOI.AttributeI("sGUID").sValue.ToString(), null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}", oBOI.AttributeI("FKiQSInstanceIDXIGUID").sValue.ToString(), null, null);
                                    }
                                }
                                else
                                {
                                    if (oParams.Count() > 0)
                                    {
                                        foreach (var item in oParams)
                                        {
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|" + item.sName + "}", item.sValue.ToString(), null, null);
                                        }
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|FKiProductID}", oBOI.AttributeI("FKiProductVersionID").sValue.ToString(), null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sQuoteGUID}", oBOI.AttributeI("sGUID").sValue.ToString(), null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}", oBOI.AttributeI("FKiQSInstanceIDXIGUID").sValue.ToString(), null, null);
                                    }

                                    //Thread threaInsertdObj = new Thread(new ThreadStart(() =>
                                    //{
                                    //    ThreadInsertTransactions(oParams, iPaymentMethodType, string.IsNullOrEmpty(iPaymentType) ? 10 : Convert.ToInt32(iPaymentType));
                                    //}));
                                    //threaInsertdObj.Start();
                                }
                                //var oAddon = InsertAddonsToPolicy(oParams);
                                //var oAddonCollectionResult = oAddon.oTraceStack.ToList();
                                //foreach (var oresult in oAddonCollectionResult)
                                //{
                                //    oResult.oTraceStack.Add(oresult);
                                //}
                                //oResult.sMessage = "InsertAddonTransaction method called";
                                //oXID.SaveErrortoDB(oResult);
                            }
                        }

                    }
                    else
                    {
                        string skey = "StepMessage";
                        Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                        if (iQSType == 10) { dictMsgs.Add("10", "Policy already in Live."); } else { dictMsgs.Add("20", "Something went wrong!! Please try again or contact admin"); }
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                    }
                    string PCID = oParams.Where(m => m.sName.ToLower() == "PCID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    int iAlgorithumID = 0;
                    Guid AlgorithumIDGUID = new Guid();
                    int.TryParse(PCID, out iAlgorithumID);
                    Guid.TryParse(PCID, out AlgorithumIDGUID);
                    XIDAlgorithm oAlogD = new XIDAlgorithm();
                    var client = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductID}");
                    if (iAlgorithumID > 0)
                    {
                        oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, iAlgorithumID.ToString());
                    }
                    else if (AlgorithumIDGUID != null && AlgorithumIDGUID != Guid.Empty)
                    {
                        oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, AlgorithumIDGUID.ToString());
                    }
                    oAlogD.Execute_XIAlgorithm(sSessionID, sGUID);
                }
                else
                {
                    string skey = "StepMessage";
                    Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                    if (iQSType == 10)
                    {
                        dictMsgs.Add("10", "Please Confirm policy.");
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sInternalCurrentStep, null, null);
                    }
                    else
                    {
                        dictMsgs.Add("20", "Please Confirm policy");
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sPublicCurrentStep, null, null);
                    }
                    oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQSInstanceID);
            }
            return oResult;
        }
        public CResult ThreadGenerateDocuments(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iPolicyID = 0;
            int iQsInstanceID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var oPolicy = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string PolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(PolicyID, out iPolicyID))
                { }
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                //var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                var oBOI = oIXI.BOI("Aggregations", QuoteID);
                int iPaymentMethodType = 0;
                if (oBOI.Attributes != null)
                {
                    var InstanceID = oBOI.Attributes.Where(m => m.Key == "FKiQSInstanceID").Select(m => m.Value.sValue).FirstOrDefault();
                    if (int.TryParse(InstanceID, out iQsInstanceID))
                    { }
                    var sPaymentType = oBOI.Attributes.Where(m => m.Key == "iPaymentType").Select(m => m.Value.sValue).FirstOrDefault();
                    if (int.TryParse(sPaymentType, out iPaymentMethodType))
                    {
                        if (!oParams.Any(m => m.sName == "iPaymentMethodType"))
                        {
                            oParams.Add(new CNV { sName = "iPaymentMethodType", sValue = iPaymentMethodType.ToString() });
                        }
                    }
                    if (!oParams.Any(m => m.sName == "iQSInstanceID"))
                    {
                        oParams.Add(new CNV { sName = "iQSInstanceID", sValue = InstanceID });
                    }
                    if (oParams.Any(m => m.sName == "iQSInstanceID" && m.sValue == "0"))
                    {
                        oParams.Where(x => x.sName == "iQSInstanceID").ToList().ForEach(t => t.sValue = InstanceID);
                    }
                    if (!oParams.Any(m => m.sName == "sQSInstanceID"))
                    {
                        oParams.Add(new CNV { sName = "sQSInstanceID", sValue = InstanceID });
                    }
                    if (oParams.Any(m => m.sName == "sQSInstanceID" && m.sValue == "0"))
                    {
                        oParams.Where(x => x.sName == "sQSInstanceID").ToList().ForEach(t => t.sValue = InstanceID);
                    }
                }
                if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                {
                    XIDefinitionBase oDef = new XIDefinitionBase();
                    //var oParamsN = (List<CNV>)oDef.Clone(oParams);
                    var oParamsN = oParams.GetCopy();
                    Thread threadObj = new Thread(new ThreadStart(() => { ThreadRunMethods(oParamsN); }));
                    threadObj.Start();
                }

                Thread threaInsertdObj = new Thread(new ThreadStart(() =>
                {
                    ThreadInsertTransactions(oParams, iPaymentMethodType, iPaymentMethodType);
                }));
                threaInsertdObj.Start();
                //if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                //{
                //    Thread threadObj = new Thread(new ThreadStart(() => { GeneratePolicyDocuments(oParams); }));
                //    threadObj.Start();
                //}
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQsInstanceID + " _PolicyID: " + iPolicyID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQsInstanceID, iPolicyID);
            }
            return oResult;
        }
        public CResult GenerateDocuments(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iPolicyID = 0;
            int iQsInstanceID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var oPolicy = new XIIBO();
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string PolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(PolicyID, out iPolicyID))
                { }
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                var oBOI = oIXI.BOI("Aggregations", QuoteID);
                int iPaymentMethodType = 0;
                if (oBOI.Attributes != null)
                {
                    var InstanceID = oBOI.Attributes.Where(m => m.Key == "FKiQSInstanceID").Select(m => m.Value.sValue).FirstOrDefault();
                    if (int.TryParse(InstanceID, out iQsInstanceID))
                    { }
                    var sPaymentType = oBOI.Attributes.Where(m => m.Key == "iPaymentType").Select(m => m.Value.sValue).FirstOrDefault();
                    if (int.TryParse(sPaymentType, out iPaymentMethodType))
                    {
                        if (!oParams.Any(m => m.sName == "iPaymentMethodType"))
                        {
                            oParams.Add(new CNV { sName = "iPaymentMethodType", sValue = iPaymentMethodType.ToString() });
                        }
                    }
                    if (!oParams.Any(m => m.sName == "iQSInstanceID"))
                    {
                        oParams.Add(new CNV { sName = "iQSInstanceID", sValue = InstanceID });
                    }
                    if (oParams.Any(m => m.sName == "iQSInstanceID" && m.sValue == "0"))
                    {
                        oParams.Where(x => x.sName == "iQSInstanceID").ToList().ForEach(t => t.sValue = InstanceID);
                    }
                    if (!oParams.Any(m => m.sName == "sQSInstanceID"))
                    {
                        oParams.Add(new CNV { sName = "sQSInstanceID", sValue = InstanceID });
                    }
                    if (oParams.Any(m => m.sName == "sQSInstanceID" && m.sValue == "0"))
                    {
                        oParams.Where(x => x.sName == "sQSInstanceID").ToList().ForEach(t => t.sValue = InstanceID);
                    }
                }
                var oPolicyDocument = GeneratePolicyDocuments(oParams);
                var oPolicyDocumentCollectionResult = oPolicyDocument.oTraceStack.ToList();
                foreach (var oresult in oPolicyDocumentCollectionResult)
                {
                    oResult.oTraceStack.Add(oresult);
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQsInstanceID + " _PolicyID: " + iPolicyID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQsInstanceID, iPolicyID);
            }
            return oResult;
        }
        public CResult PolicyNoGeneration(XIIBO oProductI)
        {
            CResult oResult = new CResult();
            try
            {
                string PolicySequenceNumber = string.Empty;
                XIIBO oBOI = new XIIBO();
                long iSequence = 0;
                var Sequence = "";
                var IsSequence = "";
                if (oProductI.Attributes.ContainsKey("bIsSequence"))
                {
                    IsSequence = oProductI.Attributes["bIsSequence"].sValue;
                }
                if (!string.IsNullOrEmpty(IsSequence) && IsSequence.ToLower() == "true")
                {
                    if (oProductI.Attributes.ContainsKey("sSequence"))
                    {
                        Sequence = oProductI.Attributes["sSequence"].sValue;
                    }
                    var EndSeqence = "";
                    if (oProductI.Attributes.ContainsKey("sEndSeqence"))
                    {
                        EndSeqence = oProductI.Attributes["sEndSeqence"].sValue;
                    }
                    long iEndSeqence = 0;
                    if (long.TryParse(Sequence, out iSequence))
                    {
                        if (long.TryParse(EndSeqence, out iEndSeqence))
                        {
                            if (iSequence <= iEndSeqence)
                            {
                                string sSeqPrefix = "";
                                if (oProductI.Attributes.ContainsKey("sSeqPrefix"))
                                {
                                    sSeqPrefix = oProductI.Attributes["sSeqPrefix"].sValue;
                                }
                                // Adding sSeqPrefix with iSequence
                                PolicySequenceNumber = sSeqPrefix + (Sequence);
                                iSequence = iSequence + 1;
                                var NextSeqStart = "";
                                if (oProductI.Attributes.ContainsKey("sNextSeqStart"))
                                {
                                    NextSeqStart = oProductI.Attributes["sNextSeqStart"].sValue;
                                }
                                var NextSeqEnd = "";
                                if (oProductI.Attributes.ContainsKey("sNextSeqEnd"))
                                {
                                    NextSeqEnd = oProductI.Attributes["sNextSeqEnd"].sValue;
                                }
                                long iNextSeqStart = 0;
                                if (long.TryParse(NextSeqStart, out iNextSeqStart))
                                {
                                    if (iNextSeqStart > 0 && iSequence > iEndSeqence)
                                    {
                                        Sequence = NextSeqStart;
                                        iSequence = iNextSeqStart;
                                        // adding iNextSeqStart to iStartSequence
                                        oProductI.Attributes["sStartSequence"].sValue = iNextSeqStart.ToString();
                                        oProductI.Attributes["sStartSequence"].bDirty = true;
                                        // adding NextSeqEnd to iEndSeqence
                                        oProductI.Attributes["sEndSeqence"].sValue = NextSeqEnd.ToString();
                                        oProductI.Attributes["sEndSeqence"].bDirty = true;
                                        // empty next sequence
                                        oProductI.Attributes["sNextSeqStart"].sValue = string.Empty;
                                        oProductI.Attributes["sNextSeqStart"].bDirty = true;
                                        oProductI.Attributes["sNextSeqEnd"].sValue = string.Empty;
                                        oProductI.Attributes["sNextSeqEnd"].bDirty = true;
                                    }
                                }
                                //check wheather sequence reach to end sequence 
                                if (iSequence == iEndSeqence && iNextSeqStart == 0)
                                {
                                    //send a mail
                                }
                                //storing next sequence number in iSequence field 
                                oProductI.Attributes["sSequence"].sValue = iSequence.ToString(new String('0', Sequence.Count()));
                                //oProductI.Attributes["sSequence"].sValue = iSequence.ToString();
                                oProductI.Attributes["sSequence"].bDirty = true;
                                //oProductI.Attributes["ID"].bDirty = true;
                            }
                            //update product bo
                            var obj = oBOI.Save(oProductI);
                        }
                    }
                }
                oResult.oResult = PolicySequenceNumber;
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [" + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult);
            }
            return oResult;
        }
        public CResult ThreadInsertTransactions(List<CNV> oParams, int iPaymentMethodType, int iPaymentType)
        {
            CResult oCResult = new CResult();
            try
            {
                string sTranstype = oParams.Where(m => m.sName == "sTranstype").Select(m => m.sValue).FirstOrDefault();
                var sQSType = oParams.Where(m => m.sName == "iQSType").Select(m => m.sValue).FirstOrDefault();
                int iQSType = 0;
                if (int.TryParse(sQSType, out iQSType))
                { }
                if (oParams.Where(m => m.sName == "IsAddon").Select(x => x.sValue).FirstOrDefault() == "true")
                {
                    var oAddon = InsertAddonsToPolicy(oParams);
                    var oAddonCollectionResult = oAddon.oTraceStack.ToList();
                    foreach (var oresult in oAddonCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    oCResult.sMessage = "InsertAddonTransaction method called";
                    oXID.SaveErrortoDB(oCResult);
                    var oTransaction = InsertAddonTransaction(oParams);
                    var oTransactionCollectionResult = oTransaction.oTraceStack.ToList();
                    oCResult.sMessage = "InsertAddonTransaction method completed";
                    foreach (var oresult in oTransactionCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    oXID.SaveErrortoDB(oCResult);
                    oCResult.sMessage = "GeneratePolicyDocuments method called";
                    var oPolicyDocument = GeneratePolicyDocuments(oParams);
                    var oPolicyDocumentCollectionResult = oPolicyDocument.oTraceStack.ToList();
                    foreach (var oresult in oPolicyDocumentCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    oCResult.sMessage = "GeneratePolicyDocuments method called";
                    oXID.SaveErrortoDB(oCResult);
                }
                else
                {
                    string sProduct = oParams.Where(x => x.sName.ToLower() == "iproductid").Select(t => t.sValue).FirstOrDefault();
                    List<CNV> oWhrParams = new List<CNV>();
                    oWhrParams.Add(new CNV { sName = "FKiProductID", sValue = sProduct });
                    XIIXI oIXI = new XIIXI();
                    XIIBO obj = oIXI.BOI("ProductVersion_T", null, "*", oWhrParams);
                    if (obj.AttributeI("iCalculation").iValue == 20)
                    {
                        //List<CNV> lParam = new List<CNV>();
                        //lParam.Add(new CNV { sName = "sUID", sValue = oParams.Where(x => x.sName.ToLower() == "sguid").Select(t => t.sValue).FirstOrDefault() });
                        //lParam.Add(new CNV { sName = "iInsatnceID", sValue = oParams.Where(x => x.sName.ToLower() == "iqsinstanceid").Select(t => t.sValue).FirstOrDefault() });
                        //lParam.Add(new CNV { sName = "iUserID", sValue = oParams.Where(x => x.sName.ToLower() == "iuserid").Select(t => t.sValue).FirstOrDefault() });
                        //lParam.Add(new CNV { sName = "sDataBase", sValue = oParams.Where(x => x.sName.ToLower() == "sdatabase").Select(t => t.sValue).FirstOrDefault() });
                        //lParam.Add(new CNV { sName = "iQuoteID", sValue = oParams.Where(x => x.sName.ToLower() == "iquoteid").Select(t => t.sValue).FirstOrDefault() });
                        //lParam.Add(new CNV { sName = "Version", sValue = oParams.Where(x => x.sName.ToLower() == "iproductid").Select(t => t.sValue).FirstOrDefault() });
                        //var oQSIO = oCache.Get_QsStructureObj(sSessionID, sGUID, "QSInstance_" + iInstanceID + "NotationStructure");
                        //var ostructureInstance = oQSIO.oStructureInstance.FirstOrDefault().Value.FirstOrDefault();
                        //var ScriptResults = ConvertQuoteRequest(lParam);
                        XIInfraScript oScript = new XIInfraScript();
                        //int iScriptID = 10319;
                        Guid gScriptIDXIGUID = new Guid("7616279E-83C7-41E5-98E1-4CC3BF07FAC3");
                        var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), oParams.Where(x => x.sName.ToLower() == "sguid").Select(t => t.sValue).FirstOrDefault(),
                            oParams.Where(x => x.sName.ToLower() == "iqsinstanceid").Select(t => t.sValue).FirstOrDefault(),
                            Convert.ToInt32(oParams.Where(x => x.sName.ToLower() == "iuserid").Select(t => t.sValue).FirstOrDefault()), null, 0, null, sProduct, null, null, null, 0,
                            oParams.Where(x => x.sName.ToLower() == "ssessionid").Select(t => t.sValue).FirstOrDefault());
                    }
                    var oAddon = InsertAddonsToPolicy(oParams);
                    var oAddonCollectionResult = oAddon.oTraceStack.ToList();
                    foreach (var oresult in oAddonCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    oCResult.sMessage = "InsertTransactions method called";
                    oXID.SaveErrortoDB(oCResult);
                    var oTransaction = InsertTransactions(oParams, iPaymentMethodType, iPaymentType);
                    var oTransactionCollectionResult = oTransaction.oTraceStack.ToList();
                    oCResult.sMessage = "InsertTransactions method completed";
                    foreach (var oresult in oTransactionCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    oXID.SaveErrortoDB(oCResult);
                    if (iPaymentMethodType != 0 && iPaymentMethodType == 10)
                    {
                        if (sTranstype != "MTA")
                        {
                            var oRequiremts = InsertRequirements(oParams);
                            var oRequirementCollectionResult = oRequiremts.oTraceStack.ToList();
                            foreach (var oresult in oRequirementCollectionResult)
                            {
                                oCResult.oTraceStack.Add(oresult);
                            }
                            var oDairy = InsertDairy(oParams);
                            var oDairyCollectionResult = oDairy.oTraceStack.ToList();
                            foreach (var oresult in oDairyCollectionResult)
                            {
                                oCResult.oTraceStack.Add(oresult);
                            }
                        }
                        var oTermsToPolicy = InsertTermsToPolicy(oParams);
                        var oTermsToPolicyCollectionResult = oTermsToPolicy.oTraceStack.ToList();
                        foreach (var oresult in oTermsToPolicyCollectionResult)
                        {
                            oCResult.oTraceStack.Add(oresult);
                        }

                        var oUpdatePolicy = UpdatePolicyIDtoBOI(oParams);
                        var oUpdatePolicyResult = oUpdatePolicy.oTraceStack.ToList();
                        foreach (var oresult in oUpdatePolicyResult)
                        {
                            oCResult.oTraceStack.Add(oresult);
                        }
                        if (iQSType != 10)
                        {
                            var oPolicyDocument = GeneratePolicyDocuments(oParams);
                            var oPolicyDocumentCollectionResult = oPolicyDocument.oTraceStack.ToList();
                            foreach (var oresult in oPolicyDocumentCollectionResult)
                            {
                                oCResult.oTraceStack.Add(oresult);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public CResult ThreadRunMethods(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            try
            {
                //sending notification
                string sTranstype = oParams.Where(m => m.sName.ToLower() == "sTranstype".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPaymentMethodType = oParams.Where(m => m.sName.ToLower() == "iPaymentMethodType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iPaymentMethodType = 0;
                if (int.TryParse(sPaymentMethodType, out iPaymentMethodType)) { }
                oParams.Add(new CNV { sName = "sXiLink", sValue = "Welcome" });
                var oNotificationss = InsertNotification(oParams);
                var oNotificationssResult = oNotificationss.oTraceStack.ToList();
                foreach (var oresult in oNotificationssResult)
                {
                    oCResult.oTraceStack.Add(oresult);
                }
                if (iPaymentMethodType != 0 && iPaymentMethodType == 20)
                {
                    if (sTranstype != "MTA")
                    {
                        var oRequiremts = InsertRequirements(oParams);
                        var oRequirementCollectionResult = oRequiremts.oTraceStack.ToList();
                        foreach (var oresult in oRequirementCollectionResult)
                        {
                            oCResult.oTraceStack.Add(oresult);
                        }
                        var oDairy = InsertDairy(oParams);
                        var oDairyCollectionResult = oDairy.oTraceStack.ToList();
                        foreach (var oresult in oDairyCollectionResult)
                        {
                            oCResult.oTraceStack.Add(oresult);
                        }
                    }
                    var oTermsToPolicy = InsertTermsToPolicy(oParams);
                    var oTermsToPolicyCollectionResult = oTermsToPolicy.oTraceStack.ToList();
                    foreach (var oresult in oTermsToPolicyCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    //var oAddon = InsertAddonsToPolicy(oParams);
                    //var oAddonCollectionResult = oAddon.oTraceStack.ToList();
                    //foreach (var oresult in oAddonCollectionResult)
                    //{
                    //    oCResult.oTraceStack.Add(oresult);
                    //}
                    //var oGenerateCSV = GenerateCSVFile(oParams);
                    //var oGenerateCSVCollectionResult = oGenerateCSV.oTraceStack.ToList();
                    //foreach (var oresult in oGenerateCSVCollectionResult)
                    //{
                    //    oCResult.oTraceStack.Add(oresult);
                    //}

                    var oUpdatePolicy = UpdatePolicyIDtoBOI(oParams);
                    var oUpdatePolicyResult = oUpdatePolicy.oTraceStack.ToList();
                    foreach (var oresult in oUpdatePolicyResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                    var oPolicyDocument = GeneratePolicyDocuments(oParams);
                    var oPolicyDocumentCollectionResult = oPolicyDocument.oTraceStack.ToList();
                    foreach (var oresult in oPolicyDocumentCollectionResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                }
                var sTransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}");
                if (!string.IsNullOrEmpty(sTransactionType) && sTransactionType == "15")
                {
                    if (oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).FirstOrDefault() != null)
                    {
                        oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).FirstOrDefault().sValue = "MTA Completed";
                    }
                    else
                    {
                        oParams.Add(new CNV { sName = "sXiLink", sValue = "MTA Completed" });
                    }
                    var oNotifications = InsertNotification(oParams);
                    var oNotificationsResult = oNotifications.oTraceStack.ToList();
                    foreach (var oresult in oNotificationsResult)
                    {
                        oCResult.oTraceStack.Add(oresult);
                    }
                }
                oXID.SaveErrortoDB(oCResult);
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        public CResult InsertRequirements(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            oCResult.oTraceStack.Add(new CNV { sName = "Requirement", sValue = "Insert Requirements method Started" });
            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            var iAuditID = 0;
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Requirements adding in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Requirements adding in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                if (oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).FirstOrDefault() != null)
                {
                    oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).FirstOrDefault().sValue = "RequirementChase NpXilink";
                }
                else
                {
                    oParams.Add(new CNV { sName = "sXiLink", sValue = "RequirementChase NpXilink" });
                }
                int iPolicyVersionID = 0;
                if (int.TryParse(sACPolicyVersionID, out iPolicyVersionID))
                { }
                XIIXI oIXI = new XIIXI();
                var sClientReference = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|sClientReference}");
                var oBOI = oIXI.BOI("ACPolicy_T", iACPolicyID);
                string policyStatus = string.Empty;
                string sInceptionDate = string.Empty;
                if (oBOI.Attributes.ContainsKey("dCoverStart"))
                {
                    sInceptionDate = oBOI.Attributes["dCoverStart"].sValue;
                }
                if (oBOI.Attributes.ContainsKey("iStatus"))
                {
                    policyStatus = oBOI.Attributes["iStatus"].sValue;
                }
                QueryEngine oQEE = new QueryEngine();
                List<XIWhereParams> oWhereParams = new List<XIWhereParams>();
                List<SqlParameter> SqlParams = new List<SqlParameter>();
                //XIWhereParams oWParam = new XIWhereParams();
                //oWParam.sField = "FKiPolicyID";
                //oWParam.sOperator = "=";
                //oWParam.sValue = iACPolicyID;
                //oWhereParams.Add(oWParam);
                if (iPolicyID > 0 && !string.IsNullOrEmpty(policyStatus) && policyStatus.ToLower() != "25")
                {
                    oWhereParams.Add(new XIWhereParams { sField = "FKiPolicyID", sOperator = "=", sValue = iACPolicyID });
                    oWhereParams.Add(new XIWhereParams { sField = "FKiProductID", sOperator = "=", sValue = iProductID });
                    oWhereParams.Add(new XIWhereParams { sField = "FKiTransactionTypeID", sOperator = "=", sValue = "2" });
                    oWhereParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "10" });
                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiPolicyID", Value = iACPolicyID });
                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiProductID", Value = iProductID });
                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiTransactionTypeID", Value = "2" });
                    SqlParams.Add(new SqlParameter { ParameterName = "@iType", Value = "10" });
                    //load requirement template definition of productid and FKiTransactionTypeID
                    oQEE.AddBO("Requirement_T", "", oWhereParams);
                    CResult oresult = oQEE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oresult.bOK && oresult.oResult != null)
                    {
                        var sSql = (string)oresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQEE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = SqlParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            if (oBOIList.Count() > 0)
                            {
                                foreach (var oBOInstance in oBOIList)
                                {
                                    oBOInstance.Delete(oBOInstance);
                                }

                            }
                        }
                    }
                    oWhereParams.Where(x => x.sField == "iType").ToList().ForEach(s => s.sValue = "0");
                    SqlParams.Where(x => x.ParameterName == "@iType").ToList().ForEach(s => s.Value = "0");
                    oQEE.AddBO("Requirement_T", "", oWhereParams);
                    oresult = oQEE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oresult.bOK && oresult.oResult != null)
                    {
                        var sSql = (string)oresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQEE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = SqlParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            if (oBOIList.Count() > 0)
                            {
                                XIDXI oTXI = new XIDXI();
                                var BOD = (XIDBO)oTXI.Get_BODefinition("Requirement_T").oResult;
                                foreach (var oBOInstance in oBOIList)
                                {
                                    oBOInstance.BOD = BOD;
                                    oBOInstance.SetAttribute(XIConstant.Key_XIDeleted, "1");
                                    oBOInstance.SetAttribute("id", oBOInstance.AttributeI("id").sValue);
                                    var res = oBOInstance.Save(oBOInstance);
                                    if (!res.bOK && res.oResult == null)
                                    {
                                        oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update of " + XIConstant.Key_XIDeleted + "  (In Active) for Requirement failed for id =: " + oBOInstance.AttributeI("id").ToString();
                                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                        oCResult.LogToFile();
                                        oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update of " + XIConstant.Key_XIDeleted + " (In Active) for Requirement failed for id =: " + oBOInstance.AttributeI("id").ToString();
                                    }

                                }
                            }
                        }
                    }
                }


                //XICoreCache oCache = new XICoreCache();
                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                XIWhereParams oWP = new XIWhereParams();
                XIDStructure oXIDStructure = new XIDStructure();
                List<SqlParameter> SqlParamsList = new List<SqlParameter>();
                oWParams.Add(new XIWhereParams { sField = "FKiProductID", sOperator = "=", sValue = iProductID });
                SqlParamsList.Add(new SqlParameter { ParameterName = "@FKiProductID", Value = iProductID });
                if (!string.IsNullOrEmpty(policyStatus) && policyStatus == "25")
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiTransactionTypeID", sOperator = "=", sValue = "4" });
                    SqlParamsList.Add(new SqlParameter { ParameterName = "@FKiTransactionTypeID", Value = "4" });
                }
                else if (!string.IsNullOrEmpty(policyStatus) && policyStatus == "50")
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiTransactionTypeID", sOperator = "=", sValue = "12" });
                    SqlParamsList.Add(new SqlParameter { ParameterName = "@FKiTransactionTypeID", Value = "12" });
                }
                else
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiTransactionTypeID", sOperator = "=", sValue = "2" });
                    SqlParamsList.Add(new SqlParameter { ParameterName = "@FKiTransactionTypeID", Value = "2" });
                }
                oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "10" });
                SqlParamsList.Add(new SqlParameter { ParameterName = "@iType", Value = "10" });
                //oWP.sField = "iType";
                //oWP.sOperator = "=";
                ////oWP.sValue = "10";
                //oWP.sValue = oBOI.AttributeI("iStatus").sValue;
                //oWParams.Add(oWP);
                //oWP = new XIWhereParams();
                //oWP.sField = "FKiTransactionTypeID";
                //oWP.sOperator = "=";
                //oWP.sValue = "2";
                //oWParams.Add(oWP);
                //oWP = new XIWhereParams();
                //oWP.sField = "FKiProductID";
                //oWP.sOperator = "=";
                //oWP.sValue = iProductID;
                //oWParams.Add(oWP);
                //load requirement template definition of productid and FKiTransactionTypeID
                //oQE.AddBO("Requirement_T", "Save Group", oWParams);
                oQE.AddBO("Requirement_T", null, oWParams);
                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO definition added successfully to the QueryEngine" });
                CResult oCresult = oQE.BuildQuery();
                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                if (oCresult.bOK && oCresult.oResult != null)
                {
                    var sSql = (string)oCresult.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql;
                    oEE.SqlParams = SqlParamsList;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                        oBOIList.ForEach(x => x.BOD = oBOD);
                        string sPreviousVersionOneClickName = "Previous version";
                        XID1Click oPV1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sPreviousVersionOneClickName, null);
                        XID1Click oPV1ClickC = (XID1Click)oPV1ClickD.Clone(oPV1ClickD);
                        List<CNV> PVParms = new List<CNV>();
                        CNV oPVNV = new CNV();
                        oPVNV.sName = "{XIP|iACPolicyID}";
                        oPVNV.sValue = iPolicyID.ToString();
                        PVParms.Add(oPVNV);
                        oPV1ClickC.ReplaceFKExpressions(PVParms);
                        oPV1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(oPV1ClickC.Query, PVParms);
                        var oPVRes = oPV1ClickC.OneClick_Run(false).FirstOrDefault();
                        string PreviousPolicyVersionID = string.Empty;
                        if (oPVRes.Value != null && oPVRes.Value.Attributes.ContainsKey("id"))
                        {
                            PreviousPolicyVersionID = oPVRes.Value.Attributes["id"].sValue;
                        }
                        oWhereParams = new List<XIWhereParams>();
                        oWhereParams.Add(new XIWhereParams { sField = "FKiPolicyID", sOperator = "=", sValue = iACPolicyID });
                        oWhereParams.Add(new XIWhereParams { sField = "FKiPolicyVersionID", sOperator = "=", sValue = PreviousPolicyVersionID });
                        oWhereParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                        oQEE.AddBO("Driver_T", "", oWhereParams);
                        SqlParams = new List<SqlParameter>();
                        SqlParams.Add(new SqlParameter { ParameterName = "@FKiPolicyID", Value = iACPolicyID });
                        SqlParams.Add(new SqlParameter { ParameterName = "@FKiPolicyVersionID", Value = PreviousPolicyVersionID });
                        SqlParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                        List<XIIBO> oPrevDriverIList = new List<XIIBO>();
                        CResult oresult = oQEE.BuildQuery();
                        //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                        if (oresult.bOK && oresult.oResult != null)
                        {
                            sSql = (string)oresult.oResult;
                            oEE = new ExecutionEngine();
                            oEE.SqlParams = SqlParams;
                            oEE.XIDataSource = oQEE.XIDataSource;
                            oEE.sSQL = sSql;
                            var oResult = oEE.Execute();
                            if (oResult.bOK && oResult.oResult != null)
                            {
                                oPrevDriverIList = ((Dictionary<string, XIIBO>)oResult.oResult).Values.ToList();
                            }
                        }
                        string sDriverOneClickName = "Driver Details List";
                        XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sDriverOneClickName, null);
                        XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                        List<CNV> nParms = new List<CNV>();
                        CNV oCNV = new CNV();
                        oCNV.sName = "{XIP|FKiQSInstanceID}";
                        oCNV.sValue = sQSInstanceID;
                        nParms.Add(oCNV);
                        o1ClickC.ReplaceFKExpressions(nParms);
                        o1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, nParms);
                        Dictionary<string, XIIBO> oRes = o1ClickC.OneClick_Run(false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Requirements_DriverQuery: " + o1ClickC.Query });
                        //var oQSI = oIXI.BOI("QS Instance", sQSInstanceID).Structure("NotationStructure").XILoad();
                        //var oDriverList = oQSI.oSubStructureI("Driver_T");
                        var oDriverList = oRes.Values.ToList();
                        if (oDriverList != null)
                        {
                            oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Requirements_DriversCount: " + oDriverList.Count });
                        }
                        foreach (var instance in oBOIList)
                        {
                            if (instance.Attributes.ContainsKey("fkiuserid"))
                            {
                                instance.Attributes["FKiUserID"].sValue = oBOI.Attributes["fkiuserid"].sValue;
                            }
                            else
                            {
                                XIIAttribute oAtt = new XIIAttribute();
                                oAtt.sName = "FKiUserID";
                                oAtt.sValue = "0";
                                instance.Attributes.Add("FKiUserID", oAtt);
                            }
                            XIIBO oBO = new XIIBO(); string sDueInDays = string.Empty;
                            if (instance.Attributes.ContainsKey("FKiPolicyID"))
                            {
                                instance.Attributes["FKiPolicyID"].sValue = iACPolicyID.ToString();
                            }
                            if (instance.Attributes.ContainsKey("FKiPolicyVersionID"))
                            {
                                instance.Attributes["FKiPolicyVersionID"].sValue = sACPolicyVersionID;
                            }
                            if (instance.Attributes.ContainsKey("FKsPolicyNo"))
                            {
                                instance.Attributes["FKsPolicyNo"].sValue = oBOI.Attributes["sPolicyNo"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("iStatus"))
                            {
                                instance.Attributes["iStatus"].sValue = "50";
                            }
                            if (instance.Attributes.ContainsKey("refChaseStatus"))
                            {
                                instance.Attributes["refChaseStatus"].sValue = "7";
                            }
                            if (instance.Attributes.ContainsKey("dRequiredDate") && !string.IsNullOrEmpty(sInceptionDate))
                            {
                                var sPolicyStartdate = oBO.ConvertToDtTime(sInceptionDate);
                                var sRequiredDate = sPolicyStartdate.AddDays(7).ToString("yyyy-MM-dd");
                                instance.Attributes["dRequiredDate"].sValue = sRequiredDate;
                            }
                            if (instance.Attributes.ContainsKey("dDatetobeCancelled") && !string.IsNullOrEmpty(sInceptionDate))
                            {
                                var sPolicyStartdate = oBO.ConvertToDtTime(sInceptionDate);
                                var sDatetobeCancelled = sPolicyStartdate.AddDays(28).ToString("yyyy-MM-dd");
                                instance.Attributes["dDatetobeCancelled"].sValue = sDatetobeCancelled;
                            }
                            if (instance.Attributes.ContainsKey("iType"))
                            {
                                instance.Attributes["iType"].sValue = "0";
                            }
                            if (instance.Attributes.ContainsKey("iDueInDays"))
                            {
                                sDueInDays = instance.Attributes["iDueInDays"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("dRequested"))
                            {
                                instance.Attributes["dRequested"].sValue = sInceptionDate;
                            }
                            if (instance.Attributes.ContainsKey("FKsClientReferenceNumber"))
                            {
                                instance.Attributes["FKsClientReferenceNumber"].sValue = sClientReference;
                            }
                            if (instance.Attributes.ContainsKey("iTransactionType"))
                            {
                                instance.Attributes["iTransactionType"].sValue = "0";
                            }
                            if (instance.Attributes.ContainsKey("sPolicyHolderName"))
                            {
                                instance.Attributes["sPolicyHolderName"].sValue = oBOI.Attributes["sName"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("FKiClientID"))
                            {
                                instance.Attributes["FKiClientID"].sValue = oBOI.Attributes["FKiCustomerID"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("iAppliesTo"))
                            {
                                instance.Attributes["iAppliesTo"].sValue = "10";
                            }
                            if (instance.Attributes.ContainsKey("FKsUserID"))
                            {
                                instance.Attributes["FKsUserID"].sValue = oBOI.Attributes["fksuserid"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("dDue"))
                            {
                                if (!string.IsNullOrEmpty(sDueInDays) && !string.IsNullOrEmpty(sInceptionDate))
                                {
                                    int iDueInDays = Convert.ToInt32(sDueInDays);
                                    var sPolicyStartdate = oBO.ConvertToDtTime(sInceptionDate);
                                    var sDueDate = sPolicyStartdate.AddDays(iDueInDays).ToString("yyyy-MM-dd");
                                    instance.Attributes["dDue"].sValue = sDueDate;
                                }
                            }
                            int sPrimaryKeyValue = Convert.ToInt32(instance.Attributes.Where(n => n.Key.ToLower().Equals(instance.BOD.sPrimaryKey.ToLower())).Select(s => s.Value).FirstOrDefault().sValue);
                            if (sPrimaryKeyValue != 0)
                            {
                                instance.Attributes.Where(n => n.Key.ToLower().Equals(instance.BOD.sPrimaryKey.ToLower())).Select(m => m.Value).ToList().ForEach(m => { m.sValue = null; });//set primary column to null
                                instance.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                            }
                            string sCode = instance.Attributes["refType"].sValue;
                            if (sCode == "5")
                            {
                                if (oDriverList != null && oDriverList.Count() > 0)
                                {
                                    string sReqName = instance.Attributes["sName"].sValue;
                                    foreach (var item in oDriverList)
                                    {
                                        bool bIsSave = true;
                                        string sDriverID = string.Empty;
                                        if (instance.Attributes.ContainsKey("sName"))
                                        {
                                            instance.Attributes["sName"].sValue = sReqName + " - " + item.Attributes["sForeName"].sValue + " " + item.Attributes["sName"].sValue;
                                        }
                                        if (instance.Attributes.ContainsKey("id"))
                                        {
                                            sDriverID = item.Attributes["id"].sValue;
                                        }
                                        if (!string.IsNullOrEmpty(policyStatus) && policyStatus == "25")
                                        {
                                            foreach (var oPrevDriver in oPrevDriverIList)
                                            {
                                                if (oPrevDriver.Attributes["sForeName"].sValue == item.Attributes["sForeName"].sValue && oPrevDriver.Attributes["sName"].sValue == item.Attributes["sName"].sValue)
                                                {
                                                    if (oPrevDriver.Attributes["sAddressLine1"].sValue == item.Attributes["sAddressLine1"].sValue && oPrevDriver.Attributes["sAddressLine2"].sValue == item.Attributes["sAddressLine2"].sValue && oPrevDriver.Attributes["sAddressLine3"].sValue == item.Attributes["sAddressLine3"].sValue && oPrevDriver.Attributes["sTown"].sValue == item.Attributes["sTown"].sValue && oPrevDriver.Attributes["sDrivingQualification"].sValue == item.Attributes["sDrivingQualification"].sValue)
                                                    {
                                                        bIsSave = false;
                                                    }
                                                }
                                            }
                                        }
                                        if (instance.Attributes.ContainsKey("sFunction"))
                                        {
                                            int iPrimaryKeyValue = Convert.ToInt32(instance.Attributes.Where(n => n.Key.ToLower().Equals(instance.BOD.sPrimaryKey.ToLower())).Select(s => s.Value).FirstOrDefault().sValue);
                                            if (iPrimaryKeyValue != 0)
                                            {
                                                instance.Attributes.Where(n => n.Key.ToLower().Equals(instance.BOD.sPrimaryKey.ToLower())).Select(m => m.Value).ToList().ForEach(m => { m.sValue = null; });//set primary column to null
                                                instance.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                                            }
                                            string sFunction = instance.Attributes["sFunction"].sValue;
                                            if (!string.IsNullOrEmpty(sFunction))
                                            {
                                                //string sGUID = Guid.NewGuid().ToString();
                                                List<CNV> oNVList = new List<CNV>();
                                                CNV oParam = new CNV();
                                                oParam.sName = "sFunction";
                                                oParam.sValue = sFunction;
                                                oNVList.Add(oParam);
                                                oParam = new CNV();
                                                oParam.sName = "-policyid";
                                                oParam.sValue = iACPolicyID.ToString();
                                                oNVList.Add(oParam);
                                                oParam = new CNV();
                                                oParam.sName = "-driverid";
                                                oParam.sValue = sDriverID.ToString();
                                                oNVList.Add(oParam);
                                                oParam = new CNV();
                                                oParam.sName = "-previousversionid";
                                                oParam.sValue = PreviousPolicyVersionID;
                                                oNVList.Add(oParam);
                                                oCache.SetXIParams(oNVList, sGUID, "");
                                                CResult oCR = new CResult();
                                                XIDScript oXIScript = new XIDScript();
                                                oXIScript.sScript = sFunction.ToString();
                                                oCR = oXIScript.Execute_Script(sGUID, sSessionID);
                                                if (oCR.bOK && oCR.oResult != null)
                                                {
                                                    string sValue = (string)oCR.oResult;
                                                    if (sValue == "true" && bIsSave)
                                                    {
                                                        var oRequirement = oBO.Save(instance, false);
                                                        var oReqResult = SendChaseRequirementNotification(oParams, instance);

                                                    }
                                                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Requirements script executed successfully" });
                                                }
                                            }
                                            else if (bIsSave)
                                            {
                                                var oRequirement = oBO.Save(instance, false);
                                                var oReqResult = SendChaseRequirementNotification(oParams, instance);

                                            }

                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (instance.Attributes.ContainsKey("sFunction"))
                                {
                                    string sFunction = instance.Attributes["sFunction"].sValue;
                                    if (!string.IsNullOrEmpty(sFunction))
                                    {
                                        //string sGUID = Guid.NewGuid().ToString();
                                        List<CNV> oNVList = new List<CNV>();
                                        CNV oParam = new CNV();
                                        oParam.sName = "sFunction";
                                        oParam.sValue = sFunction;
                                        oNVList.Add(oParam);
                                        oParam = new CNV();
                                        oParam.sName = "-policyid";
                                        oParam.sValue = iACPolicyID.ToString();
                                        oNVList.Add(oParam);
                                        oCache.SetXIParams(oNVList, sGUID, sSessionID);
                                        CResult oCR = new CResult();
                                        XIDScript oXIScript = new XIDScript();
                                        oXIScript.sScript = sFunction.ToString();
                                        oCR = oXIScript.Execute_Script(sGUID, sSessionID);
                                        if (oCR.bOK && oCR.oResult != null)
                                        {
                                            string sValue = (string)oCR.oResult;
                                            if (sValue == "true")
                                            {
                                                var oRequirement = oBO.Save(instance, false);
                                                var oReqResult = SendChaseRequirementNotification(oParams, instance);
                                            }
                                            oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Requirements script executed successfully" });
                                        }
                                    }
                                    else
                                    {
                                        var oRequirement = oBO.Save(instance, false);
                                        var oReqResult = SendChaseRequirementNotification(oParams, instance);
                                    }

                                }
                            }
                            //set policyid and add related requirement templates

                        }
                    }
                    UpdatePolicyVersion(iPolicyVersionID, "bIsRequirementsGenerated", "true");
                    if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                    {
                        oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Requirements added successfully";
                    }
                    if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                    {
                        oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                    }
                    if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                    {
                        oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = sACPolicyVersionID;
                    }
                    else
                    {
                        oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sACPolicyVersionID });
                    }
                    Audit_Policy(oParams);
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Success: Requirements Inserted successfully" });
                    if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                    {
                        oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                    }
                }
                oCResult.oResult = null;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Requirements method execution completed" });
            }
            catch (Exception ex)
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Requirements adding failed";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                Audit_Policy(oParams);
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                }
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error: In Requirements_" + oCResult.sMessage });
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult; // always
        }
        public CResult InsertTransactions(List<CNV> oParams, int iPaymentMethodType, int iPaymentType)
        {
            TXinitial.sTXBeginAt = "POLICY";
            CResult oCResult = new CResult();
            var iAuditID = 0;
            int iQSInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Transactions adding in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Transactions adding in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);

                oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Insert Transaction Method Started" + oCResult.sMessage });
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string QSType = oParams.Where(m => m.sName.ToLower() == "iQSType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iPolicyVersionID = 0;
                XIIXI oIXI = new XIIXI();
                var oBOI = oIXI.BOI("ACPolicy_T", iACPolicyID);
                var DefaultAdmin = oIXI.BOI("Aggregations", oBOI.AttributeI("FKiQuoteID").sValue, "FKiQSInstanceID,zDefaultAdmin,rPaymentCharge,rInsurerCharge,rPrice,rTotal,rSubTotal,zCommissionOverride,iCommissionType,rPayableAmount,bISPaymentToInsurer,rFinalCommission,rOverrideAdmin,rAddonPrice,sCode,iPaymentMethodType");
                sQSInstanceID = DefaultAdmin.AttributeI("FKiQSInstanceID").sValue;
                if (int.TryParse(sACPolicyVersionID, out iPolicyVersionID))
                { }
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                oCResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + "] - InsertTransactions method started";
                oXID.SaveErrortoDB(oCResult);
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                JournalTransactions oJTransactions = new JournalTransactions(TXinitial);
                XIIBO oTransaction = new XIIBO();
                oTransaction.SetAttribute("FKiACPolicyID", oBOI.AttributeI("id").sValue);
                oTransaction.SetAttribute("FKiSupplierID", oBOI.AttributeI("FKiSupplierID").sValue);
                oTransaction.SetAttribute("refAccountCategory", oBOI.AttributeI("refAccountCategory").sValue);
                oTransaction.SetAttribute("FKiUserID", oBOI.AttributeI("FkiNBUser").sValue);
                oTransaction.SetAttribute("FKsWhoID", sUserID);
                oTransaction.SetAttribute("dWhen", DateTime.Now.ToString(XIConstant.Date_Format));
                oTransaction.SetAttribute("dWhen", DateTime.Now.ToString(XIConstant.Date_Format));
                //oTransaction.SetAttribute("iPaymentType", iPaymentType.ToString());
                oTransaction.SetAttribute("iPaymentType", DefaultAdmin.AttributeI("iPaymentMethodType").doValue.ToString());
                string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                sTranstype = sTranstype == "" ? oParams.Where(m => m.sName.ToLower() == "sTranstype".ToLower()).Select(m => m.sValue).FirstOrDefault() : sTranstype;
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = sQSInstanceID });
                oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue).ToString());
                oTransaction.SetAttribute("zCommission", DefaultAdmin.AttributeI("zCommissionOverride").doValue.ToString());
                oTransaction.SetAttribute("rComOverride", DefaultAdmin.AttributeI("rFinalCommission").doValue.ToString());
                oTransaction.SetAttribute("iCommissionType", DefaultAdmin.AttributeI("iCommissionType").doValue.ToString());
                Dictionary<string, XIIBO> oXIBOI = new Dictionary<string, XIIBO>();
                QueryEngine oQE = new QueryEngine();
                XIIQS oQSI = oIXI.GetQSXIValuesByQSIID(sQSInstanceID);
                string sWhereCondition = "FKiACPolicyID =" + oBOI.AttributeI("id").sValue;
                var oQResult = oQE.Execute_QueryEngine("ACPolicyVersion_T", "*", sWhereCondition);
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    oXIBOI = (Dictionary<string, XIIBO>)oQResult.oResult;
                }
                if (sTranstype.ToLower() == "MTA".ToLower()) //for MTA
                {
                    //oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rSubTotal").doValue.ToString());
                    //if (oBOI.AttributeI("rGrossPremium").doValue < 0)
                    //{
                    //    oTransaction.SetAttribute("sTransCode", "RETP"); // for MTA Return Premium
                    //    oTransaction.SetAttribute("iSystemType", "100");
                    //    var RETPTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                    //    oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : MTA Return Premium Transaction Created Successfully" });
                    //}
                    //else 
                    if (oBOI.AttributeI("rGrossPremium").doValue != 0)
                    {
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("sTransCode", "DADDP");// for MTA
                            oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rFinalCommission").sValue);
                        }
                        else
                        {
                            oTransaction.SetAttribute("sTransCode", "ADDP");// for MTA
                        }
                        oTransaction.SetAttribute("iSystemType", "100");
                        var RETPTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : MTA ADDP Transaction Created Successfully" });
                    }
                    if (DefaultAdmin.AttributeI("rOverrideAdmin").doValue != 0)
                    {
                        oTransaction.SetAttribute("sTransCode", "ADMIN");// ADMIN for MTA
                        oTransaction.SetAttribute("iSystemType", "200");
                        oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rOverrideAdmin").doValue.ToString());
                        oTransaction.SetAttribute("rPremium", DefaultAdmin.AttributeI("rOverrideAdmin").doValue.ToString());
                        var ADMINTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADMIN Transaction Created Successfully" });
                    }

                    //CREC
                    var Data = oXIBOI.Values.OrderBy(x => x.AttributeI("sVersion").iValue).LastOrDefault();
                    if (string.IsNullOrEmpty(oQSI.XIIValues("sInsurerRefCodeForPayment")))
                    {
                        oTransaction.SetAttribute("sTransCode", "CREC");
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        //oTransaction.SetAttribute("zBaseValue", Data.AttributeI("rMTACost").doValue.ToString());
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rTotal").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue + DefaultAdmin.AttributeI("rOverrideAdmin").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        var CRECTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : CREC Transaction Created Successfully" });
                    }
                    if (DefaultAdmin.AttributeI("iPaymentMethodType").sValue == "4")
                    {
                        oTransaction.SetAttribute("sTransCode", "PFNB");
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        //oTransaction.SetAttribute("zBaseValue", Data.AttributeI("rMTACost").doValue.ToString());
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rTotal").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue + DefaultAdmin.AttributeI("rOverrideAdmin").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        var PFNBTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : PFNB Transaction Created Successfully" });
                    }
                    if (!string.IsNullOrEmpty(oBOI.AttributeI("sAddonID").sValue))
                    {
                        var AddonIDs = oBOI.AttributeI("sAddonID").sValue;
                        oXIBOI = new Dictionary<string, XIIBO>();
                        oQE = new QueryEngine();
                        sWhereCondition = "FKiQSInstanceID =" + sQSInstanceID + ", iStatus = 10, refAddOn in (" + AddonIDs + "), " + XIConstant.Key_XIDeleted + " = 0";
                        oQResult = oQE.Execute_QueryEngine("ACPurchase_T", "*", sWhereCondition);
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            oXIBOI = (Dictionary<string, XIIBO>)oQResult.oResult;
                        }
                        foreach (var item in oXIBOI)
                        {
                            oTransaction.SetAttribute("sTransCode", "ADDON");
                            oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                            oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rPremiumOverride").doValue == 0 ? item.Value.AttributeI("rCost").doValue.ToString() : item.Value.AttributeI("rPremiumOverride").doValue.ToString());
                            oTransaction.SetAttribute("FKiProductAddOnID", item.Value.AttributeI("FKiProductAddonID").doValue.ToString());
                            oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                            var ADDONTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            if (item.Value.AttributeI("rAdmin").doValue != 0)
                            {
                                oTransaction.SetAttribute("sTransCode", "ADMIN");
                                oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                                oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rAdmin").doValue.ToString());
                                oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                                oTransaction.SetAttribute("rPremium", item.Value.AttributeI("rAdmin").doValue < 0 ? item.Value.AttributeI("rAdmin").doValue.ToString() : "0");
                                oTransaction.SetAttribute("iSystemType", "200");
                                var ADDONAdminTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            }
                        }
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADDON Transaction Created Successfully" });
                    }
                    //CHIR
                    //oTransaction.SetAttribute("sTransCode", "CHIR");
                    //oTransaction.SetAttribute("iSystemType", "100");
                    //oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                    //oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rInsurerCharge").doValue.ToString());
                    //var CHIRTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                    //oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : CHIR Transaction Created Successfully" });

                }
                else if (string.IsNullOrEmpty(sTranstype) || sTranstype.ToLower() == "new")
                {
                    oWhrParams = new List<CNV>();
                    oWhrParams.Add(new CNV { sName = "FKiACPolicyID", sValue = iACPolicyID });
                    oWhrParams.Add(new CNV { sName = "sPolTransCode", sValue = "NEWP" });
                    var Transaction = oIXI.BOI("ACTransaction_T", null, null, oWhrParams);
                    if (Transaction == null || Transaction.Attributes.Count() == 0)
                    {
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("sTransCode", "DNEWP");  //For New Policy
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rFinalCommission").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("sTransCode", "NEWP");  //For New Policy
                        }
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        var NEWPTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : NEWP Transaction Created Successfully" });

                        if (DefaultAdmin.AttributeI("rOverrideAdmin").doValue != 0)
                        {
                            oTransaction.SetAttribute("sTransCode", "ADMIN");// ADMIN for NEWP
                            oTransaction.SetAttribute("iSystemType", "200");
                            oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                            oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rOverrideAdmin").doValue.ToString());
                            oTransaction.SetAttribute("rPremium", DefaultAdmin.AttributeI("rOverrideAdmin").doValue < 0 ? DefaultAdmin.AttributeI("rOverrideAdmin").doValue.ToString() : "0");
                            var AdminTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADMIN Transaction Created Successfully" });
                        }
                        //else if (DefaultAdmin.AttributeI("zDefaultAdmin").doValue < 0)
                        //{
                        //    oTransaction.SetAttribute("sTransCode", "DISC");// for -ve ADMIN charges
                        //    oTransaction.SetAttribute("iSystemType", "200");
                        //    oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        //    oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("zDefaultAdmin").doValue.ToString());
                        //    var DISCTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        //    oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : DISC Transaction Created Successfully" });
                        //}
                        //CHIR
                        oTransaction.SetAttribute("sTransCode", "CHIR");
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rInsurerCharge").doValue.ToString());
                        var CHIRTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : CHIR Transaction Created Successfully" });
                        //CREC
                        if (string.IsNullOrEmpty(oQSI.XIIValues("sInsurerRefCodeForPayment")))
                        {
                            oTransaction.SetAttribute("sTransCode", "CREC");
                            oTransaction.SetAttribute("iSystemType", "100");
                            oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");

                            if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                            {

                                oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rTotal").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                            }
                            else
                            {
                                oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue + DefaultAdmin.AttributeI("rOverrideAdmin").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                            }
                            var CRECTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : CREC Transaction Created Successfully" });
                        }

                        if (DefaultAdmin.AttributeI("iPaymentMethodType").sValue == "4")
                        {
                            oTransaction.SetAttribute("sTransCode", "PFNB");
                            oTransaction.SetAttribute("iSystemType", "100");
                            oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                            //oTransaction.SetAttribute("zBaseValue", Data.AttributeI("rMTACost").doValue.ToString());
                            if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                            {
                                oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rTotal").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                            }
                            else
                            {
                                oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue + DefaultAdmin.AttributeI("rOverrideAdmin").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                            }
                            var PFNBTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : PFNB Transaction Created Successfully" });
                        }
                        if (!string.IsNullOrEmpty(oBOI.AttributeI("sAddonID").sValue))
                        {
                            var AddonIDs = oBOI.AttributeI("sAddonID").sValue;
                            oXIBOI = new Dictionary<string, XIIBO>();
                            oQE = new QueryEngine();
                            sWhereCondition = "FKiQSInstanceID =" + sQSInstanceID + ", iStatus = 10, refAddOn in (" + AddonIDs + "), " + XIConstant.Key_XIDeleted + " = 0";
                            oQResult = oQE.Execute_QueryEngine("ACPurchase_T", "*", sWhereCondition);
                            if (oQResult.bOK && oQResult.oResult != null)
                            {
                                oXIBOI = (Dictionary<string, XIIBO>)oQResult.oResult;
                            }
                            foreach (var item in oXIBOI)
                            {
                                oTransaction.SetAttribute("sTransCode", "ADDON");
                                oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                                oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rPremiumOverride").doValue == 0 ? item.Value.AttributeI("rCost").doValue.ToString() : item.Value.AttributeI("rPremiumOverride").doValue.ToString());
                                oTransaction.SetAttribute("FKiProductAddOnID", item.Value.AttributeI("FKiProductAddonID").doValue.ToString());
                                oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                                var ADDONTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                                if (item.Value.AttributeI("rAdmin").doValue != 0)
                                {
                                    oTransaction.SetAttribute("sTransCode", "ADMIN");
                                    oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                                    oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rAdmin").doValue.ToString());
                                    oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                                    oTransaction.SetAttribute("rPremium", item.Value.AttributeI("rAdmin").doValue < 0 ? item.Value.AttributeI("rAdmin").doValue.ToString() : "0");
                                    oTransaction.SetAttribute("iSystemType", "200");
                                    var ADDONAdminTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                                }
                            }
                            oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADDON Transaction Created Successfully" });
                        }
                        if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Transactions added successfully";
                        }
                        if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                        }
                        if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                        {
                            oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = sACPolicyVersionID;
                        }
                        else
                        {
                            oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sACPolicyVersionID });
                        }
                        Audit_Policy(oParams);
                        if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                        }
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Transaction Method execution completed" });
                        //PFCH
                        oTransaction.SetAttribute("sTransCode", "PFCH");
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rPaymentCharge").doValue.ToString());
                        var PFCHTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : PFCH Transaction Created Successfully" });
                        oJTransactions.Update_PolicyBalance(Convert.ToInt32(iACPolicyID), 10);
                        UpdatePolicyVersion(iPolicyVersionID, "bIsTransactionsPosted", "true");
                    }
                }
                else if (sTranstype.ToLower() == "renewal" || sTranstype.ToLower() == "rebroke")
                {
                    if (sTranstype.ToLower() == "renewal")
                    {
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("sTransCode", "DRNWP");  //For New Policy
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rFinalCommission").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("sTransCode", "RNWP");  //For New Policy
                        }
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        var NEWPTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : RNWP Transaction Created Successfully" });
                    }
                    else
                    {
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("sTransCode", "DRBRP");  //For New Policy
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rFinalCommission").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("sTransCode", "RBRP");  //For New Policy
                        }
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        var NEWPTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : RBRP Transaction Created Successfully" });
                    }
                    if (DefaultAdmin.AttributeI("rOverrideAdmin").doValue != 0)
                    {
                        oTransaction.SetAttribute("sTransCode", "ADMIN");// ADMIN for NEWP
                        oTransaction.SetAttribute("iSystemType", "200");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                        oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rOverrideAdmin").doValue.ToString());
                        oTransaction.SetAttribute("rPremium", DefaultAdmin.AttributeI("rOverrideAdmin").doValue < 0 ? DefaultAdmin.AttributeI("rOverrideAdmin").doValue.ToString() : "0");
                        var AdminTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADMIN Transaction Created Successfully" });
                    }
                    //CREC
                    if (string.IsNullOrEmpty(oQSI.XIIValues("sInsurerRefCodeForPayment")))
                    {
                        oTransaction.SetAttribute("sTransCode", "CREC");
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        //oTransaction.SetAttribute("zBaseValue", DefaultAdmin.AttributeI("rPayableAmount").doValue.ToString());
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rTotal").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue + DefaultAdmin.AttributeI("rOverrideAdmin").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        var CRECTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : CREC Transaction Created Successfully" });
                    }
                    if (DefaultAdmin.AttributeI("iPaymentMethodType").sValue == "4")
                    {
                        oTransaction.SetAttribute("sTransCode", "PFNB");
                        oTransaction.SetAttribute("iSystemType", "100");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        //oTransaction.SetAttribute("zBaseValue", Data.AttributeI("rMTACost").doValue.ToString());
                        if (DefaultAdmin.AttributeI("bISPaymentToInsurer").sValue.ToLower() == "true")
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rTotal").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        else
                        {
                            oTransaction.SetAttribute("zBaseValue", (DefaultAdmin.AttributeI("rPrice").doValue + DefaultAdmin.AttributeI("rOverrideAdmin").doValue + DefaultAdmin.AttributeI("rAddonPrice").doValue).ToString());
                        }
                        var PFNBTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : PFNB Transaction Created Successfully" });
                    }
                    if (!string.IsNullOrEmpty(oBOI.AttributeI("sAddonID").sValue))
                    {
                        var AddonIDs = oBOI.AttributeI("sAddonID").sValue;
                        oXIBOI = new Dictionary<string, XIIBO>();
                        oQE = new QueryEngine();
                        sWhereCondition = "FKiQSInstanceID =" + sQSInstanceID + ", iStatus = 10, refAddOn in (" + AddonIDs + "), " + XIConstant.Key_XIDeleted + " = 0";
                        oQResult = oQE.Execute_QueryEngine("ACPurchase_T", "*", sWhereCondition);
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            oXIBOI = (Dictionary<string, XIIBO>)oQResult.oResult;
                        }
                        foreach (var item in oXIBOI)
                        {
                            oTransaction.SetAttribute("sTransCode", "ADDON");
                            oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                            oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rPremiumOverride").doValue == 0 ? item.Value.AttributeI("rCost").doValue.ToString() : item.Value.AttributeI("rPremiumOverride").doValue.ToString());
                            oTransaction.SetAttribute("FKiProductAddOnID", item.Value.AttributeI("FKiProductAddonID").doValue.ToString());
                            oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                            var ADDONTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            if (item.Value.AttributeI("rAdmin").doValue != 0)
                            {
                                oTransaction.SetAttribute("sTransCode", "ADMIN");
                                oTransaction.SetAttribute(XIConstant.Key_XIDeleted, iPaymentMethodType == 20 ? "1" : "0");
                                oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rAdmin").doValue.ToString());
                                oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                                oTransaction.SetAttribute("rPremium", item.Value.AttributeI("rAdmin").doValue < 0 ? item.Value.AttributeI("rAdmin").doValue.ToString() : "0");
                                oTransaction.SetAttribute("iSystemType", "200");
                                var ADDONAdminTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                            }
                        }
                        oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADDON Transaction Created Successfully" });
                    }
                    if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                    {
                        oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Transactions added successfully";
                    }
                    if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                    {
                        oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                    }
                    if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                    {
                        oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = sACPolicyVersionID;
                    }
                    else
                    {
                        oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sACPolicyVersionID });
                    }
                    Audit_Policy(oParams);
                    if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                    {
                        oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                    }
                }
                //else
                //{
                //    if(oBOI.AttributeI("FKiSourceID").iValue==6)
                //    {

                //    }
                //    else
                //    {

                //    }
                //}
            }
            catch (Exception ex)
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Transactions adding failed";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                Audit_Policy(oParams);
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                }
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Error: In Transaction_" + oCResult.sMessage });
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            if (TXinitial.sTXBeginAt == "POLICY")
                TXinitial.TXCommitRollback(oCResult);
            return oCResult;
        }
        public CResult InsertTermsToPolicy(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();
            oCResult.oTraceStack.Add(new CNV { sName = "Requirement", sValue = "Insert Terms method Started" });
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            var iAuditID = 0;
            int iQSInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Terms adding in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Terms adding in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();//HttpContext.Current.Session.SessionID;
                string iInsatnceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iInsatnceID, out iQSInstanceID))
                { }
                if (int.TryParse(iACPolicyID, out iPolicyID
                    ))
                { }
                XIInfraCache oCache = new XIInfraCache();
                if (iPolicyID > 0)
                {
                    QueryEngine oQEE = new QueryEngine();
                    List<XIWhereParams> oWhereParams = new List<XIWhereParams>();
                    List<SqlParameter> SQLParams = new List<SqlParameter>();
                    XIWhereParams oWParam = new XIWhereParams();
                    oWParam.sField = "FKiACPolicyID";
                    oWParam.sOperator = "=";
                    oWParam.sValue = iACPolicyID;
                    oWhereParams.Add(oWParam);
                    SQLParams.Add(new SqlParameter { ParameterName = "@FKiACPolicyID", Value = iACPolicyID });
                    oWParam = new XIWhereParams();
                    oWParam.sField = XIConstant.Key_XIDeleted;
                    oWParam.sOperator = "=";
                    oWParam.sValue = "0";
                    oWhereParams.Add(oWParam);
                    SQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    oWhereParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "!=", sValue = iInsatnceID });
                    SQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iInsatnceID });
                    //load requirement template definition of productid and FKiTransactionTypeID
                    oQEE.AddBO("Term_T", "", oWhereParams);
                    CResult oresult = oQEE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oresult.bOK && oresult.oResult != null)
                    {
                        var sSql = (string)oresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQEE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = SQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD = oQEE.QParams.FirstOrDefault().BOD;
                            oBOIList.ForEach(x => x.BOD = oBOD);
                            if (oBOIList.Count() > 0)
                            {
                                foreach (var oBOI in oBOIList)
                                {
                                    oBOI.Delete(oBOI);
                                }

                            }
                        }
                    }
                }

                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> oSQLParams = new List<SqlParameter>();
                XIWhereParams oWP = new XIWhereParams();
                oWP.sField = "FKiQsInstanceID";
                oWP.sOperator = "=";
                oWP.sValue = iInsatnceID.ToString();
                oWParams.Add(oWP);
                oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQsInstanceID", Value = iInsatnceID.ToString() });
                //load requirement template definition of productid and FKiTransactionTypeID
                oQE.AddBO("Term_T", "", oWParams);
                CResult oCresult = oQE.BuildQuery();
                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                if (oCresult.bOK && oCresult.oResult != null)
                {
                    var sSql = (string)oCresult.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql;
                    oEE.SqlParams = oSQLParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                        oBOIList.ForEach(x => x.BOD = oBOD);
                        foreach (var instance in oBOIList)
                        {
                            XIIBO oBO = new XIIBO();
                            if (instance.Attributes.ContainsKey("FKiACPolicyID"))
                            {
                                instance.Attributes["FKiACPolicyID"].sValue = iACPolicyID.ToString();
                                instance.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                            }
                            var oTerms = oBO.Save(instance);
                        }
                        if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Terms added successfully";
                        }
                        if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                        }
                        if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                        {
                            oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = sACPolicyVersionID;
                        }
                        else
                        {
                            oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sACPolicyVersionID });
                        }
                        Audit_Policy(oParams);
                        if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                        }
                        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Terms inserted executed successfully" });
                    }
                }
                oCResult.oResult = null;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Insert Terms method execution completed" });
            }
            catch (Exception ex)
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Terms adding failed";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                Audit_Policy(oParams);
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                }
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error: In Terms Insertion_" + oCResult.sMessage });
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult;
        }

        public CResult NewQuestionSet(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iInstanceID))
                { }
                if (!string.IsNullOrEmpty(sBOName) && iInstanceID > 0)
                {
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    // Copy Entire Structure Object
                    XIDStructure oStructure = new XIDStructure();
                    var oData = oIXI.BOI(sBOName, Convert.ToString(iInstanceID)).Structure("MTA Copy").XILoad("Partial");
                    var oQsI = oData.oSubStructureI("Qs Instance");
                    List<CNV> Params = new List<CNV>();
                    var iQSIID = oQsI.oBOIList.FirstOrDefault().Attributes["id"].sValue;
                    var oList = oStructure.StructureCopy(oQsI.oBOIList.FirstOrDefault().BOD.Name, iQSIID, "MTA Copy", Params);
                    var QSIID = oList.oResult.ToString();
                    int iNewQSIID = 0;
                    if (int.TryParse(QSIID, out iNewQSIID))
                    {
                        var oQSInstance = LoadQs(iNewQSIID, sGUID);
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        oCResult.oResult = oQSInstance;
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult LoadLeadQs(List<CNV> oParams)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CResult oCResult = new CResult();
            int iInstanceID = 0;
            Guid sInstanceGUID = new Guid();
            try
            {
                XIIXI oXIXI = new XIIXI();
                int iQSDID = 0; string sQSDID = string.Empty; Guid sQSDIDXIGUID = new Guid();
                sQSDID = oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sType = oParams.Where(m => m.sName.ToLower() == "sType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sQSDID = oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();//HttpContext.Current.Session.SessionID;
                var sOverrideStepXilink = oParams.Where(m => m.sName.ToLower() == "sOverrideStepXilink".ToLower()).Select(m => m.sValue).FirstOrDefault();//HttpContext.Current.Session.SessionID;   
                var OrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());

                var oLeadI = oXIXI.BOI(sBOName, iID, "");
                var QsInstanceID = "";
                if (oLeadI != null && oLeadI.Attributes.Count() > 0 && oLeadI.Attributes.ContainsKey("FKiRefLeadTypeID".ToLower()))
                {
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "-LeadTypeID", oLeadI.AttributeI("FKiRefLeadTypeID".ToLower()).sValue, null, null);
                }
                var sQSIID = oCache.Get_ParamVal(sSessionID, "ClientQSParams", "", "{XIP|iQSInstanceID}");
                int iQSIID = 0;
                int iParentQSIID = 0;
                var ParentQSIID = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|iQSInstanceID}");
                int.TryParse(ParentQSIID, out iParentQSIID);

                if (string.IsNullOrEmpty(sQSIID))
                {
                    if (string.IsNullOrEmpty(ParentQSIID) || ParentQSIID == "0")
                    {
                        sQSIID = oCache.Get_ParamVal(sSessionID, sGUID, "", "QSInstanceID");
                    }
                    else
                    {
                        var iQSInstanceID = oCache.Get_ParamVal(sSessionID, sGUID, "", "QSInstanceID");
                        if (iQSInstanceID == ParentQSIID)
                        {
                            sQSIID = ParentQSIID;
                        }
                    }
                }
                if (oLeadI != null && oLeadI.Attributes.ContainsKey("FKiQSInstanceIDXIGUID"))
                {
                    QsInstanceID = oLeadI.Attributes["FKiQSInstanceIDXIGUID"].sValue;
                }
                else if (!string.IsNullOrEmpty(sBOName) && sBOName.ToLower() == "qs instance")
                {
                        QsInstanceID = iID;
                }
                Guid sQSDIDGUID = Guid.Empty;
                //XIIXI oXI = new XIIXI();
                //var oQSIns = oXI.GetQSInstanceByID(QsInstanceID.ToString());
                //sQSDIDGUID = oQSIns.FKiQSDefinitionIDXIGUID;
                if (int.TryParse(sQSDID, out iQSDID))
                {
                }
                else
                {
                    Guid.TryParse(sQSDID, out sQSDIDGUID);
                }
                int.TryParse(QsInstanceID, out iInstanceID);
                Guid.TryParse(QsInstanceID, out sInstanceGUID);
                if (iID == "0" && iInstanceID == 0 && sInstanceGUID == Guid.Empty)
                {
                    var SubQSLeadiID = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|SubQSLeadID}");
                    var oLeadRiskI = oXIXI.BOI("Lead_T", SubQSLeadiID, "");
                    if (oLeadRiskI != null)
                    {
                        Guid.TryParse(oLeadRiskI.Attributes["FKiRiskQSIIDXIGUID"].sValue, out sInstanceGUID);
                        int.TryParse(oLeadRiskI.Attributes["FKiRiskQSIID"].sValue, out iInstanceID);
                    }
                }
                if (iInstanceID == 0 && (sInstanceGUID == null || sInstanceGUID == Guid.Empty))
                {
                    XIDQS oQSD = new XIDQS();
                    CResult oCR = new CResult();
                    if (sQSDIDGUID != Guid.Empty && sQSDIDGUID != null)
                    {
                        oQSD = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, sQSDIDGUID.ToString(), sSessionID, sGUID, 0, 0);
                        XIDQS oQSDCopy = (XIDQS)oQSD.Clone(oQSD);
                        oCR = oIXI.CreateQSI(null, sQSDIDGUID.ToString(), null, null, 0, 0, "", oQSDCopy.FKiSourceID, "", oQSDCopy.FKiOriginID, sGUID, ParentQSIID);
                    }
                    else
                    {
                        oQSD = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString(), sSessionID, sGUID, 0, 0);
                        XIDQS oQSDCopy = (XIDQS)oQSD.Clone(oQSD);
                        oCR = oIXI.CreateQSI(null, iQSDID.ToString(), null, null, 0, 0, "", oQSDCopy.FKiSourceID, "", oQSDCopy.FKiOriginID, sGUID, ParentQSIID);
                    }

                    var oQSInstance = (XIIQS)oCR.oResult;
                    iInstanceID = oQSInstance.ID;
                    sInstanceGUID = oQSInstance.XIGUID;
                    if (oLeadI != null && oLeadI.Attributes.Count > 0)
                    {
                        if (iInstanceID > 0)
                        {
                            oLeadI.Attributes["FKiQSInstanceID"].sValue = iInstanceID.ToString();
                            oLeadI.Attributes["FKiQSInstanceID"].bDirty = true;
                        }
                        else
                        {
                            oLeadI.Attributes["FKiQSInstanceIDXIGUID"].sValue = sInstanceGUID.ToString();
                            oLeadI.Attributes["FKiQSInstanceIDXIGUID"].bDirty = true;
                        }
                        oLeadI.Save(oLeadI);
                        if (oLeadI.Attributes.ContainsKey("FKiMainQSIID") || oLeadI.Attributes.ContainsKey("FKiMainQSIIDXIGUID"))
                        {
                            int iMainQS = 0;
                            Guid MainQSGUID = Guid.Empty;
                            Guid.TryParse(oLeadI.Attributes["FKiMainQSIIDXIGUID"].sValue, out MainQSGUID);
                            int.TryParse(oLeadI.Attributes["FKiMainQSIID"].sValue, out iMainQS);
                            if (MainQSGUID != null && MainQSGUID != Guid.Empty)
                            {
                                var oQSI = oIXI.BOI("QS Instance", MainQSGUID.ToString());
                                if (oQSI.Attributes.ContainsKey("iParentQSIID"))
                                {
                                    oQSI.Attributes["iParentQSIID"].sValue = iInstanceID.ToString();
                                    oQSI.Attributes["iParentQSIID"].bDirty = true;
                                    oQSI.Save(oQSI);
                                }
                            }
                            else if (iMainQS > 0)
                            {
                                var oQSI = oIXI.BOI("QS Instance", iMainQS.ToString());
                                if (oQSI.Attributes.ContainsKey("iParentQSIID"))
                                {
                                    oQSI.Attributes["iParentQSIID"].sValue = iInstanceID.ToString();
                                    oQSI.Attributes["iParentQSIID"].bDirty = true;
                                    oQSI.Save(oQSI);
                                }
                                var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, "", "-policyid");
                                if (!string.IsNullOrEmpty(PolicyID))
                                {
                                    XIIBO oOldPolicyI = oIXI.BOI("ACPolicy_T", PolicyID);
                                    List<CNV> oCNVs = new List<CNV>();
                                    CNV oCNV = new CNV();
                                    var oQuoteI = oIXI.BOI("Aggregations", oOldPolicyI.AttributeI("FKiQuoteID").sValue, "ID,FKiProductVersionID");
                                    if (!string.IsNullOrEmpty(oOldPolicyI.AttributeI("sAddonID").sValue))
                                    {
                                        var o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Renewal Addons List", null);
                                        XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                                        oCNV = new CNV();
                                        oCNV.sName = "{XIP|refAddon_T.id}";
                                        oCNV.sValue = oOldPolicyI.AttributeI("sAddonID").sValue.Replace("|||", ",");
                                        oCNVs.Add(oCNV);
                                        o1ClickC.ReplaceFKExpressions(oCNVs);
                                        XIDStructure oXIDStructure = new XIDStructure();
                                        o1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, oCNVs);
                                        Dictionary<string, XIIBO> oRes = o1ClickC.OneClick_Run(false);
                                        List<XIIBO> oAddonsList = new List<XIIBO>();
                                        if (oRes != null && oRes.Count() > 0)
                                        {
                                            oAddonsList = (List<XIIBO>)oRes.Values.ToList();
                                            XIIBO oBOI = new XIIBO();
                                            XIDBO oBOD = new XIDBO();
                                            oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO_All, "QuoteAddons", null);
                                            foreach (var oBOInstance in oAddonsList)
                                            {
                                                oCNVs = new List<CNV>();
                                                oCNV = new CNV();
                                                oCNV.sName = "FKiProductAddonID";
                                                oCNV.sValue = oBOInstance.AttributeI("ID").sValue;
                                                oCNVs.Add(oCNV);
                                                oCNV = new CNV();
                                                oCNV.sName = "FKiQuoteID";
                                                oCNV.sValue = oOldPolicyI.AttributeI("FKiQuoteID").sValue;
                                                oCNVs.Add(oCNV);
                                                oCNV = new CNV();
                                                oCNV.sName = XIConstant.Key_XIDeleted;
                                                oCNV.sValue = "0";
                                                oCNVs.Add(oCNV);
                                                XIIBO oQuoteAddonI = oIXI.BOI("QuoteAddons", null, "*", oCNVs);
                                                if (oQuoteAddonI != null && oQuoteAddonI.Attributes.Count() > 0)
                                                {
                                                    oBOI = new XIIBO();
                                                    oBOI.BOD = oBOD;
                                                    oBOI.SetAttribute("rSalePrice", oQuoteAddonI.AttributeI("rSalePrice").sValue);
                                                    oBOI.SetAttribute("rIPT", oQuoteAddonI.AttributeI("rIPT").sValue);
                                                    oBOI.SetAttribute("rSalePriceExcludeIPT", oQuoteAddonI.AttributeI("rSalePriceExcludeIPT").sValue);
                                                    oBOI.SetAttribute("rCostPrice", oQuoteAddonI.AttributeI("rCostPrice").sValue);
                                                    oBOI.SetAttribute("rMargin", oQuoteAddonI.AttributeI("rMargin").sValue);
                                                    oBOI.SetAttribute("sName", oQuoteAddonI.AttributeI("sName").sValue);
                                                    oBOI.SetAttribute("FKiProductAddonID", oQuoteAddonI.AttributeI("FKiProductAddonID").sValue);
                                                    oBOI.SetAttribute("refAddon", oQuoteAddonI.AttributeI("refAddon").sValue);
                                                    if (iInstanceID > 0)
                                                    {
                                                        oBOI.SetAttribute("FKiQSInstanceID", iInstanceID.ToString());
                                                    }
                                                    else
                                                    {
                                                        oBOI.SetAttribute("FKiQSInstanceIDXIGUID", sInstanceGUID.ToString());
                                                    }
                                                    oBOI.SetAttribute("FKiProductVersionID", oQuoteAddonI.AttributeI("FKiProductVersionID").sValue);
                                                    oBOI.SetAttribute("bIsIPT", oQuoteAddonI.AttributeI("bIsIPT").sValue);
                                                    var oNewQuoteAddonI = oBOI.Save(oBOI);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (oLeadI == null)
                    {
                        string sLeadID = oCache.Get_ParamVal(sSessionID, sGUID, "", "-iLeadID");
                        List<CNV> oCNVList = new List<CNV>();
                        CNV List = new CNV();
                        if (string.IsNullOrEmpty(sLeadID))
                        {
                            List.sName = "FKiQSInstanceIDXIGUID";
                            List.sValue = ParentQSIID.ToString();
                            oCNVList.Add(List);
                            oLeadI = oXIXI.BOI("Lead_T", "", "", oCNVList);
                            sLeadID = oLeadI.Attributes["id"].sValue;
                        }
                        if (!string.IsNullOrEmpty(sLeadID) && sLeadID != "0")
                        {
                            oLeadI = oXIXI.BOI("Lead_T", sLeadID);
                            if (oLeadI == null)
                            {
                                List.sName = "FKiQSInstanceIDXIGUID";
                                List.sValue = ParentQSIID.ToString();
                                oCNVList.Add(List);
                                oLeadI = oXIXI.BOI("Lead_T", "", "", oCNVList);
                                if (oLeadI != null)
                                {
                                    sLeadID = oLeadI.Attributes["id"].sValue;
                                }
                                oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|iParentQSInstanceID}", ParentQSIID.ToString(), "", null);
                                if (oLeadI != null)
                                {
                                    oLeadI.SetAttribute("FKiRiskQSIID", iInstanceID.ToString());
                                    oLeadI.SetAttribute("FKiRiskQSIIDXIGUID", sInstanceGUID.ToString());
                                    oLeadI.Save(oLeadI);
                                }
                            }
                        }
                    }
                }
                if (iInstanceID > 0 || (sInstanceGUID != null && sInstanceGUID != Guid.Empty))
                {
                    //var oQSInstance = LoadQs(iInstanceID, sGUID);
                    XIIQS oQSInstance = new XIIQS();
                    if (sInstanceGUID != null && sInstanceGUID != Guid.Empty)
                    {
                        oQSInstance = ReLoadQs(sInstanceGUID.ToString(), sGUID, sQSDID, sType, "Reload", sOverrideStepXilink,"", OrgID);
                    }
                    else
                    {
                        oQSInstance = ReLoadQs(iInstanceID.ToString(), sGUID, sQSDID, sType, "Reload", sOverrideStepXilink, "", OrgID);
                    }
                    //if (!string.IsNullOrEmpty(ParentQSIID))
                    //{
                    //    oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|iParentQSInstanceID}", ParentQSIID.ToString(), "", null);
                    //}
                    if (!string.IsNullOrEmpty(oQSInstance.sMode) && oQSInstance.sMode.ToLower() == "not allowed")
                    {
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        oCResult.oResult = oQSInstance;
                        return oCResult;
                    }
                    if (iInstanceID > 0)
                    {
                        oParams.Add(new CNV { sName = "iQSInstanceID", sValue = iInstanceID.ToString() });
                    }
                    else
                    {
                        oParams.Add(new CNV { sName = "iQSInstanceID", sValue = sInstanceGUID.ToString() });
                    }
                    if (iQSDID > 0)
                    {
                        oParams.Add(new CNV { sName = "iQSDID", sValue = iQSDID.ToString()/*oQSInstance.FKiQSDefinitionIDXIGUID.ToString()*/ });
                    }
                    else
                    {
                        oParams.Add(new CNV { sName = "iQSDID", sValue = sQSDIDGUID.ToString()/*oQSInstance.FKiQSDefinitionIDXIGUID.ToString()*/ });
                    }
                    UpdateQSInstanceDate(oParams);
                    List<XIWhereParams> oWParams1 = new List<XIWhereParams>();
                    List<SqlParameter> oSQLParams = new List<SqlParameter>();
                    oWParams1.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = sInstanceGUID.ToString() });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = sInstanceGUID.ToString() });
                    oWParams1.Add(new XIWhereParams { sField = "iStatus", sOperator = "=", sValue = "0" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "0" });
                    oWParams1.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    QueryEngine oQE = new QueryEngine();
                    //load requirement template definition of productid and FKiTransactionTypeID
                    oQE.AddBO("ACPurchase_T", "Create", oWParams1);
                    CResult oCresult = oQE.BuildQuery();
                    ExecutionEngine oEE = new ExecutionEngine();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oCresult.bOK && oCresult.oResult != null)
                    {
                        var sSql = (string)oCresult.oResult;
                        //ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = oSQLParams;
                        var oQResult1 = oEE.Execute();
                        if (oQResult1.bOK && oQResult1.oResult != null)
                        {
                            //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult1.oResult).Values.ToList();
                            foreach (var oBOI in oBOIList)
                            {
                                if (oBOI.Attributes.ContainsKey("FKiProductAddonID"))
                                {
                                    oCache.Set_ParamVal(sSessionID, sGUID, "", "Addon_" + oBOI.Attributes["FKiProductAddonID"].sValue, oBOI.Attributes["FKiProductAddonID"].sValue, "", null);
                                }
                            }
                        }
                    }
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                    oCResult.oResult = oQSInstance;
                }

                //var oLeadI = oXIXI.BOI(sBOName, iID, "Create");
                //if (oLeadI != null && oLeadI.Attributes.ContainsKey("FKiQSInstanceID"))
                //{
                //var QsInstanceID = "31514"; // oLeadI.Attributes["FKiQSInstanceID"].sValue;
                //if (int.TryParse(QsInstanceID, out iInstanceID))
                //{
                //var oQSInstance = LoadQs(iInstanceID, sGUID);
                //var oQSInstance = ReLoadQs(iInstanceID, sGUID, 1262);
                //oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                //oCResult.oResult = oQSInstance;
                //}
                //}
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            watch.Stop();
            var iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oXID.Cache_Performance("Policy/LoadLeadQS", iLapsedTime, Guid.Empty, 100);
            return oCResult;
        }

        public CResult Buyquote(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iInstanceID = 0;
                if (int.TryParse(iID, out iInstanceID))
                {
                    XIIXI oIXI = new XIIXI();
                    // Copy Entire Structure Object
                    var oBOI = oIXI.BOI(sBOName, Convert.ToString(iInstanceID));
                    if (oBOI.Attributes != null)
                    {
                        var QSIID = oBOI.AttributeI("FKiQSInstanceID").sValue;
                        if (int.TryParse(QSIID, out iQSInstanceID))
                        { }
                        int iGlobalPaymentID = 0;
                        XIIQS oQSI = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                        var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, oQSI.FKiQSDefinitionIDXIGUID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                        var OriginI = oIXI.BOI("XIOrigin", oQSDefinition.FKiOriginID.ToString());
                        if (OriginI != null && OriginI.Attributes.ContainsKey("FkiPaymentID"))
                        {
                            var PaymentID = OriginI.Attributes["FkiPaymentID"].sValue;
                            if (int.TryParse(PaymentID, out iGlobalPaymentID))
                            { }
                        }
                        var UserID = oBOI.Attributes["FKiUserID"].sValue;
                        var oUserI = oIXI.BOI("XIAPPUsers", UserID);
                        int iOrgID = 0;
                        if (oUserI.Attributes != null)
                        {
                            var orgID = oUserI.Attributes["FKiOrgID"].sValue;
                            if (int.TryParse(orgID, out iOrgID))
                            {
                            }
                        }

                        var Price = oBOI.Attributes["rPrice"].sValue;
                        decimal rPrice = 0;
                        if (decimal.TryParse(Price, out rPrice))
                        {
                            // int OrganizationID = 5;
                            XIInfraPayment XIInfraPayment = new XIInfraPayment();
                            var sServerKey = System.Configuration.ConfigurationManager.AppSettings["ServerKey"];
                            var oPaymentGateWay = XIInfraPayment.Get_PaymentGatway(iOrgID, sDataBase, sServerKey, iGlobalPaymentID);
                            if (oPaymentGateWay.xiStatus == 0 && oPaymentGateWay.oResult != null)
                            {
                                XIInfraPayment = (XIInfraPayment)oPaymentGateWay.oResult;
                                if (XIInfraPayment.ID > 0)
                                {
                                    if (XIInfraPayment.sName.ToLower() == "GlobalPayment".ToLower())
                                    {
                                        PayWithGlobalPayments(XIInfraPayment, iID + "_" + sGUID, rPrice);
                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public XIIQS LoadQs(int iQSSIID, string sGUID)
        {
            CResult oCResult = new CResult();
            XIIQS oQSInstance = new XIIQS();
            try
            {
                string sSessionID = HttpContext.Current.Session.SessionID;
                XIInfraCache oCache = new XIInfraCache();
                XIIXI oXI = new XIIXI();
                var oQSIns = oXI.GetQSInstanceByID(iQSSIID.ToString());
                oQSInstance = oXI.GetQuestionSetInstanceByID(oQSIns.FKiQSDefinitionIDXIGUID.ToString(), iQSSIID.ToString(), null, 0, 0, oQSIns.FKiUserCookieID);
                if (oQSInstance.Steps.Values.Count() > 0)
                {
                    var StepID = oQSInstance.QSDefinition.Steps.Values.ToList().OrderBy(m => m.iOrder).Select(m => m.XIGUID).FirstOrDefault();
                    var stepName = oCache.Get_ParamVal(sSessionID, sGUID, "", "sCurrentStepName");
                    if (!string.IsNullOrEmpty(stepName))
                    {

                        if (!string.IsNullOrEmpty(stepName))
                        {
                            StepID = oQSInstance.QSDefinition.Steps[stepName].XIGUID;
                        }
                        else
                        {
                            StepID = oQSInstance.GetActiveStepID("0", sGUID);
                        }
                    }
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "sCurrentStepName", "", null, null);
                    var oCurrentStep = oQSInstance.Steps.Values.ToList().Where(m => m.FKiQSStepDefinitionIDXIGUID == StepID).FirstOrDefault();
                    if (oCurrentStep == null)
                    {
                        var ActiveStepID = oQSInstance.GetActiveStepID(StepID.ToString(), sGUID);
                        oQSInstance = oQSInstance.LoadStepInstance(oQSInstance, ActiveStepID.ToString());
                        oQSInstance.Steps.Values.ToList().Where(m => m.FKiQSStepDefinitionIDXIGUID == ActiveStepID).FirstOrDefault().bIsCurrentStep = true;
                    }
                    else
                    {
                        var ActiveStepID = oQSInstance.GetActiveStepID(StepID.ToString(), sGUID);
                        oQSInstance.Steps.Values.ToList().Where(m => m.FKiQSStepDefinitionIDXIGUID == ActiveStepID).FirstOrDefault().bIsCurrentStep = true;
                    }
                }
                oQSInstance.iCurrentStepIDXIGUID = oQSInstance.Steps.Values.Where(m => m.bIsCurrentStep == true).Select(m => m.FKiQSStepDefinitionIDXIGUID).FirstOrDefault();
                oQSInstance.sCurrentStepName = oQSInstance.QSDefinition.Steps.Values.Where(m => m.XIGUID == oQSInstance.iCurrentStepIDXIGUID).Select(m => m.sName).FirstOrDefault();
                oQSInstance.sQSType = "Internal";
                if (oQSInstance.HistoryXIGUID == null)
                {
                    oQSInstance.HistoryXIGUID = new List<Guid>();
                }
                oQSInstance.HistoryXIGUID.Add(oQSInstance.iCurrentStepIDXIGUID);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}", Convert.ToString(oQSInstance.XIGUID), "autoset", null);
                oCache.Set_QuestionSetCache("QuestionSetCache", sGUID, oQSInstance.XIGUID.ToString(), oQSInstance);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSSIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSSIID);
            }
            return oQSInstance;
        }

        public XIIQS ReLoadQs(string iQSSIID, string sGUID, string iQSDID, string sType = null, string sLoadType = null, string sStepOverrideXilink = null, string TabSwitching = null, int OrgID=0)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CResult oCResult = new CResult();
            XIIQS oQSInstance = new XIIQS();
            int QSIID = 0;
            try
            {
                Guid QSIXIGUID = Guid.Empty;
                int.TryParse(iQSSIID, out QSIID);
                Guid.TryParse(iQSSIID, out QSIXIGUID);
                Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                int iQSDefinitionID = 0;
                Guid QSDXIGUID = Guid.Empty;
                string sSessionID = HttpContext.Current.Session.SessionID;
                XIInfraCache oCache = new XIInfraCache();
                XIIXI oXI = new XIIXI();
				
                if (QSIXIGUID != null && QSIXIGUID != Guid.Empty)
                {
                    oQSInstance = oXI.GetQSXIValuesByQSIID(QSIXIGUID.ToString(), OrgID);//.GetXIValuesByQSIID(iQSSIID);
					//When you QS reload the fkistepinstance is overwritten to an empty guid on save. pending org id implementation so commented
                    //oQSInstance = oIXI.GetQuestionSetInstanceByID("0", QSIXIGUID.ToString(), null, 0, 0, null, OrgID);
                }
                else if (QSIID > 0)
                {
                    oQSInstance = oXI.GetQSXIValuesByQSIID(QSIID.ToString(), OrgID);
					//When you QS reload the fkistepinstance is overwritten to an empty guid on save. pending org id implementation so commented
                    //oQSInstance = oIXI.GetQuestionSetInstanceByID("0", QSIID.ToString(), null, 0, 0, null, OrgID);
                }
                //oQSInstance.ID = QSIID;
                //oQSInstance.XIGUID = QSIXIGUID;
                List<CNV> oWhereParams = new List<CNV>();
                if (QSIXIGUID != null && QSIXIGUID != Guid.Empty)
                {
                    oWhereParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIXIGUID.ToString() });
                }
                else if (QSIID > 0)
                {
                    oWhereParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = QSIID.ToString() });
                }
                var oLeadI = oXI.BOI("Lead_T", null, null, oWhereParams);
                
                if (oLeadI == null)
                {
                    oWhereParams = new List<CNV>();
                    if (QSIXIGUID != null && QSIXIGUID != Guid.Empty)
                    {
                        oWhereParams.Add(new CNV { sName = "FKiRiskQSIIDXIGUID", sValue = QSIXIGUID.ToString() });
                    }
                   else if (QSIID > 0)
                    {
                        oWhereParams.Add(new CNV { sName = "FKiRiskQSIID", sValue = QSIID.ToString() });
                    }
                    oLeadI = oXI.BOI("Lead_T", null, null, oWhereParams);
                }
                int iLeadStatus = 0;
                if (oLeadI != null && oLeadI.Attributes.Count() > 0)
                {
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|ClassID}", oLeadI.Attributes["FKiClassID"].sValue, null, null);
                    var sOrigin = oLeadI.Attributes["iOrigin"].sValue;
                    var sTraceStage = oLeadI.Attributes["sTraceStage"].sValue;
                    var sRecTraceStage = oLeadI.Attributes["sRecurrsiveTraceStage"].sValue;
                    if (oLeadI.Attributes.ContainsKey("iStatus") && !string.IsNullOrEmpty(oLeadI.Attributes["iStatus"].sValue))
                    {
                        if (int.TryParse(oLeadI.Attributes["iStatus"].sValue, out iLeadStatus))
                        {
                            if (iLeadStatus == 50)
                            {
                                var JunkLeadErrorMsg = oCache.Get_ParamVal(sSessionID, sGUID, "", "JunkLeadErrorMsg");
                                dictmsg.Add("Error:UserName", JunkLeadErrorMsg);
                            }
                        }
                    }
                    //get the configuration is true or false for switching between trace Reload or not when sTraceStarge not ends with "JU"
                    //string sWelComeTempFunction = "xi.s|{xi.a|'XIConfig_T','IsCheckValidTrace','sValue','','sName'}";
                    //XIDScript oXIScript = new XIDScript();
                    //oXIScript.sScript = sWelComeTempFunction.ToString();
                    //var oCR = oXIScript.Execute_Script("", "");
                    //var Status = oCR.oResult.ToString();

                    ////if Status == "true" this piece of code Executing
                    ////if it don't want to execute, chanage the value in XiConfig table
                    //if (!string.IsNullOrEmpty(Status) && Status.ToLower() == "true" && !string.IsNullOrEmpty(sTraceStage) && (sTraceStage.EndsWith("JU") || sRecTraceStage.EndsWith("JU")) && sLoadType == "Reload")
                    //{
                    //    oQSInstance.sMode = "Not Allowed";
                    //    return oQSInstance;
                    //}
                    if (!string.IsNullOrEmpty(sOrigin) && sOrigin == "2" && !string.IsNullOrEmpty(sTraceStage) && (!sTraceStage.Contains("PU")/* || !sRecTraceStage.EndsWith("PU")*/) && sLoadType == "Reload" && oQSInstance.FKiClassID != 6)
                    {
                        oQSInstance.sMode = "Not Allowed";
                        return oQSInstance;
                    }
                }
                oWhereParams = new List<CNV>();
                oWhereParams.Add(new CNV { sName = "FKiSourceID", sValue = oQSInstance.FKiSourceID.ToString() });
                oWhereParams.Add(new CNV { sName = "FKiClassID", sValue = oQSInstance.FKiClassID.ToString() });
                oWhereParams.Add(new CNV { sName = "sType", sValue = sType });

                var oQSMaPI = oXI.BOI("XIQSClassMapping_T", null, null, oWhereParams);
                if (oQSMaPI != null && oQSMaPI.Attributes.ContainsKey("FKiQSDefinitionID"))
                {
                    var sQSDID = oQSMaPI.AttributeI("FKiQSDefinitionID").sValue;
                    if (int.TryParse(sQSDID, out iQSDefinitionID))
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}", iQSDefinitionID.ToString(), null, null);
                    }
                }
                else
                {
                    iQSDefinitionID = oQSInstance.FKiQSDefinitionID;
                    Guid QSIGUID = Guid.Empty;
                    Guid.TryParse(iQSDID, out QSIGUID);
                    if (QSIGUID != null && QSIGUID != Guid.Empty)
                    {
                        QSDXIGUID = new Guid(iQSDID);
                    }
                    else
                    {
                        QSDXIGUID = oQSInstance.FKiQSDefinitionIDXIGUID;
                    }
                }
                var QSReloadStage = oCache.Get_ParamVal(sSessionID, sGUID, "", "ReloadStage");
                int iQSStage = 0;
                if (!string.IsNullOrEmpty(QSReloadStage))
                {
                    int.TryParse(QSReloadStage, out iQSStage);
                }
                var oQSDefinition = new XIDQS();
                if (QSDXIGUID != null && QSDXIGUID != Guid.Empty)
                {
                    oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, QSDXIGUID.ToString(), null, null, 0, OrgID);//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                }
                else if (iQSDefinitionID > 0)
                {
                    oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDefinitionID.ToString(), null, null, 0, OrgID);//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                }

                oQSInstance.sQSName = oQSDefinition.sName;
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sQSName}", "QS_" + oQSInstance.ID.ToString(), null, null);
                XIDQS oQSDC = oQSDefinition.GetCopy();
                if (oQSDefinition != null)
                {
                    if (oLeadI != null && oLeadI.Attributes["FKiClassID"].sValue != null && oLeadI.Attributes["FKiClassID"].sValue != "0")
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|ClassID}", oLeadI.Attributes["FKiClassID"].sValue, null, null);
                    }
                    else if (oQSDC != null && oQSDC.FKiClassID > 0)
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|ClassID}", oQSDC.FKiClassID.ToString(), null, null);
                    }

                    oQSInstance.QSDefinition = oQSDC;
                    oQSInstance.FKiQSDefinitionID = oQSDC.ID;
                    oQSInstance.FKiQSDefinitionIDXIGUID = oQSDC.XIGUID;
                    if (oQSDC.Steps != null && oQSDC.Steps.Count() > 0)
                    {
                        //var Steps = oQSDefinition.Steps.Values.ToList();
                        //oQSInstance.LoadStepInstance(oQSInstance, Steps.FirstOrDefault().ID, sGUID);
                        //var Steps = oQSDefinition.Steps.Values.ToList();
                        //for (int k = 0; k < Steps.Count(); k++)
                        //{
                        //    oQSInstance.LoadStepInstance(oQSInstance, Steps.ElementAt(k).ID, sGUID);
                        //}
                    }
                }


                List<Guid> PrevStepIDs = new List<Guid>();
                //if (oQSInstance.Steps.Values.Count() > 0)
                //{
                var StepID = oQSInstance.QSDefinition.Steps.Values.ToList().OrderBy(m => m.iOrder).Select(m => m.XIGUID).FirstOrDefault();
                var stepName = oCache.Get_ParamVal(sSessionID, sGUID, "", "sCurrentStepName");
                if (!string.IsNullOrEmpty(stepName))
                {
                    StepID = oQSInstance.QSDefinition.Steps[stepName].XIGUID;
                    //if (!string.IsNullOrEmpty(stepName))
                    //{
                    //    StepID = oQSInstance.QSDefinition.Steps[stepName].ID;
                    //}
                    //else
                    //{
                    //    int iStage = oQSInstance.iStage;
                    //    var stepD = oQSInstance.QSDefinition.Steps.Values.Where(m => m.iStage == oQSInstance.iStage).ToList().OrderBy(m => m.iOrder).FirstOrDefault();
                    //    PrevStepIDs = oQSInstance.QSDefinition.Steps.Values.Where(m => m.iOrder < stepD.iOrder).ToList().Select(m => m.ID).ToList();
                    //    StepID = stepD.ID;
                    //}
                }
                else if (oQSInstance.QSDefinition.bIsStage /*&& oQSInstance.bIsDisable==true*/)
                {
                    int iStage = oQSInstance.iStage;
                    if (iQSStage > 0)
                    {
                        var ReloadStageErrorMessage = oCache.Get_ParamVal(sSessionID, sGUID, "", "ReloadStageErrorMessage");
                        dictmsg.Add("Error:UserName", ReloadStageErrorMessage);
                        iStage = iQSStage;
                    }
                    var stepD = oQSInstance.QSDefinition.Steps.Values.Where(m => m.iStage == iStage).ToList().OrderBy(m => m.iOrder).FirstOrDefault();
                    if (stepD != null)
                    {

                        if (!string.IsNullOrEmpty(TabSwitching) && TabSwitching.ToLower() == "yes")
                        {
                            PrevStepIDs = oQSInstance.QSDefinition.Steps.Values.Where(m => m.iOrder <= stepD.iOrder).ToList().OrderBy(m => m.iOrder).Select(m => m.XIGUID).ToList();
                        }
                        else
                        {
                            PrevStepIDs = oQSInstance.QSDefinition.Steps.Values.Where(m => m.iOrder < stepD.iOrder).ToList().OrderBy(m => m.iOrder).Select(m => m.XIGUID).ToList();
                        }
                        StepID = stepD.XIGUID;
                    }
                    oQSInstance.HistoryXIGUID = new List<Guid>();
                }
                else
                {
                    if (oQSInstance.iCurrentStepIDXIGUID != null && oQSInstance.iCurrentStepIDXIGUID != Guid.Empty)
                    {
                        StepID = oQSInstance.iCurrentStepIDXIGUID;
                    }
                }
                oCache.Set_ParamVal(sSessionID, sGUID, "", "sCurrentStepName", "", null, null);
                if (oQSInstance.XIGUID != Guid.Empty && oQSInstance.XIGUID != null)
                {
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|iQsInstanceID}", oQSInstance.XIGUID.ToString(), "", null);
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "-instanceid", oQSInstance.XIGUID.ToString(), "", null);
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|QS Instance.id}", oQSInstance.XIGUID.ToString(), "", null);
                }
                else
                {
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|iQsInstanceID}", oQSInstance.XIGUID.ToString(), "", null);
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "-instanceid", oQSInstance.XIGUID.ToString(), "", null);
                    oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|QS Instance.id}", oQSInstance.XIGUID.ToString(), "", null);
                }
                var oCurrentStep = oQSInstance.Steps.Values.ToList().Where(m => m.FKiQSStepDefinitionIDXIGUID == StepID).FirstOrDefault();
                var s1ClickIDs = oQSInstance.QSDefinition.Steps.Values.Where(m => m.XIGUID == StepID).Select(m => m.s1ClickIDs).FirstOrDefault();
                setParam(s1ClickIDs, sGUID);
                Dictionary<string, XIIQSStep> oPreStepI = new Dictionary<string, XIIQSStep>();
                if (PrevStepIDs.Count > 0)
                {
                    foreach (var iStepID in PrevStepIDs)
                    {
                        var oStepD = oQSInstance.QSDefinition.Steps.Values.Where(m => m.XIGUID == iStepID).FirstOrDefault();
                        if (oStepD.Scripts != null && oStepD.Scripts.Count() > 0 && oStepD.Scripts.ContainsKey("Step Visibility"))
                        {
                            XIDScript oScriptD = new XIDScript();
                            oScriptD = oStepD.Scripts["Step Visibility"];
                            if (oScriptD != null && oScriptD.sLanguage.ToLower() == "XIScript".ToLower())
                            {
                                var oRes = oScriptD.Execute_Script(sGUID, sSessionID);
                                if (oRes.bOK && oRes.oResult != null)
                                {
                                    var bIsActive = (string)oRes.oResult;
                                    if (!string.IsNullOrEmpty(bIsActive) && bIsActive.ToLower() == "true")
                                    {
                                        oQSInstance = oQSInstance.LoadStepInstance(oQSInstance, iStepID.ToString(), sGUID);
                                        foreach (var Section in oQSInstance.Steps[oStepD.sName].Sections)
                                        {
                                            var oFieldDef = oStepD.Sections[Section.Key].FieldDefs;
                                            foreach (var Field in Section.Value.XIValues)
                                            {
                                                var oFiledOrigin = oFieldDef[Field.Key].FieldOrigin;
                                                if (oFiledOrigin.bIsSetToCache)
                                                {
                                                    string sCacheParam = oFiledOrigin.sName;
                                                    if (!string.IsNullOrEmpty(oFiledOrigin.sCacheName))
                                                    {
                                                        sCacheParam = oFiledOrigin.sCacheName;
                                                    }
                                                    oCache.Set_ParamVal(sSessionID, sGUID, "", sCacheParam, Field.Value.sValue, "", null);
                                                }
                                            }
                                        }
                                        if (!oQSInstance.QSDefinition.bIsStage && oQSInstance.bIsDisable == true)
                                        {
                                            oQSInstance.HistoryXIGUID.Add(iStepID);
                                        }
                                        else { oQSInstance.HistoryXIGUID = new List<Guid>(); }
                                        oCache.Set_QuestionSetCache("QuestionSetCache", sGUID, oQSInstance.XIGUID.ToString(), oQSInstance);
                                    }
                                }
                            }
                        }
                        else
                        {
                            oQSInstance = oQSInstance.LoadStepInstance(oQSInstance, iStepID.ToString(), sGUID, OrgID);
                            foreach (var Section in oQSInstance.Steps[oStepD.sName].Sections)
                            {
                                var oFieldDef = oStepD.Sections[Section.Key].FieldDefs;
                                foreach (var Field in Section.Value.XIValues)
                                {
                                    var oFiledOrigin = oFieldDef[Field.Key].FieldOrigin;
                                    if (oFiledOrigin.bIsSetToCache)
                                    {
                                        string sCacheParam = oFiledOrigin.sName;
                                        if (!string.IsNullOrEmpty(oFiledOrigin.sCacheName))
                                        {
                                            sCacheParam = oFiledOrigin.sCacheName;
                                        }
                                        oCache.Set_ParamVal(sSessionID, sGUID, "", sCacheParam, Field.Value.sValue, "", null);
                                    }
                                }
                            }
                            if (oQSInstance.QSDefinition.bIsStage && oQSInstance.bIsDisable == true)
                            {
                                oQSInstance.HistoryXIGUID = new List<Guid>();
                            }
                            else
                            {
                                oQSInstance.HistoryXIGUID.Add(iStepID);
                            }
                            oCache.Set_QuestionSetCache("QuestionSetCache", sGUID, oQSInstance.XIGUID.ToString(), oQSInstance);
                        }
                    }
                }

                if (oCurrentStep == null)
                {

                    var ActiveStepID = oQSInstance.GetActiveStepID(StepID.ToString(), sGUID);
                    if (StepID != ActiveStepID)
                    {
                        s1ClickIDs = oQSInstance.QSDefinition.Steps.Values.Where(m => m.XIGUID == ActiveStepID).Select(m => m.s1ClickIDs).FirstOrDefault();
                        setParam(s1ClickIDs, sGUID);
                    }
                    oQSInstance = oQSInstance.LoadStepInstance(oQSInstance, ActiveStepID.ToString(), sGUID, OrgID);
                    if (oQSInstance.Steps != null && oQSInstance.Steps.Count > 0)
                    {
                        oQSInstance.Steps.Values.ToList().Where(m => m.FKiQSStepDefinitionIDXIGUID == ActiveStepID).FirstOrDefault().bIsCurrentStep = true;
                    }
                }
                else
                {
                    var ActiveStepID = oQSInstance.GetActiveStepID(StepID.ToString(), sGUID);
                    oQSInstance.Steps.Values.ToList().Where(m => m.FKiQSStepDefinitionIDXIGUID == ActiveStepID).FirstOrDefault().bIsCurrentStep = true;
                }
                //}
                oQSInstance.FKiQSDefinitionID = iQSDefinitionID;
                oQSInstance.FKiQSDefinitionIDXIGUID = QSDXIGUID;
                oQSInstance.iCurrentStepIDXIGUID = oQSInstance.Steps.Values.Where(m => m.bIsCurrentStep == true).Select(m => m.FKiQSStepDefinitionIDXIGUID).FirstOrDefault();
                oQSInstance.sCurrentStepName = oQSInstance.QSDefinition.Steps.Values.Where(m => m.XIGUID == oQSInstance.iCurrentStepIDXIGUID).Select(m => m.sName).FirstOrDefault();
                oQSInstance.sQSType = sType.ToLower() == "public" ? sType : "Internal";
                oQSInstance.iLeadStatus = iLeadStatus;
                oCache.Set_ParamVal(sSessionID, sGUID, "", "sQSType", oQSInstance.sQSType, null, null);
                if (oQSInstance.HistoryXIGUID == null)
                {
                    oQSInstance.HistoryXIGUID = new List<Guid>();
                }
                oQSInstance.HistoryXIGUID.Add(oQSInstance.iCurrentStepIDXIGUID);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}", Convert.ToString(oQSInstance.XIGUID), "autoset", null);
                oCache.Set_ParamVal(sSessionID, sGUID, "", "-instanceid", Convert.ToString(oQSInstance.XIGUID), "", null);
                oQSInstance.sGUID = sGUID;
                if (dictmsg != null && dictmsg.Count > 0)
                {
                    oQSInstance.Steps.Values.Where(m => m.FKiQSStepDefinitionIDXIGUID == oQSInstance.iCurrentStepIDXIGUID).FirstOrDefault().XiMessages = new Dictionary<string, string>();
                    oQSInstance.Steps.Values.Where(m => m.FKiQSStepDefinitionIDXIGUID == oQSInstance.iCurrentStepIDXIGUID).FirstOrDefault().XiMessages = dictmsg;
                }
                oCache.Set_QuestionSetCache("QuestionSetCache", sGUID, oQSInstance.XIGUID.ToString(), oQSInstance);
                var iCurrentStepID = oQSInstance.iCurrentStepIDXIGUID;
                var oCurrentStepD = oQSInstance.QSDefinition.Steps.Values.Where(m => m.XIGUID == iCurrentStepID).FirstOrDefault();
                if (oCurrentStepD != null)
                {
                    if (oCurrentStepD.XILinkID > 0 && !string.IsNullOrEmpty(sStepOverrideXilink))
                    {
                        int iOverrideStepXilink = 0;
                        int.TryParse(sStepOverrideXilink, out iOverrideStepXilink);
                        if (iOverrideStepXilink > 0)
                        {
                            oCurrentStepD.XILinkID = iOverrideStepXilink;
                        }
                    }
                    Dictionary<string, XIDQSStep> Steps = new Dictionary<string, XIDQSStep>();
                    oQSInstance.HistoryXIGUID = new List<Guid>();
                    foreach (var Step in oQSDC.Steps.Values.ToList().OrderBy(k => k.iOrder))
                    {
                        Steps[Step.sName] = new XIDQSStep() { ID = Step.ID, XIGUID = Step.XIGUID, sName = Step.sName, iOrder = Step.iOrder, sDisplayName = Step.sDisplayName, sIsHidden = Step.sIsHidden, iStage = Step.iStage, iLockStage = Step.iLockStage, iCutStage = Step.iLockStage, bIsAutoReload = Step.bIsAutoReload, bIsAutoSaving = Step.bIsAutoSaving };
                        if (Step.bIsAutoSaving == true || oQSInstance.iStage >= Step.iStage)
                            oQSInstance.HistoryXIGUID.Add(Step.XIGUID);
                    }
                    if (oQSInstance.QSDefinition.bIsStage && oQSInstance.bIsDisable == true)
                    {
                        oQSInstance.HistoryXIGUID = new List<Guid>();
                    }
                    oQSInstance.QSDefinition.Steps = Steps;
                    oQSInstance.QSDefinition.Steps[oCurrentStepD.sName] = oCurrentStepD;
                }
                //Load Required qs params
                XIIQS oQSI = new XIIQS();
                XIInfraUsers oUser = new XIInfraUsers();
                List<string> MandatoryParams = new List<string>();
                var oCRParam = oQSI.Load_ReqQSDefParams(sSessionID, sGUID, oQSInstance.QSDefinition.XIGUID.ToString(), "QS");
                if (oCRParam.bOK && oCRParam.oResult != null)
                {
                    var oCacheNVs = new List<CNV>();
                    List<XIRequiredParamDef> oNVs = (List<XIRequiredParamDef>)oCRParam.oResult;
                    if (oNVs != null && oNVs.Count() > 0)
                    {
                        var PersistedYesDef = oNVs.Where(m => m.iPersisted == 10).ToList();
                        if (PersistedYesDef != null && PersistedYesDef.Count() > 0)
                        {
                            var oCR = oQSI.Load_ReqQSInsParams(sSessionID, sGUID, oQSInstance.XIGUID.ToString(), "QSI");
                            var oPersistedNVs = (List<CNV>)oCR.oResult;
                            foreach (var PersistNVD in PersistedYesDef)
                            {
                                //Check parameter in cache
                                var CacheObj = oCache.Get_Paramobject(sSessionID, sGUID, null, PersistNVD.sParamName);
                                if (CacheObj == null)// if parameter not found in cache then set with default value from config
                                {
                                    if (PersistNVD.iRequired == 10)
                                    {
                                        if (PersistNVD.iDefault == 10)
                                        {
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, PersistNVD.sParamName, PersistNVD.sDefaultValue, null, null);
                                        }
                                    }
                                    else if (PersistNVD.iRequired == 20)//mandatory paramerter is not found in cache
                                    {
                                        MandatoryParams.Add(PersistNVD.sParamName);
                                    }
                                }
                                else
                                {
                                    var CacheOldVal = oCache.Get_ParamVal(sSessionID, sGUID, null, PersistNVD.sParamName);
                                    if (oPersistedNVs != null)
                                    {
                                        var PersistedVal = oPersistedNVs.OrderByDescending(n => n.ID).Where(m => m.sName.ToLower() == PersistNVD.sParamName.ToLower()).Select(m => m.sValue).FirstOrDefault();
                                        //if cache value is null then set with persisted value
                                        if (string.IsNullOrEmpty(CacheOldVal))
                                        {
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, PersistNVD.sParamName, PersistedVal, null, null);
                                        }
                                        else if (PersistNVD.iSetValue == 20) //cache value is not null but reset to persisted val if set value config is override
                                        {
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, PersistNVD.sParamName, PersistedVal, null, null);
                                        }
                                    }
                                }
                            }
                        }
                        var MandatoryDef = oNVs.Where(m => m.iRequired == 10).ToList();
                        if (MandatoryDef != null && MandatoryDef.Count() > 0)
                        {
                            foreach (var MPV in MandatoryDef)
                            {
                                var CacheObj = oCache.Get_Paramobject(sSessionID, sGUID, null, MPV.sParamName);
                                if (CacheObj == null)
                                {
                                    if (!MandatoryParams.Contains(MPV.sParamName))
                                    {
                                        MandatoryParams.Add(MPV.sParamName);
                                    }
                                }
                                else if (string.IsNullOrEmpty(CacheObj.sValue))
                                {
                                    if (MPV.iDefault == 10)
                                    {
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, MPV.sParamName, MPV.sDefaultValue, null, null);
                                    }
                                    else if (MPV.iDefault == 20)
                                    {
                                        if (!MandatoryParams.Contains(MPV.sParamName))
                                        {
                                            MandatoryParams.Add(MPV.sParamName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (MandatoryParams.Count() > 0)
                    {
                        var ManParams = string.Join(",", MandatoryParams);
                        oUser.Save_UserMessage("", "", "QSILoadError", xiEnumSystem.xiFuncResult.xiError, "Mandatory parameters " + ManParams + " not passed to load the Question instance:" + oQSInstance.XIGUID, sGUID);
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSSIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, QSIID);
            }

            watch.Stop();
            var iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oXID.Cache_Performance("Policy/ReLoadQs", iLapsedTime, Guid.Empty, 100);
            return oQSInstance;
        }
        public void setParam(string s1ClickIDs, string sGUID)
        {
            string sSessionID = HttpContext.Current.Session.SessionID;
            XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
            List<CNV> nParams = new List<CNV>();
            nParams = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
            if (!string.IsNullOrEmpty(s1ClickIDs))
            {
                var OneClickList = s1ClickIDs.Split(',');
                foreach (var oneclick in OneClickList)
                {

                    XID1Click o1ClickC = new XID1Click();
                    var o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "", oneclick);
                    o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                    XIDBO oBOD = new XIDBO();
                    oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO_All, null, o1ClickD.BOID.ToString());
                    o1ClickC.BOD = oBOD;
                    o1ClickC.sBOName = oBOD.Name;
                    XIDStructure oStructure = new XIDStructure();
                    var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, nParams);
                    o1ClickC.Query = oQuery;
                    if (!o1ClickC.Query.Contains("{XIP"))
                    {
                        var oOneClickI = o1ClickC.OneClick_Execute().FirstOrDefault();
                        if (oOneClickI.Value != null)
                        {
                            foreach (var attr in oOneClickI.Value.Attributes)
                            {
                                oCache.Set_ParamVal(sSessionID, sGUID, "", attr.Key, attr.Value.sValue, "", null);
                                oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|" + attr.Key + "}", attr.Value.sValue, "", null);
                                nParams.Add(new CNV { sName = attr.Key, sValue = attr.Value.sValue });
                                nParams.Add(new CNV { sName = "{XIP|" + attr.Key + "}", sValue = attr.Value.sValue });
                            }
                        }
                    }
                }
            }
        }

        public void PayWithGlobalPayments(XIInfraPayment oPaymentGateWay, string ID, decimal Amount)
        {
            CResult oResult = new CResult();
            try
            {
                var timestamp = DateTime.Now.AddHours(1).ToString("yyyyMMddHHmmss");
                var currency = "GBP";
                var orderid = ID;
                var amount = Convert.ToInt32(Amount * 100);
                var sha = SHA1HashStringForUTF8String(timestamp + "." + oPaymentGateWay.sMerchantID + "." + orderid + "." + amount + "." + currency);
                var sha1 = SHA1HashStringForUTF8String(sha + "." + oPaymentGateWay.sSecret);
                RemotePost myremotepost = new RemotePost();
                myremotepost.Url = oPaymentGateWay.ReturnUrl;
                myremotepost.Add("MERCHANT_ID", oPaymentGateWay.sMerchantID);
                myremotepost.Add("SECRET_ID", oPaymentGateWay.sSecret);
                myremotepost.Add("TIMESTAMP", timestamp);
                myremotepost.Add("ACCOUNT", oPaymentGateWay.sAccount);
                myremotepost.Add("ORDER_ID", orderid.ToString());
                myremotepost.Add("AMOUNT", amount.ToString());
                myremotepost.Add("CURRENCY", currency);
                myremotepost.Add("SHA1HASH", sha1);
                myremotepost.Add("AUTO_SETTLE_FLAG", "1");
                myremotepost.Add("MERCHANT_RESPONSE_URL", oPaymentGateWay.ResponseUrl);
                myremotepost.Post();
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [" + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
            }
        }
        public string SHA1HashStringForUTF8String(string input)
        {
            using (SHA1Managed sha1 = new SHA1Managed())
            {
                var hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(input));
                var sb = new StringBuilder(hash.Length * 2);

                foreach (byte b in hash)
                {
                    // can be "x2" if you want lowercase
                    sb.Append(b.ToString("x2"));
                }
                return sb.ToString();
            }
        }
        public class RemotePost
        {
            private System.Collections.Specialized.NameValueCollection Inputs = new System.Collections.Specialized.NameValueCollection();
            public string Url = "";
            public string Method = "post";
            public string FormName = "form1";
            public void Add(string name, string value)
            {
                Inputs.Add(name, value);
            }
            public void Post()
            {
                System.Web.HttpContext.Current.Response.Clear();
                System.Web.HttpContext.Current.Response.Write("<html><head>");
                System.Web.HttpContext.Current.Response.Write(string.Format("</head><body onload=\"document.{0}.submit()\">", FormName));
                System.Web.HttpContext.Current.Response.Write(string.Format("<form name=\"{0}\" method=\"{1}\" action=\"{2}\" >", FormName, Method, Url));
                for (int i = 0; i < Inputs.Keys.Count; i++)
                {
                    System.Web.HttpContext.Current.Response.Write(string.Format("<input name=\"{0}\" type=\"hidden\" value=\"{1}\">", Inputs.Keys[i], Inputs[Inputs.Keys[i]]));
                }
                System.Web.HttpContext.Current.Response.Write("</form>");
                System.Web.HttpContext.Current.Response.Write("</body></html>");
                System.Web.HttpContext.Current.Response.End();
            }
        }
        #region LexisNexis

        public CResult GetLexisNexisScoreResult(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            XIInstanceBase oXIIB = new XIInstanceBase();
            string sServerKey = sServerKey = GetValue("ServerEnvironment");
            IDUServicesDev oIDUDev = new IDUServicesDev();
            IDUServicesLive oIDULive = new IDUServicesLive();
            if (sServerKey.ToLower() == "dev")
            {
                oResult = oIDUDev.GetLexisNexisScoreResult(oParams);
            }
            if (sServerKey.ToLower() == "live")
            {
                oResult = oIDULive.GetLexisNexisScoreResult(oParams);
            }
            oXIIB.SaveErrortoDB(oResult);
            return oResult;
        }

        public string GetValue(string skey)
        {
            try
            {
                return ConfigurationManager.AppSettings[skey];
            }
            catch
            {
                return "";
            }
        }

        #endregion LexisNexis

        public string CreateXML(object oResponse)
        {
            XmlDocument xmlDoc = new XmlDocument();   //Represents an XML document, 
                                                      // Initializes a new instance of the XmlDocument class.          
            XmlSerializer xmlSerializer = new XmlSerializer(oResponse.GetType());
            // Creates a stream whose backing store is memory. 
            using (MemoryStream xmlStream = new MemoryStream())
            {
                xmlSerializer.Serialize(xmlStream, oResponse);
                xmlStream.Position = 0;
                //Loads the XML document from the specified string.
                xmlDoc.Load(xmlStream);
                //xmlDoc.Save("E:/text4.xml");
                return xmlDoc.InnerXml;
            }
        }

        public Object XMLToObject(string XMLString, Object oObject)
        {
            //HttpContext.Current.ApplicationInstance.Server.MapPath("~/App_Data/") + "cars.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load("E:/text.xml");
            string xmlcontents = doc.InnerXml;
            //XMLString = System.Web.Hosting.HostingEnvironment.MapPath("~")+ "text.xml";
            XmlSerializer oXmlSerializer = new XmlSerializer(oObject.GetType());
            oObject = oXmlSerializer.Deserialize(new StringReader(xmlcontents));
            return oObject;
        }

        public CResult CheckUserLoginCredentials(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;

                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "SuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iInstanceID))
                { }
                if (iInstanceID > 0)
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    oQSInstance.ID = iInstanceID;
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    string sUserName = oQSInstance.XIIValues("sUserName");
                    string sPassWord = oQSInstance.XIIValues("sPassword");
                    //List<CNV> oWhrParams = new List<CNV>();
                    //oWhrParams.Add(new CNV { sName = "sUserName", sValue = sUserName });
                    //XIIBO oBOI = new XIIBO();
                    //oBOI = oIXI.BOI("XIAPPUsers", null, null, oWhrParams);
                    //if (oBOI != null)
                    //{
                    oUserD.sUserName = sUserName;
                    oCResult.sMessage = "User Loading started";
                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                        //var Password = oBOI.Attributes["sPasswordHash"].sValue;
                        var DecryptedPwd = xifEncrypt.DecryptData(oUserD.sPasswordHash, true, oUserD.UserID.ToString());
                        if (sPassWord == DecryptedPwd)
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-iUserID", oUserD.UserID.ToString(), null, null);
                            //GetLexisNexisScoreResult(oParams);
                        }
                        else
                        {
                            Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                            dictmsg.Add("Error:UserName", "Invalid Username or Password");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            //NOTE : below line of code changed
                            //oCache.Set_ParamVal(sSessionID, sGUID, null, "StepMessage", "Invalid UserName or Password", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }

        public CResult ForgotPassword(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "SuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iInstanceID))
                { }
                if (iInstanceID > 0)
                {
                    XIInfraEmail oEmail = new XIInfraEmail();
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    string sUserName = oQSInstance.XIIValues("sEmail");
                    var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, oQSInstance.FKiQSDefinitionIDXIGUID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                    if (oQSDefinition != null)
                    {
                        oQSInstance.QSDefinition = oQSDefinition;
                    }
                    //string sPassWord = oQSInstance.XIIValues("sPassword");
                    oUserD.sUserName = sUserName;
                    oCResult.sMessage = "User Loading started";
                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                        //bool flag = false;
                        //if (DateTime.Now > oUserD.UpdatedTime.AddHours(24))
                        //{
                        //    flag = true;
                        //}
                        //if (flag)
                        //{
                        string sTemporaryPWD = RandomNumber(8)/*random.Next(1, 100000000).ToString(new String('0', 7))*/;
                        var EncryptedPwd = xifEncrypt.EncryptData(sTemporaryPWD, true, oUserD.UserID.ToString());
                        oUserD.sTemporaryPasswordHash = EncryptedPwd;
                        oUserD.UpdatedTime = DateTime.Now;
                        oUserD.dtLastLogin = DateTime.Now;
                        var oUserData = oUserD.Update_User(sDataBase);
                        XIContentEditors oDocumentContent = new XIContentEditors();
                        XIDXI oXIDXI = new XIDXI();
                        var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, "38");
                        if (oContentDef != null && oContentDef.Count() > 0)
                        {
                            XIIBO oBOI = new XIIBO();
                            string sBOName = "XIAPPUsers";
                            if (sBOName != null)
                            {
                                oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName, null);
                            }
                            XIBOInstance oBOIInstance = new XIBOInstance();
                            oBOIInstance.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                            oBOI.SetAttribute("stemppassword", sTemporaryPWD);
                            oBOI.SetAttribute("sname", oQSInstance.XIIValues("sFirstName") + " " + oQSInstance.XIIValues("sLastName"));
                            List<XIIBO> oBOIList = new List<XIIBO>();
                            //oBOI.Attributes = oBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => x.Value);
                            oBOI.XIIValues = oBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => new XIIValue { sValue = x.Value.sValue });
                            oBOIList.Add(oBOI);
                            oBOIInstance.oStructureInstance["User"] = oBOIList;
                            oDocumentContent = oContentDef.FirstOrDefault();
                            //Get Document Template htmlcontent with dynamic data
                            XIContentEditors oConent = new XIContentEditors();
                            oCResult.sMessage = "Template Merging Started";
                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                            oConent.sSessionID = "";
                            //var oRes = oConent.MergeTemplateContent(oDocumentContent, oBOIInstance);
                            var oRes = oConent.MergeContentTemplate(oDocumentContent, oBOIInstance);
                            if (!oRes.bOK)
                            {
                                return null;
                            }
                            oCResult.sMessage = "Template Merged Sucessfully";
                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                            string sContent = (string)oRes.oResult;
                            oEmail.EmailID = sUserName;
                            oEmail.sSubject = oDocumentContent.sSubject;
                            oEmail.Bcc = oDocumentContent.sBCC;
                            oEmail.cc = oDocumentContent.sCC;
                            oEmail.From = oDocumentContent.sFrom;
                            oEmail.iServerID = oDocumentContent.FkiServerID;
                            oEmail.Sendmail(oQSInstance.QSDefinition.FKiOrgID, sContent, null, 0, XIConstant.Email_ForgotPassword, 0, null, 0, oDocumentContent.bIsBCCOnly);//send mail with attachment
                            oCResult.sMessage = "Mail send successfully";
                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                            oCResult.oTraceStack.Add(new CNV { sName = "Mail send successfully", sValue = "Mail send successfully" });
                            //oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult CheckTempPassword(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "SuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserRole = oParams.Where(m => m.sName.ToLower() == "srolename").Select(m => m.sValue).FirstOrDefault();
                string sAdminSuccessStep = oParams.Where(m => m.sName.ToLower() == "AdminSuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();


                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iInstanceID))
                { }
                if (iInstanceID > 0)
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    string sUserName = oQSInstance.XIIValues("sEmail");
                    string sPassWord = oQSInstance.XIIValues("sOTP");
                    string IsWithoutOTP = oQSInstance.XIIValues("bIsWithoutOTP");
                    //List<CNV> oWhrParams = new List<CNV>();
                    //oWhrParams.Add(new CNV { sName = "sUserName", sValue = sUserName });
                    //XIIBO oBOI = new XIIBO();
                    //oBOI = oIXI.BOI("XIAPPUsers", null, null, oWhrParams);
                    oUserD.sUserName = sUserName;
                    oCResult.sMessage = "User Loading started";
                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                        //var Password = oBOI.Attributes["sPasswordHash"].sValue;
                        var DecryptedPwd = xifEncrypt.DecryptData(oUserD.sTemporaryPasswordHash, true, oUserD.UserID.ToString());
                        if (sPassWord == DecryptedPwd && (sUserRole.ToLower() == xiEnumSystem.EnumRoles.WebUsers.ToString().ToLower() || string.IsNullOrEmpty(sUserRole.ToLower())))
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-iUserID", oUserD.UserID.ToString(), null, null);
                        }
                        else if (!string.IsNullOrEmpty(IsWithoutOTP) && (IsWithoutOTP.ToLower() == "on" || IsWithoutOTP.ToLower() == "true"))
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sAdminSuccessStep, null, null);
                        }
                        else if (sPassWord == DecryptedPwd && (sUserRole.ToLower() != xiEnumSystem.EnumRoles.WebUsers.ToString().ToLower()))
                        {
                            if (!string.IsNullOrEmpty(sUserRole))
                            {
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sAdminSuccessStep, null, null);
                            }
                        }
                        else
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            //oCache.Set_ParamVal(sSessionID, sGUID, null, "StepMessage", "Invalid Temporary Password", null, null);

                            Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                            dictmsg.Add("Error:TempPwd", "Invalid Temporary Password");
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult ResetPassword(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;

                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iInstanceID))
                { }
                if (iInstanceID > 0)
                {
                    XIInfraEmail oEmail = new XIInfraEmail();
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    string sUserName = oQSInstance.XIIValues("sEmail");
                    string sPassWord = oQSInstance.XIIValues("sNewPassword");
                    oUserD.sUserName = sUserName;
                    oCResult.sMessage = "User Loading started";
                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                        var EncryptedPwd = xifEncrypt.EncryptData(sPassWord, true, oUserD.UserID.ToString());
                        oUserD.sPasswordHash = EncryptedPwd;
                        var oUserData = oUserD.Update_User(sDataBase);
                        //oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "Login", null, null);
                        oCResult.oResult = oUserD;
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }

        public CResult CheckUserLoginStatus(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iUserID = 0;
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "SuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserRole = oParams.Where(m => m.sName.ToLower() == "srolename").Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                if (int.TryParse(sUserID, out iUserID))
                {
                    iUserID = Convert.ToInt32(sUserID);
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    string sUserName = oQSInstance.XIIValues("sEmail");
                    oUserD.sUserName = sUserName;
                    oCResult.sMessage = "User Loading started";
                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                        // if(oUserD.UserID == iUserID || sUserRole.ToLower() == "admin" )
                        if (oUserD.UserID == iUserID)
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                        }
                        else
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;

        }
        public CResult CheckUserExist(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                XIInfraUsers oUser = new XIInfraUsers();
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iUserID = 0;
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserRole = oParams.Where(m => m.sName.ToLower() == "srolename").Select(m => m.sValue).FirstOrDefault();
                //string sUserRole = string.Empty;
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "SuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sAdminSuccessStep = oParams.Where(m => m.sName.ToLower() == "AdminSuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sAdminNextStep = oParams.Where(m => m.sName.ToLower() == "AdminNextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sSuccessStep = "Login";
                //string sFailureStep = "Registration";
                //string sAdminSuccessStep = "Forgot Password";
                // string sAdminNextStep = "Your Quotes";
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                if (int.TryParse(sUserID, out iUserID))
                {
                }
                if (iInstanceID > 0)
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    string sUserName = oQSInstance.XIIValues("sEmail");
                    oUserD.sUserName = sUserName;
                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - User Loading started";
                    oXID.SaveErrortoDB(oCResult, iInstanceID);
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                        if (oUserD.UserID != iUserID && (sUserRole.ToLower() == xiEnumSystem.EnumRoles.WebUsers.ToString().ToLower() || string.IsNullOrEmpty(sUserRole)))
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                        }
                        else if (sUserRole.ToLower() != xiEnumSystem.EnumRoles.WebUsers.ToString().ToLower())
                        {
                            if (!string.IsNullOrEmpty(sUserRole.ToLower()))
                            {
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sAdminNextStep, null, null);
                            }
                        }
                        //if (oUserD.UserID != iUserID && sUserRole.ToLower() != "admin")
                        //{
                        //    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                        //}
                        //else if (sUserRole.ToLower() == "admin")
                        //{
                        //    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sAdminNextStep, null, null);
                        //}
                    }
                    else if (sUserRole.ToLower() == xiEnumSystem.EnumRoles.WebUsers.ToString().ToLower() || string.IsNullOrEmpty(sUserRole))
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                    }
                    else
                    {
                        InsertUser(oParams);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sAdminSuccessStep, null, null);
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult UpdateUserAndCustomer(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            int iInstanceID = 0;
            try
            {
                oTrace.oTrace.Add(oCR.oTrace);
                XIInfraUsers oUser = new XIInfraUsers();
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iUserID = 0;
                string sUserID = oParams.Where(m => m.sName.ToLower() == "PolicyUser".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPolicyID = oParams.Where(m => m.sName.ToLower() == "iPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserRole = oParams.Where(m => m.sName.ToLower() == "srolename").Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                int iPolicyID = 0;
                if (int.TryParse(sPolicyID, out iPolicyID))
                {
                    XIIXI oXII = new XIIXI();
                    var oPolicyI = oXII.BOI("ACPolicy_T", iPolicyID.ToString());
                    if (oPolicyI != null && oPolicyI.Attributes.ContainsKey("FKiUserID"))
                    {
                        if (int.TryParse(oPolicyI.Attributes["FKiUserID"].sValue, out iUserID))
                        {
                            if (iInstanceID > 0 && iUserID > 0)
                            {
                                XIInfraUsers oUserD = new XIInfraUsers();
                                XIInfraCache oCache = new XIInfraCache();
                                XIIXI oIXI = new XIIXI();
                                XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                                //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                                //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                                string sUserName = oQSInstance.XIIValues("sEmail");
                                string sMob = oQSInstance.XIIValues("sMob");
                                oUserD.UserID = iUserID;
                                oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - User Loading started";
                                oXID.SaveErrortoDB(oCResult, iInstanceID);
                                var UserDetails = oUserD.Get_UserDetails(sDataBase);
                                if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                                {
                                    oUserD = (XIInfraUsers)UserDetails.oResult;
                                    if (oUserD.UserID > 0)
                                    {
                                        oUserD.sEmail = sUserName;
                                        oUserD.sUserName = sUserName;
                                        oUserD.sPhoneNumber = sMob;
                                        var oUserResult = oUserD.Update_User(sDataBase);
                                        if (oUserResult.xiStatus == 0 && oUserResult.oResult != null)
                                        {
                                            List<CNV> oNV = new List<CNV>();
                                            oNV.Add(new CNV { sName = "FKiUserID", sValue = iUserID.ToString() });
                                            var oCustomerI = oIXI.BOI("Customer_T", "", "", oNV);
                                            if (oCustomerI != null)
                                            {
                                                if (oCustomerI.Attributes.ContainsKey("sEmail"))
                                                {
                                                    oCustomerI.Attributes["sEmail"].sValue = sUserName;
                                                    oCustomerI.Attributes["sEmail"].bDirty = true;
                                                }
                                                if (oCustomerI.Attributes.ContainsKey("sMob"))
                                                {
                                                    oCustomerI.Attributes["sMob"].sValue = sMob;
                                                    oCustomerI.Attributes["sMob"].bDirty = true;
                                                }
                                                oCustomerI.Attributes["id"].bDirty = true;
                                                var oCustomerResult = oCustomerI.Save(oCustomerI, false);
                                                if (oCustomerResult.xiStatus == 0 && oCustomerResult.oResult != null)
                                                {
                                                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                                                }
                                                else
                                                {
                                                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {

                                }
                            }
                            else
                            {
                                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                                oTrace.sMessage = "Mandatory Attributes: QSInstanceID or UserID is missing";
                            }
                        }
                        else
                        {
                            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                            oTrace.sMessage = "Atttribute Data: FKiUserID attribute data is not convertable";
                        }
                    }
                    else
                    {
                        oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                        oTrace.sMessage = "BO Data: Policy is null or FKiUserID not containts in attributes list";
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                    oTrace.sMessage = "Mandatory Attributes: PolicyID attribute is missing";
                }

            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating User and customer data" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult UserRegistration(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iInstanceID = 0;
            try
            {
                XIInfraUsers oUser = new XIInfraUsers();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sNextStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                if (iInstanceID > 0)
                {
                    XIInfraCache oCache = new XIInfraCache();
                    var oResult = InsertUser(oParams);
                    var oUserI = (XIInfraUsers)(oResult.oResult);
                    oXID.SaveErrortoDB(oResult, iInstanceID);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "-iUserID", oUserI.UserID.ToString(), null, null);
                    if (oResult.xiStatus == 0 && oResult.oResult != null)
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sNextStep, null, null);
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult GenerateCSVFile(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            XIInstanceBase oXIIB = new XIInstanceBase();
            XIIXI oIXI = new XIIXI();
            XIContentEditors oXIContent = new XIContentEditors();
            XIInfraCache oCache = new XIInfraCache();
            bool isSuccess = false;
            int iPolicyID = 0;
            try
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Generate CSV", sValue = "GenerateCSV method Started" });
                string sBOName = string.Empty, sStructure = string.Empty, sTemplateName = string.Empty; string iProductID = string.Empty;
                if (oParams != null && oParams.Count() > 0)
                {
                    string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    var oXiLink = (XILink)oCache.GetObjectFromCache(XIConstant.CacheXILink, "Policy CSV Parameters", "");
                    string sInstanceID = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "iInstanceID".ToLower()).Select(m => m.Value).FirstOrDefault();
                    sInstanceID = oCache.Get_ParamVal(sSessionID, sGUID, "", sInstanceID);
                    int.TryParse(sInstanceID, out iPolicyID);
                    sBOName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sBOName".ToLower()).Select(m => m.Value).FirstOrDefault();
                    sTemplateName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sTemplate".ToLower()).Select(m => m.Value).FirstOrDefault();
                    sStructure = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sStructure".ToLower()).Select(m => m.Value).FirstOrDefault();
                }
                oCResult.sMessage = sBOName + ", " + iPolicyID + ", " + sTemplateName + ", " + sStructure;
                oXIIB.SaveErrortoDB(oCResult, 0, iPolicyID);
                if (iPolicyID > 0 && !string.IsNullOrEmpty(sBOName) && !string.IsNullOrEmpty(sStructure) && !string.IsNullOrEmpty(sTemplateName))
                {
                    XIContentEditors oContentDef = new XIContentEditors();
                    List<XIContentEditors> oContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sTemplateName, "0");
                    if (oContent != null && oContent.Count() > 0)
                    {
                        oContentDef = oContent.FirstOrDefault();
                    }
                    var oLIst = oIXI.BOI(sBOName, iPolicyID.ToString()).Structure(sStructure).XILoad();
                    if (oContentDef != null && oLIst != null && oLIst.oStructureInstance != null)
                    {
                        XIContentEditors oDocumentContent = oContentDef;
                        oXIContent.sSessionID = "";
                        //var sStructureresult = oXIContent.MergeTemplateContent(oDocumentContent, oLIst);
                        var sStructureresult = oXIContent.MergeContentTemplate(oDocumentContent, oLIst);
                        if (sStructureresult.bOK && sStructureresult.oResult != null)
                        {
                            string sContent = (string)sStructureresult.oResult;
                            XIIBO oBOI = new XIIBO();
                            XIDXI oXID = new XIDXI();
                            XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "EDI_Transaction"); //oXID.Get_BODefinition("EDI_Transaction").oResult;
                            oBOI.BOD = oBOD;
                            oBOI.Attributes["ID"] = new XIIAttribute { sName = "ID", sValue = null, bDirty = true };
                            oBOI.Attributes["sMergedText"] = new XIIAttribute { sName = "sMergedText", sValue = sContent.Replace("'", "''"), bDirty = true };
                            oBOI.Attributes["FkiBOID"] = new XIIAttribute { sName = "FkiBOID", sValue = oLIst.BOI.BOD.BOID.ToString(), bDirty = true };
                            oBOI.Attributes["FkiTemplateID"] = new XIIAttribute { sName = "FkiTemplateID", sValue = oDocumentContent.ID.ToString(), bDirty = true };
                            oBOI.Attributes["iStatus"] = new XIIAttribute { sName = "iStatus", sValue = "0", bDirty = true };
                            oBOI.Attributes["iInstanceID"] = new XIIAttribute { sName = "iInstanceID", sValue = iPolicyID.ToString(), bDirty = true };
                            oBOI.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = oDocumentContent.Category.ToString(), bDirty = true };
                            oBOI.Attributes["FKiProductID"] = new XIIAttribute { sName = "FKiProductID", sValue = iProductID, bDirty = true };
                            if (!string.IsNullOrEmpty(oDocumentContent.sTemplateHeader))
                            {
                                oBOI.Attributes["sMergedTextHeader"] = new XIIAttribute { sName = "sMergedTextHeader", sValue = oDocumentContent.sTemplateHeader, bDirty = true };
                            }
                            var response = oBOI.Save(oBOI);
                            isSuccess = true;
                            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            oCResult.oTraceStack.Add(new CNV { sName = "GenarateCSV", sValue = "Success:CSV Generated Successfully" });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.oTraceStack.Add(new CNV { sName = "GenarateCSV", sValue = "Error: Generate CSV Method" + oCResult.sMessage });
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oResult = "Error";
                oXIIB.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }

        public CResult InsertAddonToQs(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            List<string> Info = new List<string>();
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            Guid iQSInstanceID = Guid.Empty;
            Guid iACPolicyID = Guid.Empty;
            float AddonPriceTotal = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var oCacheI = oCache.Get_XICache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var oCacheAddonI = oCacheI.NInstance("XISession").NInstance("SS_" + sSessionID).NInstance("UID_" + sUID).NMyInstance.Where(m => m.Key.Contains("Addon_")).Select(m => m.Value.sValue).ToList();
                // var oCach = oCacheI.NInstance("XISession").NInstance("SS_" + sSessionID).NInstance("UID_" + sUID).NInstance(sParamName).sValue;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iPolicyID = oParams.Where(m => m.sName.ToLower() == "iPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string XIDeleted = oParams.Where(m => m.sName.ToLower() == XIConstant.Key_XIDeleted.ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                XIIQS oQSInstance = new XIIQS();
                string dPolicyStart = oCache.Get_ParamVal(sSessionID, sUID, null, "{XIP|dCoverStart}");//oQSInstance.XIIValues("MTEffctiveFrom");
                dPolicyStart = oCache.Get_ParamVal(sSessionID, sUID, null, "{XIP|MTEffctiveFrom}");
                QueryEngine oQE = new QueryEngine();
                ExecutionEngine oEE = new ExecutionEngine();
                List<XIWhereParams> oAddonParams = new List<XIWhereParams>();
                List<SqlParameter> SqlParams = new List<SqlParameter>();
                var iParentIDXIGUID = oCache.Get_ParamVal(sSessionID, sUID, null, "{XIP|iParentQSInstanceID}");
                if (Guid.TryParse(iParentIDXIGUID, out iQSInstanceID))
                {
                    oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                    oAddonParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = iQSInstanceID.ToString() });
                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = iQSInstanceID.ToString() });
                }
                else if (Guid.TryParse(iID, out iQSInstanceID))
                {
                    oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                    oAddonParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = iQSInstanceID.ToString() });
                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = iQSInstanceID.ToString() });
                }
                else
                {
                    oQSInstance = oIXI.GetQSXIValuesByQSIID(iID.ToString());
                    oAddonParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iID });
                    SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iID });
                }
                if (Guid.TryParse(iPolicyID, out iACPolicyID))
                { };

                oAddonParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                SqlParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                oQE.AddBO("ACPurchase_T", "", oAddonParams);
                CResult oAddonresult = oQE.BuildQuery();
                if (oAddonresult.bOK && oAddonresult.oResult != null)
                {
                    var sSql1 = (string)oAddonresult.oResult;
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql1;
                    oEE.SqlParams = SqlParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                        oBOIList1.ForEach(x => x.BOD = oBOD1);
                        if (oBOIList1 != null && oBOIList1.Count > 0)
                        {
                            foreach (var oAddon in oBOIList1)
                            {
                                XIIXI oXII = new XIIXI();
                                var oProductAddonBOI = oXII.BOI("ProductAddon_T", oAddon.Attributes["FKiProductAddonID"].sValue);
                                if (oProductAddonBOI != null && oProductAddonBOI.Attributes.ContainsKey("FKiProductID"))
                                {
                                    if (oProductAddonBOI.Attributes["FkiProductID"].sValue != iProductID)
                                    {
                                        XIIBO oBO = new XIIBO();
                                        oBO.Delete(oAddon);
                                    }
                                }
                            }
                        }
                    }
                }
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> oSqlParams = new List<SqlParameter>();
                if (iQSInstanceID != Guid.Empty)
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = iQSInstanceID.ToString() });
                    oSqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = iQSInstanceID.ToString() });
                }
                else
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iID });
                    oSqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iID });
                }
                oSqlParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                XIIBO oBOI = new XIIBO();

                List<CNV> nParams = new List<CNV>();
                nParams.Add(new CNV { sName = "{XIP|dCoverStart}", sValue = dPolicyStart });
                nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = iProductID });
                //nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                var ProductAddonQuery = "AdminAddons List";
                var QSType = oCache.Get_ParamVal(sSessionID, sUID, null, "sQSType");
                if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() != "internal")
                {
                    ProductAddonQuery = "PublicAddons List";
                }
                //Getting scripts with version
                var oProductAddons = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, ProductAddonQuery);
                var oProductAddonsC = (XID1Click)oProductAddons.Clone(oProductAddons);
                oProductAddonsC.Name = "ProductAddon_T";
                XIDStructure oStructure = new XIDStructure();
                oProductAddonsC.Query = oStructure.ReplaceExpressionWithCacheValue(oProductAddonsC.Query, nParams);
                var oProductAddonsI = oProductAddonsC.OneClick_Execute(null, oProductAddonsC);

                // oBOI = oXII.BOI("Term_T", null, "", oWhrParams);
                oQE.AddBO("ACPurchase_T", "Create", oWParams);
                CResult oCresult1 = oQE.BuildQuery();
                if (oCresult1.bOK && oCresult1.oResult != null)
                {
                    var sSql1 = (string)oCresult1.oResult;
                    oEE.SqlParams = oSqlParams;
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql1;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                        oBOIList1.ForEach(x => x.BOD = oBOD1);
                        if (oBOIList1 != null && oBOIList1.Count > 0)
                        {
                            AddonPriceTotal = 0;
                            foreach (var oBOII in oBOIList1)
                            {
                                if (oCacheAddonI.Contains(oBOII.Attributes["fkiproductaddonid"].sValue) && oProductAddonsI.Values.Any(m => m.Attributes["id"].sValue == oBOII.Attributes["fkiproductaddonid"].sValue))
                                {
                                    var AddonPrice = oBOII.Attributes["rAdmin"].sValue;
                                    float rAddon = 0;
                                    if (float.TryParse(AddonPrice, out rAddon))
                                    {
                                        AddonPriceTotal += rAddon;
                                    }
                                    oBOII.Attributes["istatus"].sValue = oBOII.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Pre-purchase").Select(m => m.sValues).FirstOrDefault();
                                }
                                else
                                {
                                    oBOII.Attributes["istatus"].sValue = oBOII.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Cancelled").Select(m => m.sValues).FirstOrDefault();
                                }
                                oBOII.Attributes["istatus"].bDirty = true;
                                oBOII.Attributes[oBOII.BOD.sPrimaryKey].bDirty = true;
                                var oResult = oBOI.Save(oBOII);
                            }
                        }
                        else
                        {
                            var AddonIDs = new List<string>();
                            if (!string.IsNullOrEmpty(iPolicyID))
                            {
                                var oPolicy = oIXI.BOI("ACPolicy_T", iPolicyID, "sAddonID");
                                AddonIDs = oPolicy.AttributeI("sAddonID").sValue.Split(new string[] { "|||" }, StringSplitOptions.RemoveEmptyEntries).ToList();
                            }
                            List<XIWhereParams> oWParams1 = new List<XIWhereParams>();
                            List<SqlParameter> oSQLParams1 = new List<SqlParameter>();
                            XIWhereParams oWP = new XIWhereParams();
                            oWP.sField = "FKiProductID";
                            oWP.sOperator = "=";
                            oWP.sValue = iProductID;
                            oWParams1.Add(oWP);
                            oSQLParams1.Add(new SqlParameter { ParameterName = "@FKiProductID", Value = iProductID });
                            oWParams1.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                            oSQLParams1.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                            oQE = new QueryEngine();
                            //load requirement template definition of productid and FKiTransactionTypeID
                            oQE.AddBO("ProductAddon_T", "Create", oWParams1);
                            CResult oCresult = oQE.BuildQuery();
                            //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                            if (oCresult.bOK && oCresult.oResult != null)
                            {
                                var sSql = (string)oCresult.oResult;
                                //ExecutionEngine oEE = new ExecutionEngine();
                                oEE.XIDataSource = oQE.XIDataSource;
                                oEE.sSQL = sSql;
                                oEE.SqlParams = oSQLParams1;
                                var oQResult1 = oEE.Execute();
                                if (oQResult1.bOK && oQResult1.oResult != null)
                                {
                                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                                    var oBOIList = ((Dictionary<string, XIIBO>)oQResult1.oResult).Values.ToList();
                                    var oACPurchaseBOI = new XIIBO();
                                    XIDBO oACPurchaseBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "ACPurchase_T", null);
                                    XIDBO oProductAddonBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "ProductAddon_T", null);
                                    oACPurchaseBOI.BOD = oACPurchaseBOD;
                                    oACPurchaseBOI.LoadBOI("create");
                                    oBOIList.ForEach(x => x.BOD = oProductAddonBOD);
                                    foreach (var oProductAddon in oBOIList)
                                    {
                                        if (AddonIDs.Count == 0 || !AddonIDs.Contains(oProductAddon.Attributes["refaddon"].sValue))
                                        {
                                            string sSupplierID = string.Empty;
                                            if (oProductAddon.Attributes.ContainsKey("refaddon"))
                                            {
                                                var oRefAddonI = oIXI.BOI("refAddon_T", oProductAddon.Attributes["refaddon"].sValue);
                                                if (oRefAddonI != null && oRefAddonI.Attributes.ContainsKey("fkisupplierid"))
                                                {
                                                    sSupplierID = oRefAddonI.Attributes["fkisupplierid"].sValue;
                                                }
                                            }
                                            else
                                            {
                                                Info.Add("refaddon column missed in ProductAddon_T table");
                                            }
                                            if (oProductAddon.Attributes.ContainsKey("saddonname"))
                                            {
                                                oACPurchaseBOI.Attributes["sname"].sValue = oProductAddon.Attributes["saddonname"].sValue;
                                            }
                                            else if (oProductAddon.Attributes.ContainsKey("sdisplayName"))
                                            {
                                                oACPurchaseBOI.Attributes["sname"].sValue = oProductAddon.Attributes["sdisplayName"].sValue;
                                            }
                                            else
                                            {
                                                oACPurchaseBOI.Attributes["sname"].sValue = oProductAddon.Attributes["sname"].sValue;
                                            }
                                            if (oProductAddon.Attributes.ContainsKey(oProductAddon.BOD.sPrimaryKey))
                                            {
                                                oACPurchaseBOI.Attributes["fkiproductaddonid"].sValue = oProductAddon.Attributes[oProductAddon.BOD.sPrimaryKey].sValue;
                                            }
                                            else
                                            {
                                                Info.Add("fkiproductaddonid column missed in ProductAddon_T table");
                                            }
                                            if (oProductAddon.Attributes.ContainsKey("rinsurercharge"))
                                            {
                                                oACPurchaseBOI.Attributes["rcost"].sValue = oProductAddon.Attributes["itaxtype"].iValue == 0 ?
                                                    (oProductAddon.Attributes["rinsurercharge"].doValue + (oProductAddon.Attributes["rinsurercharge"].doValue * oProductAddon.Attributes["ript"].iValue) / 100).ToString() : oProductAddon.Attributes["rinsurercharge"].sValue;
                                                oACPurchaseBOI.Attributes["rpremiumoverride"].sValue = oACPurchaseBOI.Attributes["rcost"].sValue;
                                            }
                                            else
                                            {
                                                Info.Add("rinsurercharge column missed in ProductAddon_T table");
                                            }

                                            if (oProductAddon.Attributes.ContainsKey("zdefaultadmin"))
                                            {
                                                oACPurchaseBOI.Attributes["radmin"].sValue = (oProductAddon.Attributes["rpriceaddon"].doValue - oACPurchaseBOI.Attributes["rcost"].doValue).ToString();
                                                oACPurchaseBOI.Attributes["rpremiumoverride"].sValue = (oProductAddon.Attributes["rpriceaddon"].doValue - oACPurchaseBOI.Attributes["rcost"].doValue).ToString();
                                            }
                                            else
                                            {
                                                Info.Add("zdefaultadmin column missed in ProductAddon_T table");
                                            }
                                            oACPurchaseBOI.Attributes["raddontotal"].sValue = (Convert.ToDecimal(oACPurchaseBOI.Attributes["iquantity"].sValue) * Convert.ToDecimal(oACPurchaseBOI.Attributes["radmin"].sValue)).ToString();
                                            if (oCacheAddonI.Contains(oProductAddon.Attributes[oProductAddonBOD.sPrimaryKey].sValue))
                                            {
                                                if (oProductAddon.Attributes.ContainsKey("rAdmin"))
                                                {
                                                    var AddonPrice = oProductAddon.Attributes["rAdmin"].sValue;
                                                    float rAddon = 0;
                                                    if (float.TryParse(AddonPrice, out rAddon))
                                                    {
                                                        AddonPriceTotal += rAddon;
                                                    }
                                                }
                                                else
                                                {
                                                    Info.Add("rAdmin column missed in ProductAddon_T table");
                                                }
                                                oACPurchaseBOI.Attributes["istatus"].sValue = oACPurchaseBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Pre-purchase").Select(m => m.sValues).FirstOrDefault();
                                            }
                                            else
                                            {
                                                oACPurchaseBOI.Attributes["istatus"].sValue = oACPurchaseBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Cancelled").Select(m => m.sValues).FirstOrDefault();
                                            }
                                            if (oProductAddon.Attributes.ContainsKey("refaddon"))
                                            {
                                                oACPurchaseBOI.Attributes["refaddon"].sValue = oProductAddon.Attributes["refaddon"].sValue;
                                            }
                                            else
                                            {
                                                Info.Add("refaddon column missed in ProductAddon_T table");
                                            }
                                            if (oACPurchaseBOI.Attributes.ContainsKey("fkisupplierid"))
                                            {
                                                oACPurchaseBOI.Attributes["fkisupplierid"].sValue = sSupplierID;
                                            }
                                            else
                                            {
                                                Info.Add("fkisupplierid column missed in ProductAddon_T table");
                                            }
                                            if (oACPurchaseBOI.Attributes.ContainsKey("bisconverted"))
                                            {
                                                oACPurchaseBOI.Attributes["bisconverted"].sValue = "false";
                                            }
                                            else
                                            {
                                                Info.Add("bisconverted column missed in ProductAddon_T table");
                                            }
                                            if (XIDeleted == "1" && oACPurchaseBOI.Attributes["istatus"].sValue == "10")
                                            {
                                                oACPurchaseBOI.Attributes["bisaddonqs"].sValue = "1";
                                            }
                                            oACPurchaseBOI.Attributes["fkiqsinstanceidxiguid"].sValue = iQSInstanceID.ToString();
                                            oACPurchaseBOI.Attributes["saddonno"].sValue = "";
                                            oACPurchaseBOI.Attributes[oACPurchaseBOD.sPrimaryKey].sValue = null;
                                            oACPurchaseBOI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                                            var oResult = oBOI.Save(oACPurchaseBOI);
                                        }
                                    }
                                }
                            }
                        }
                        string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                        if (!string.IsNullOrEmpty(sInfo))
                        {
                            oCResult.sMessage = "INFO: " + string.Join(",\r\n ", Info);
                            oCResult.LogToFile();
                        }
                        XIIXI oXII = new XIIXI();
                        List<CNV> oWhrParams = new List<CNV>();
                        oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = iQSInstanceID.ToString() });

                        var AggrID = oCache.Get_ParamVal(sSessionID, sUID, null, "{XIP|iParentInstanceID}");
                        //var AggrID = oCache.Get_ParamVal(sSessionID, sUID, null, "{XIP|iInstanceID}");
                        oWhrParams.Add(new CNV { sName = "FKiProductVersionID", sValue = iProductID.ToString() });
                        oWhrParams.Add(new CNV { sName = "ID", sValue = AggrID });
                        oWhrParams.Add(new CNV { sName = "iType", sValue = "10" });
                        oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                        var oQuoteI = oXII.BOI("Aggregations", "", "", oWhrParams);
                        if (oQuoteI != null)
                        {
                            //oQuoteI.Attributes["rAddonPrice"].sValue = AddonPriceTotal.ToString();
                            //oQuoteI.Attributes["rAddonPrice"].bDirty = true;
                            //oQuoteI.Attributes["rFinalQuote"].sValue = (AddonPriceTotal + float.Parse(oQuoteI.Attributes["rTotalAdmin"].sValue, CultureInfo.InvariantCulture.NumberFormat)).ToString();
                            //oQuoteI.Attributes["rFinalQuote"].bDirty = true;
                            //var oUpdateAddonPrice = oBOI.Save(oQuoteI);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iACPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                //oXID.SaveErrortoDB(oCResult, iQSInstanceID, iACPolicyID);
            }
            return oCResult;
        }

        public CResult InsertAddonsToPolicy(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            oCResult.oTraceStack.Add(new CNV { sName = "Addons", sValue = "Insert Addons method Started" });
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            var iAuditID = 0;
            int iQSInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Addons adding in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Addons adding in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();//HttpContext.Current.Session.SessionID;
                string iInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                var sTransType = oCache.Get_ParamVal(sSessionID, sGUID, null, "-transtype");
                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                if (int.TryParse(iInstanceID, out iQSInstanceID))
                { }
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                var sClientReference = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|sClientReference}");
                XIIXI oXII = new XIIXI();
                var oPolicyI = oXII.BOI("ACPolicy_T", iACPolicyID, "Create");
                var QuoteI = oXII.BOI("Aggregations", oPolicyI.AttributeI("FKiQuoteID").sValue);
                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                XIWhereParams oWP = new XIWhereParams();
                List<SqlParameter> oSQLParams = new List<SqlParameter>();
                oWP.sField = "FKiQSInstanceIDXIGUID";
                oWP.sOperator = "=";
                oWP.sValue = QuoteI.AttributeI("FKiQSInstanceIDXIGUID").sValue;
                oWParams.Add(oWP);
                oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = QuoteI.AttributeI("FKiQSInstanceIDXIGUID").sValue });
                oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                //load requirement template definition of productid and FKiTransactionTypeID
                oQE.AddBO("ACPurchase_T", "Create", oWParams);
                CResult oCresult = oQE.BuildQuery();
                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                if (oCresult.bOK && oCresult.oResult != null)
                {
                    var sSql = (string)oCresult.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql;
                    oEE.SqlParams = oSQLParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD = oQE.QParams.FirstOrDefault().BOD;
                        oBOIList.ForEach(x => x.BOD = oBOD);
                        foreach (var instance in oBOIList)
                        {
                            string AddonStatus = instance.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Cancelled").Select(m => m.sValues).FirstOrDefault(); ;
                            XIIBO oBO = new XIIBO();
                            string sAddonName = string.Empty;
                            var Status = instance.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Pre-purchase").Select(m => m.sValues).FirstOrDefault();
                            if (instance.Attributes.ContainsKey("iStatus") && instance.Attributes["istatus"].sValue == Status)
                            {
                                string sSequenceNum = string.Empty;
                                var orefAddonI = oXII.BOI("refAddon_T", instance.Attributes["refaddon"].sValue);
                                long iSequence = 0;
                                var Sequence = "";
                                if (orefAddonI.Attributes.ContainsKey("sName"))
                                {
                                    sAddonName = orefAddonI.Attributes["sName"].sValue;
                                }
                                if (orefAddonI.Attributes.ContainsKey("sSequence"))
                                {
                                    Sequence = orefAddonI.Attributes["sSequence"].sValue;
                                }
                                var EndSeqence = "";
                                if (orefAddonI.Attributes.ContainsKey("sEndSeqence"))
                                {
                                    EndSeqence = orefAddonI.Attributes["sEndSeqence"].sValue;
                                }
                                long iEndSeqence = 0;
                                if (long.TryParse(Sequence, out iSequence))
                                {
                                    if (long.TryParse(EndSeqence, out iEndSeqence))
                                    {
                                        if (iSequence <= iEndSeqence)
                                        {
                                            string sSeqPrefix = "";
                                            if (orefAddonI.Attributes.ContainsKey("sSeqPrefix"))
                                            {
                                                sSeqPrefix = orefAddonI.Attributes["sSeqPrefix"].sValue;
                                            }
                                            // Adding sSeqPrefix with iSequence
                                            sSequenceNum = sSeqPrefix + (Sequence);
                                            iSequence = iSequence + 1;
                                            var NextSeqStart = "";
                                            if (orefAddonI.Attributes.ContainsKey("sNextSeqStart"))
                                            {
                                                NextSeqStart = orefAddonI.Attributes["sNextSeqStart"].sValue;
                                            }
                                            var NextSeqEnd = "";
                                            if (orefAddonI.Attributes.ContainsKey("sNextSeqEnd"))
                                            {
                                                NextSeqEnd = orefAddonI.Attributes["sNextSeqEnd"].sValue;
                                            }
                                            long iNextSeqStart = 0;
                                            if (long.TryParse(NextSeqStart, out iNextSeqStart))
                                            {
                                                if (iNextSeqStart > 0 && iSequence > iEndSeqence)
                                                {
                                                    Sequence = NextSeqStart;
                                                    iSequence = iNextSeqStart;
                                                    // adding iNextSeqStart to iStartSequence
                                                    orefAddonI.Attributes["sStartSequence"].sValue = iNextSeqStart.ToString();
                                                    orefAddonI.Attributes["sStartSequence"].bDirty = true;
                                                    // adding NextSeqEnd to iEndSeqence
                                                    orefAddonI.Attributes["sEndSeqence"].sValue = NextSeqEnd.ToString();
                                                    orefAddonI.Attributes["sEndSeqence"].bDirty = true;
                                                    // empty next sequence
                                                    orefAddonI.Attributes["sNextSeqStart"].sValue = string.Empty;
                                                    orefAddonI.Attributes["sNextSeqStart"].bDirty = true;
                                                    orefAddonI.Attributes["sNextSeqEnd"].sValue = string.Empty;
                                                    orefAddonI.Attributes["sNextSeqEnd"].bDirty = true;
                                                }
                                            }
                                            //check wheather sequence reach to end sequence 
                                            if (iSequence == iEndSeqence && iNextSeqStart == 0)
                                            {
                                                //send a mail
                                            }
                                            orefAddonI.Attributes["sSequence"].sValue = iSequence.ToString(new String('0', Sequence.Count()));
                                            orefAddonI.Attributes["sSequence"].bDirty = true;
                                            orefAddonI.Attributes["id"].bDirty = true;
                                        }
                                        var obj = orefAddonI.Save(orefAddonI);
                                    }
                                }
                                if (instance.Attributes.ContainsKey("bIsConverted"))
                                {
                                    instance.Attributes["bIsConverted"].sValue = "true";
                                }
                                instance.Attributes["saddonno"].sValue = sSequenceNum;
                                AddonStatus = instance.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Purchased").Select(m => m.sValues).FirstOrDefault();
                            }
                            if (instance.Attributes.ContainsKey("dCoverStart"))
                            {
                                if (!string.IsNullOrEmpty(sTransType) && sTransType == "renewal")
                                {
                                    instance.Attributes["dCoverStart"].sValue = oPolicyI.Attributes["dCurrentPolicyOnCover"].sValue;
                                }
                                else
                                {
                                    instance.Attributes["dCoverStart"].sValue = string.IsNullOrEmpty(oQSInstance.XIIValues("dtEffectiveFrom")) ? oPolicyI.Attributes["dCoverStart"].sValue : oQSInstance.XIIValues("dtEffectiveFrom");
                                }
                            }
                            if (instance.Attributes.ContainsKey("dCoverEnd"))
                            {
                                instance.Attributes["dCoverEnd"].sValue = string.IsNullOrEmpty(oQSInstance.XIIValues("dtEffectiveFrom")) ? oPolicyI.Attributes["dCoverEnd"].sValue : Convert.ToDateTime(oQSInstance.XIIValues("dtEffectiveFrom")).AddYears(1).ToString("dd-MMM-yyyy");
                            }
                            if (instance.Attributes.ContainsKey("tCoverStart"))
                            {
                                instance.Attributes["tCoverStart"].sValue = oPolicyI.Attributes["tCurrentPolicyCoverStart"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("tCoverEnd"))
                            {
                                instance.Attributes["tCoverEnd"].sValue = oPolicyI.Attributes["tCoverEnd"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("fkiacpolicyid"))
                            {
                                instance.Attributes["fkiacpolicyid"].sValue = iACPolicyID.ToString();
                            }
                            if (instance.Attributes.ContainsKey("FKiClientID"))
                            {
                                instance.Attributes["FKiClientID"].sValue = oPolicyI.Attributes["FKiCustomerID"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("FKsPolicyNo"))
                            {
                                instance.Attributes["FKsPolicyNo"].sValue = oPolicyI.Attributes["sPolicyNo"].sValue;
                            }
                            if (instance.Attributes.ContainsKey("FKsClientReferenceNumber"))
                            {
                                instance.Attributes["FKsClientReferenceNumber"].sValue = sClientReference;
                            }
                            if (instance.Attributes.ContainsKey("iStatus"))
                            {
                                instance.Attributes["iStatus"].sValue = AddonStatus;
                            }
                            if (oParams.Where(m => m.sName == "IsAddon").Select(x => x.sValue).FirstOrDefault() == "true")
                            {
                                instance.Attributes["bIsAddonQS"].sValue = "0";
                            }
                            instance.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                            var oAddonI = oBO.Save(instance);
                            if (oAddonI.bOK && oAddonI.oResult != null)
                            {
                                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                                {
                                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = sAddonName + " Addons added successfully";
                                }
                                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                                {
                                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                                }
                                if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                                {
                                    oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = sACPolicyVersionID;
                                }
                                else
                                {
                                    oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sACPolicyVersionID });
                                }
                                Audit_Policy(oParams);
                                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                                {
                                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                                }
                                oCResult.oTraceStack.Add(new CNV { sName = "Addons", sValue = "Addons Inserted Sucessfully" });
                            }
                        }
                    }
                }
                oCResult.oResult = null;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oTraceStack.Add(new CNV { sName = "Addons", sValue = "Insert Addons method Returned" });
            }
            catch (Exception ex)
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Addons adding failed";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                Audit_Policy(oParams);
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                }
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult;
        }

        public CResult InsertQuoteDetails(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iPaymentType = oParams.Where(m => m.sName.ToLower() == "iPaymentType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                if (iInstanceID > 0)
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    var oBOI = oIXI.BOI("Aggregations", iQuoteID, "Create");
                    if (string.IsNullOrEmpty(iPaymentType))
                    {
                        iPaymentType = oQSInstance.XIIValues("iClientPayment");
                    }
                    else
                    {
                        oBOI.Exclude("id");
                        oBOI.SetAttribute("FKiQSInstanceID", iID.ToString());
                        oBOI.SetAttribute("rPrice", "0");
                        oBOI.SetAttribute("zDefaultAdmin", "0");
                        var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                        oBOI.SetAttribute("sGUID", sQuoteGUID);
                    }
                    var oProductI = oIXI.BOI("Product", iProductID);
                    float rAddonTotal = 0;
                    float rAddonAdminTotal = 0;
                    float rTotal = 0;
                    string sAddonDescription = null;
                    QueryEngine oQE = new QueryEngine();
                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                    List<SqlParameter> oSQLParams = new List<SqlParameter>();
                    XIWhereParams oWP = new XIWhereParams();
                    oWP.sField = "FKiQsInstanceID";
                    oWP.sOperator = "=";
                    oWP.sValue = iID;
                    oWParams.Add(oWP);
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQsInstanceID", Value = iID });
                    XIWhereParams oWP1 = new XIWhereParams();
                    oWP1.sField = "iStatus";
                    oWP1.sOperator = "=";
                    oWP1.sValue = "0";
                    oWParams.Add(oWP1);
                    oSQLParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "0" });
                    oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    //load requirement template definition of productid and FKiTransactionTypeID
                    oQE.AddBO("ACPurchase_T", "Create", oWParams);
                    CResult oCresult = oQE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oCresult.bOK && oCresult.oResult != null)
                    {
                        var sSql = (string)oCresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = oSQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD = oQE.QParams.FirstOrDefault().BOD;
                            oBOIList.ForEach(x => x.BOD = oBOD);
                            foreach (var instance in oBOIList)
                            {
                                if (instance.Attributes.ContainsKey("rPremiumOverride"))
                                {
                                    var AddonPrice = instance.Attributes["rPremiumOverride"].doValue == 0 ? instance.Attributes["rCost"].sValue : instance.Attributes["rPremiumOverride"].sValue;
                                    var AddonAdminPrice = instance.Attributes["rAdmin"].sValue;
                                    float rAddon = 0;
                                    if (float.TryParse(AddonPrice, out rAddon))
                                    {
                                        rAddonTotal += rAddon;
                                        sAddonDescription += instance.Attributes["sName"].sValue + ",";
                                    }
                                    float rAddonAdmin = 0;
                                    if (float.TryParse(AddonAdminPrice, out rAddonAdmin))
                                    {
                                        rAddonAdminTotal += rAddonAdmin;
                                    }
                                }
                            }
                        }
                    }
                    float rAdmin = 0;
                    float rDefaultDeposit = 0;
                    float rPFAmount = 0;
                    float rPaymentCharge = 0;
                    float rInsurerCharge = 0;
                    float rFinalQuote = 0;
                    float rQuotePremium = 0;
                    if (float.TryParse(oBOI.Attributes["zDefaultAdmin"].sValue, out rAdmin))
                    {
                    }
                    if (float.TryParse(oBOI.Attributes["rPrice"].sValue, out rFinalQuote))
                    {
                    }
                    rFinalQuote += rAddonTotal + rAddonAdminTotal;
                    if (iPaymentType == "20")
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "FullPayment Summary", null, null);
                        var InsurerCharge = oQSInstance == null ? "0" : oQSInstance.XIIValues("rinsurarcharges");
                        if (float.TryParse(InsurerCharge, out rInsurerCharge)) { }
                        var sPaymentCharge = oQSInstance == null ? "0" : oQSInstance.XIIValues("iPaymentcharge1");
                        if (float.TryParse(sPaymentCharge, out rPaymentCharge)) { }
                        rFinalQuote += rAdmin + rInsurerCharge + rPaymentCharge;
                        rTotal += rFinalQuote;
                        rQuotePremium = rTotal;
                        rAdmin += rAddonAdminTotal;
                        if (float.TryParse(oBOI.Attributes["zDefaultDeposit"].sValue, out rDefaultDeposit))
                        {
                        }
                        rPFAmount += rQuotePremium - rTotal;
                        oBOI.Attributes["iPaymentType"].sValue = "10";
                    }
                    else
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "PFSummary", null, null);
                        var ClientAmount = oQSInstance.XIIValues("iClientDeposit");
                        var sPaymentCharge = oQSInstance.XIIValues("iPaymentcharge");
                        if (float.TryParse(sPaymentCharge, out rPaymentCharge)) { }
                        var InsurerCharge = oQSInstance.XIIValues("insurarcharges");
                        if (float.TryParse(InsurerCharge, out rInsurerCharge)) { }
                        rFinalQuote += rAdmin + rInsurerCharge + rPaymentCharge;
                        if (float.TryParse(ClientAmount, out rDefaultDeposit))
                        {
                        }
                        else if (float.TryParse(oBOI.Attributes["zDefaultDeposit"].sValue, out rDefaultDeposit))
                        {
                        }

                        rAdmin += rAddonAdminTotal;
                        if (float.TryParse(oBOI.Attributes["rMonthlyTotal"].sValue, out rQuotePremium))
                        {
                        }
                        //rDefaultDeposit += rInsurerCharge;
                        rTotal = rFinalQuote;
                        rPFAmount += rTotal - rDefaultDeposit;
                        oBOI.Attributes["iPaymentType"].sValue = "20";
                    }
                    XIIBO oBO = new XIIBO();
                    //if (oBOI.Attributes.ContainsKey("zDefaultAdmin"))
                    //{
                    //    oBOI.Attributes["zDefaultAdmin"].sValue = rAdmin.ToString();
                    //}
                    if (oBOI.Attributes.ContainsKey("FKiPFSchemeID"))
                    {
                        oBOI.Attributes["FKiPFSchemeID"].sValue = oQSInstance == null ? "0" : oQSInstance.XIIValues("sSchemeRef");
                    }
                    if (oBOI.Attributes.ContainsKey("rAddonAdmin"))
                    {
                        oBOI.Attributes["rAddonAdmin"].sValue = String.Format("{0:0.00}", rAddonAdminTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("rPaymentCharge"))
                    {
                        oBOI.Attributes["rPaymentCharge"].sValue = String.Format("{0:0.00}", rPaymentCharge);
                    }
                    if (oBOI.Attributes.ContainsKey("rInsurerCharge"))
                    {
                        oBOI.Attributes["rInsurerCharge"].sValue = String.Format("{0:0.00}", rInsurerCharge);
                    }
                    if (oBOI.Attributes.ContainsKey("rTotalAdmin"))
                    {
                        oBOI.Attributes["rTotalAdmin"].sValue = String.Format("{0:0.00}", rAdmin);
                    }
                    if (oBOI.Attributes.ContainsKey("zDefaultDeposit"))
                    {
                        oBOI.Attributes["zDefaultDeposit"].sValue = String.Format("{0:0.00}", rDefaultDeposit);
                    }
                    if (oBOI.Attributes.ContainsKey("rAddonPrice"))
                    {
                        oBOI.Attributes["rAddonPrice"].sValue = String.Format("{0:0.00}", rAddonTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("sAddonDescription") && !string.IsNullOrEmpty(sAddonDescription))
                    {
                        oBOI.Attributes["sAddonDescription"].sValue = sAddonDescription.Substring(0, sAddonDescription.Length - 1);
                    }
                    if (oBOI.Attributes.ContainsKey("rtotal"))
                    {
                        oBOI.Attributes["rtotal"].sValue = String.Format("{0:0.00}", rTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("rpremiumfinanceamount"))
                    {
                        oBOI.Attributes["rpremiumfinanceamount"].sValue = String.Format("{0:0.00}", rPFAmount);
                    }
                    if (oBOI.Attributes.ContainsKey("rFinalPremium"))
                    {
                        oBOI.Attributes["rFinalPremium"].sValue = String.Format("{0:0.00}", rFinalQuote);
                    }
                    if (oBOI.Attributes.ContainsKey("iBuyStatus"))
                    {
                        oBOI.Attributes["iBuyStatus"].sValue = "10";
                    }
                    if (oBOI.Attributes.ContainsKey("rAdmin"))
                    {
                        oBOI.Attributes["rAdmin"].sValue = "0";
                    }
                    oBOI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                    var oQuoteI = oBO.Save(oBOI);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|Aggregations.id}", ((XIIBO)oQuoteI.oResult).AttributeI("id").sValue, null, null);
                    oCResult.oResult = null;
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }

        #region GenrateDocuments
        public CResult GeneratePolicyDocuments(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            XIInfraCache oCache = new XIInfraCache();
            XIIXI oIXI = new XIIXI();
            XIInstanceBase oIB = new XIInstanceBase();
            var iAuditID = 0;
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                int iPolicyVersionID = 0;
                string iACPolicyID = string.Empty;
                iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIDStructure oXIDStructure = new XIDStructure();
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                if (oParams.Where(m => m.sName == "bOverride").Select(x => x.sValue).FirstOrDefault() == "true")
                {
                    string sOneClickName = "New Business Policy Version"; //Policy Version Count
                    XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sOneClickName, null);
                    XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                    List<CNV> nParms = new List<CNV>();
                    CNV oCNV = new CNV();
                    oCNV.sName = "{XIP|FKiACPolicyID}";
                    oCNV.sValue = iACPolicyID;
                    nParms.Add(oCNV);
                    o1ClickC.ReplaceFKExpressions(nParms);
                    o1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, nParms);
                    Dictionary<string, XIIBO> oRes = o1ClickC.OneClick_Run(false);
                    if (oRes != null && oRes.Count() > 0)
                    {
                        //return oCResult;
                        var NewBusinessPolicyVersion = oRes.FirstOrDefault();
                        //int iACPolicyVersionID = 0;
                        if (NewBusinessPolicyVersion.Value.Attributes.ContainsKey("id"))
                        {
                            var sPolicyVersionID = NewBusinessPolicyVersion.Value.Attributes["id"].sValue;
                            int.TryParse(sPolicyVersionID, out iPolicyVersionID);
                        }
                        if (iQSInstanceID == 0 && NewBusinessPolicyVersion.Value.Attributes.ContainsKey("fkiqsinstanceid"))
                        {
                            var sQSIID = NewBusinessPolicyVersion.Value.Attributes["fkiqsinstanceid"].sValue;
                            int.TryParse(sQSIID, out iQSInstanceID);
                        }
                        string sQuery = "select id, " + XIConstant.Key_XIDeleted + " from Documents_T where " + XIConstant.Key_XIDeleted + " = 0 and iInstanceID = " + iACPolicyID + " and FKiPolicyVersionID = " + iPolicyVersionID;
                        XID1Click oXI1Click = new XID1Click();
                        oXI1Click.Query = sQuery;
                        oXI1Click.Name = "Documents_T";
                        var Result = oXI1Click.GetList();
                        List<XIIBO> oDocumentsList = new List<XIIBO>();
                        if (Result.bOK || Result.oResult != null)
                        {
                            oDocumentsList = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                        }
                        XIDXI oTXI = new XIDXI();
                        var BOD = (XIDBO)oTXI.Get_BODefinition("Documents_T").oResult;
                        if (oDocumentsList.Count() > 0)
                        {
                            foreach (var item in oDocumentsList)
                            {
                                item.BOD = BOD;
                                item.SetAttribute(XIConstant.Key_XIDeleted, "1");
                                item.SetAttribute("id", item.AttributeI("id").sValue);
                                var res = item.Save(item);
                                if (!res.bOK && res.oResult == null)
                                {
                                    oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update of " + XIConstant.Key_XIDeleted + "  (In Active) for Documents failed for id =: " + item.AttributeI("id").ToString();
                                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                    oCResult.LogToFile();
                                    oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update of " + XIConstant.Key_XIDeleted + " (In Active) for Documents failed for id =: " + item.AttributeI("id").ToString();
                                    oIB.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
                                }
                            }
                        }
                        //Update policy ID to the Documents
                        sQuery = "select * from Documents_T where " + XIConstant.Key_XIDeleted + " = 0 and FKiQSInstanceID = " + iQSInstanceID;
                        oXI1Click = new XID1Click();
                        oXI1Click.Query = sQuery;
                        oXI1Click.Name = "Documents_T";
                        Result = oXI1Click.GetList();
                        oDocumentsList = new List<XIIBO>();
                        if (Result.bOK || Result.oResult != null)
                        {
                            oDocumentsList = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                        }
                        oTXI = new XIDXI();
                        if (oDocumentsList.Count() > 0)
                        {
                            foreach (var item in oDocumentsList)
                            {
                                item.BOD = BOD;
                                item.SetAttribute("iInstanceID", iACPolicyID.ToString());
                                item.SetAttribute("id", item.AttributeI("id").sValue);
                                item.SetAttribute("FKiPolicyVersionID", iPolicyVersionID.ToString());
                                var res = item.Save(item);
                                if (!res.bOK && res.oResult == null)
                                {
                                    oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update PolicyID & PolicyVersionID to the instance id =: " + item.AttributeI("id").ToString();
                                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                                    oCResult.LogToFile();
                                    oCResult.sMessage = oCResult.sFunctionName + ", Unable to Update PolicyID & PolicyVersionID to the instance id =: " + item.AttributeI("id").ToString();
                                    oIB.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
                                }
                            }
                        }
                    }
                }
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Documents generation in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Documents generation in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);
                oCResult.oTraceStack.Add(new CNV { sName = "Policy Documents", sValue = "Genarate Policy Method Started" });
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = string.Empty; int iUserID = 0; //string sStructureName = string.Empty;
                string sOrgName = string.Empty; int iOrgID = 0; string sACPolicyVersionID = string.Empty;
                //string sBOName = string.Empty; //sStructure = string.Empty, sTemplateName = string.Empty;
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sPolicyDocs_sBO".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sStructureName = oParams.Where(m => m.sName.ToLower() == "sPolicyDocs_sStructure".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIDScript oXIDScript = new XIDScript();
                oXIDScript.sScript = sStructureName;
                sStructureName = oXIDScript.Execute_Script(sGUID, sSessionID).oResult.ToString();
                if (oParams != null && oParams.Count() > 0)
                {
                    //var oXiLink = (XILink)oCache.GetObjectFromCache(XIConstant.CacheXILink, "Policy Documents Parameters", "");
                    //string sInstanceID = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "iInstanceID".ToLower()).Select(m => m.Value).FirstOrDefault();
                    //sInstanceID = oCache.Get_ParamVal(sSessionID, sGUID, "", sInstanceID);
                    // int.TryParse(sInstanceID, out iPolicyID);
                    //sBOName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sBOName".ToLower()).Select(m => m.Value).FirstOrDefault();
                    //sStructureName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sStructure".ToLower()).Select(m => m.Value).FirstOrDefault();
                    //sStructure = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sStructure".ToLower()).Select(m => m.Value).FirstOrDefault();

                    //sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    //sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    iUserID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                    iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                    sOrgName = oParams.Where(m => m.sName.ToLower() == "sOrgName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    if (!string.IsNullOrEmpty(sACPolicyVersionID))
                    {
                        int.TryParse(sACPolicyVersionID, out iPolicyVersionID);
                    }
                    CNV oCNV = new CNV();
                    //oCNV.sName = "iInstanceID";
                    //oCNV.sValue = iACPolicyID;
                    //oParams.Add(oCNV);
                    oCNV = new CNV();
                    oCNV.sName = "Object";
                    oCNV.sValue = sBOName;
                    oParams.Add(oCNV);
                    //comment below lines
                    //oCNV = new CNV();
                    //oCNV.sName = "Structure Name";
                    //oCNV.sValue = "New Policy";
                    //oParams.Add(oCNV);
                    //oCNV = new CNV();
                    //oCNV.sName = "Output";
                    //oCNV.sValue = "email";
                    //oParams.Add(oCNV);
                }
                string sProductAddOnIDs = string.Empty;
                var oLIst = oIXI.BOI(sBOName, iACPolicyID.ToString());
                var oInstance = oLIst.Structure(sStructureName).XILoad();
                //string sTransactionType = string.Empty;
                var sTransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}");
                if (oLIst.Attributes.ContainsKey("iStatus") && string.IsNullOrEmpty(sTransactionType))
                {
                    sTransactionType = oLIst.AttributeI("iStatus").sValue;
                }
                if (!string.IsNullOrEmpty(iProductID))
                {
                    QueryEngine oQE = new QueryEngine();
                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                    List<SqlParameter> oSQLParams = new List<SqlParameter>();
                    XIWhereParams oWP = new XIWhereParams();
                    oWP.sField = "FKiACPolicyID";
                    oWP.sOperator = "=";
                    oWP.sValue = iACPolicyID;
                    oWParams.Add(oWP);
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiACPolicyID", Value = iACPolicyID });
                    oWP = new XIWhereParams();
                    oWP.sField = "iStatus";
                    oWP.sOperator = "=";
                    oWP.sValue = "10";
                    oWParams.Add(oWP);
                    oSQLParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "10" });
                    oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    if ((oParams.Where(m => m.sName == "IsAddon").Select(x => x.sValue).FirstOrDefault() == "true") || (sTransactionType == "25" && iQSInstanceID > 0))
                    {
                        oWP = new XIWhereParams();
                        oWP.sField = "FKiQSInstanceID";
                        oWP.sOperator = "=";
                        oWP.sValue = sQSInstanceID;
                        oWParams.Add(oWP);
                        oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = sQSInstanceID });
                    }
                    List<string> oProductAddOnIDs = new List<string>();
                    QueryEngine oProductAddonQE = new QueryEngine();
                    //load productaddons of productid
                    oProductAddonQE.AddBO("ACPurchase_T", null, oWParams);
                    CResult oProAddonCresult = oProductAddonQE.BuildQuery();
                    if (oProAddonCresult.bOK && oProAddonCresult.oResult != null)
                    {
                        var sSql = (string)oProAddonCresult.oResult;
                        ExecutionEngine oProAddonEE = new ExecutionEngine();
                        oProAddonEE.XIDataSource = oProductAddonQE.XIDataSource;
                        oProAddonEE.sSQL = sSql;
                        oProAddonEE.SqlParams = oSQLParams;
                        var oQResult = oProAddonEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            foreach (var oBOI in oBOIList)
                            {
                                if (oBOI.Attributes.ContainsKey("refAddon"))
                                {
                                    oProductAddOnIDs.Add(oBOI.AttributeI("refAddon").sValue);
                                }
                            }
                        }
                    }
                    if (oProductAddOnIDs != null && oProductAddOnIDs.Count() > 0)
                    {
                        sProductAddOnIDs = string.Join(",", oProductAddOnIDs);
                    }
                    //XIDStructure oXIDStructure = new XIDStructure();
                    string sOneClickName = "Product Document template";
                    XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sOneClickName, null);
                    XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                    List<CNV> nParms = new List<CNV>();
                    CNV oCNV = new CNV();
                    oCNV.sName = "{XIP|ProductID}";
                    if (oParams.Where(m => m.sName == "IsAddon").Select(x => x.sValue).FirstOrDefault() == "true")
                    {
                        oCNV.sValue = "0";
                    }
                    else
                    {
                        oCNV.sValue = iProductID;
                    }
                    nParms.Add(oCNV);
                    oCNV = new CNV();
                    oCNV.sName = "{XIP|ProductAddonID}";
                    if (string.IsNullOrEmpty(sProductAddOnIDs))
                    {
                        sProductAddOnIDs = "0";
                    }
                    oCNV.sValue = sProductAddOnIDs;
                    nParms.Add(oCNV);
                    oCNV = new CNV();
                    oCNV.sName = "{xi.p|-iClassID}";
                    oCNV.sValue = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|FKiClassID}");
                    nParms.Add(oCNV);
                    nParms.Add(new CNV { sName = "{XIP|iTransactionType}", sValue = sTransactionType });
                    o1ClickC.ReplaceFKExpressions(nParms);
                    o1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, nParms);
                    oCResult.oTraceStack.Add(new CNV { sName = "Product Document template", sValue = "Product Document template Query:" + o1ClickC.Query });
                    oXID.SaveErrortoDB(oCResult);
                    Dictionary<string, XIIBO> oRes = o1ClickC.OneClick_Run(false);
                    if (oRes != null && oRes.Count() > 0)
                    {
                        //XIIXI oIXI = new XIIXI();
                        //var oLIst = oIXI.BOI(sBOName, iACPolicyID.ToString());
                        //var oInstance = oLIst.Structure(sStructureName).XILoad();
                        var oBOIList = oRes.Values.ToList();
                        foreach (var template in oBOIList)
                        {
                            string sDocumentID = string.Empty; string sIsGenerate = string.Empty; string sWhenGenerate = string.Empty; bool bIsDocumentCopy = false;
                            if (template.Attributes.ContainsKey("sWhenGenerate"))
                            {
                                sWhenGenerate = template.AttributeI("sWhenGenerate").sValue;
                            }
                            if (template.Attributes.ContainsKey("bIsGenerate"))
                            {
                                sIsGenerate = template.AttributeI("bIsGenerate").sValue;
                            }
                            if (template.Attributes.ContainsKey("FKiTemplateID"))
                            {
                                sDocumentID = template.AttributeI("FKiTemplateID").sValue;
                            }
                            if (template.Attributes.ContainsKey("bIsDocumentCopy"))
                            {
                                bIsDocumentCopy = template.AttributeI("bIsDocumentCopy").bValue;
                            }
                            int iDocumentID = 0;
                            if (!string.IsNullOrEmpty(sDocumentID))
                            {
                                iDocumentID = Convert.ToInt32(sDocumentID);
                            }
                            //string sCopyDocumentName = string.Empty;
                            //if (template.Attributes.ContainsKey("sCopyDocumentName"))
                            //{
                            //    sCopyDocumentName = template.AttributeI("sCopyDocumentName").sValue;
                            //}
                            if (iDocumentID != 0)
                            {
                                string sAddonID = string.Empty;
                                if (template.Attributes.ContainsKey("FKiProductAddonID"))
                                {
                                    sAddonID = template.AttributeI("FKiProductAddonID").sValue;
                                }
                                int iAddonID = 0;
                                if (!string.IsNullOrEmpty(sAddonID))
                                {
                                    iAddonID = Convert.ToInt32(sAddonID);
                                }
                                string sSubject = string.Empty;
                                if (template.Attributes.ContainsKey("sDefaultSubject"))
                                {
                                    sSubject = template.AttributeI("sDefaultSubject").sValue;
                                }
                                if (oParams != null && oParams.Count() > 0)
                                {
                                    //var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "DocumentID");
                                    //oParams.Remove(stuffToRemove);
                                    //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "Subject");
                                    //oParams.Remove(stuffToRemove);
                                    //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "iAddonID");
                                    //oParams.Remove(stuffToRemove);
                                    //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "iInstanceID");
                                    //oParams.Remove(stuffToRemove);
                                    //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "sWhenGenerate");
                                    //oParams.Remove(stuffToRemove);
                                    //CNV oNV = new CNV();
                                    //oNV = new CNV();
                                    //oNV.sName = "DocumentID";
                                    //oNV.sValue = iDocumentID.ToString();
                                    //oParams.Add(oNV);
                                    //oNV = new CNV();
                                    //oNV.sName = "Subject";
                                    //oNV.sValue = sSubject;
                                    //oParams.Add(oNV);
                                    //oNV = new CNV();
                                    //oNV.sName = "iAddonID";
                                    //oNV.sValue = iAddonID.ToString();
                                    //oParams.Add(oNV);
                                    //oNV = new CNV();
                                    //oNV.sName = "iInstanceID";
                                    //oNV.sValue = iACPolicyID.ToString();
                                    //oParams.Add(oNV);

                                    if (oParams.Where(s => s.sName == "DocumentID").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "DocumentID").FirstOrDefault().sValue = iDocumentID.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "DocumentID", sValue = iDocumentID.ToString() });
                                    }
                                    if (oParams.Where(s => s.sName == "Subject").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "Subject").FirstOrDefault().sValue = sSubject.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "Subject", sValue = sSubject });
                                    }
                                    if (oParams.Where(s => s.sName == "iAddonID").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "iAddonID").FirstOrDefault().sValue = iAddonID.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "iAddonID", sValue = iAddonID.ToString() });
                                    }
                                    if (oParams.Where(s => s.sName == "iInstanceID").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "iInstanceID").FirstOrDefault().sValue = iACPolicyID.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "iInstanceID", sValue = iACPolicyID.ToString() });
                                    }
                                    if (oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "FKiPolicyVersionID").FirstOrDefault().sValue = iPolicyVersionID.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = iPolicyVersionID.ToString() });
                                    }
                                    if (oParams.Where(s => s.sName == "sWhenGenerate").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "sWhenGenerate").FirstOrDefault().sValue = sWhenGenerate.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "sWhenGenerate", sValue = sWhenGenerate });
                                    }
                                    if (oParams.Where(s => s.sName == "bIsDocumentCopy").FirstOrDefault() != null)
                                    {
                                        oParams.Where(s => s.sName == "bIsDocumentCopy").FirstOrDefault().sValue = bIsDocumentCopy.ToString();
                                    }
                                    else
                                    {
                                        oParams.Add(new CNV { sName = "bIsDocumentCopy", sValue = bIsDocumentCopy.ToString() });
                                    }
                                }
                                XIInfraDocumentComponent oDocumentComp = new XIInfraDocumentComponent();
                                oDocumentComp.oXIBOInstance = oInstance;
                                if (!string.IsNullOrEmpty(sIsGenerate) && sIsGenerate.ToLower() == "true")
                                {
                                    oCResult.oTraceStack.Add(new CNV { sName = sSubject, sValue = "Generate" + sSubject + " Document merging started:" + iDocumentID.ToString() });
                                    oXID.SaveErrortoDB(oCResult);
                                    oDocumentComp.XILoad(oParams);
                                }
                            }
                            //else if(!string.IsNullOrEmpty(sCopyDocumentName))
                            //{
                            //    var oResult = SaveCopyDocuments(Convert.ToInt32(iACPolicyID), iUserID, sOrgName, iOrgID, sCopyDocumentName);
                            //}
                        }
                        oCResult.oTraceStack.Add(new CNV { sName = "Policy Documents", sValue = "Success : Policy Documents generated successfully" });
                        if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Documents generated successfully";
                        }
                        if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                        }
                        Audit_Policy(oParams);
                        if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                        {
                            oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                        }
                        UpdatePolicyVersion(iPolicyVersionID, "bIsDocumentsGenerated", "true");
                        UpdatePolicyVersion(iPolicyVersionID, "bIsEDIGenerated", "true");
                    }
                    oCResult.oTraceStack.Add(new CNV { sName = "Policy Documents", sValue = "Genarate Policy Method excecution complted" });
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Documents generation failed";
                }
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = iAuditID.ToString();
                }
                Audit_Policy(oParams);
                if (oParams.Where(m => m.sName == "iAuditID").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "iAuditID").FirstOrDefault().sValue = "";
                }
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.oTraceStack.Add(new CNV { sName = "Policy Documents", sValue = "Error: In Genarate Policy Method" + oCResult.sMessage });
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oResult = "Error";
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult;
        }
        //public CResult SaveCopyDocuments(int iInstanceID, int iUserID, string sOrgName, int iOrgID, string sCopyDocumentName)
        //{
        //    CResult oCResult = new CResult(); string sInstanceID = string.Empty;
        //    try
        //    {
        //        XIInfraDocs oXIDocs = new XIInfraDocs();
        //        string sCopyDocumentPath = string.Empty;
        //        string physicalPath = System.Web.Hosting.HostingEnvironment.MapPath("~");
        //        string sPath = physicalPath.Substring(0, physicalPath.Length) + "\\Content\\ProductNonMergedDocuments";
        //        string[] filePaths = Directory.GetFiles(@"" + sPath + "");
        //        foreach (var item in filePaths)
        //        {
        //            int ipos = item.LastIndexOf("\\") + 1;
        //            string sFileName = item.Substring(ipos, item.Length - ipos);
        //            if (sCopyDocumentName == sFileName.Split('.')[0])
        //            {
        //                sCopyDocumentPath = item;
        //            }
        //        }
        //        int pos = sCopyDocumentPath.LastIndexOf("\\") + 1;
        //        string sCopyDocFileName = sCopyDocumentPath.Substring(pos, sCopyDocumentPath.Length - pos);
        //        //if(sCopyDocFileName!="" && File.Exists(sCopyDocumentPath))
        //        if (!string.IsNullOrEmpty(sCopyDocFileName))
        //        {
        //            FileStream fs = new FileStream(sCopyDocumentPath, FileMode.Open, FileAccess.Read);
        //            byte[] tmpBytes = new byte[fs.Length];
        //            fs.Read(tmpBytes, 0, Convert.ToInt32(fs.Length));
        //            MemoryStream mystream = new MemoryStream(tmpBytes);
        //            StreamReader reader = new StreamReader(mystream);
        //            oXIDocs.iInstanceID = iInstanceID;
        //            oXIDocs.FKiUserID = iUserID;
        //            oXIDocs.sOrgName = sOrgName;
        //            oXIDocs.iOrgID = iOrgID;
        //            oXIDocs.iInstanceID = Convert.ToInt32(iInstanceID);
        //            var oResponse = oXIDocs.SaveDocuments(mystream, sCopyDocFileName);//save documents to folder
        //            sInstanceID = (string)oResponse.oResult;
        //            oCResult.oResult = sInstanceID;
        //            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing CopyDocuments" });
        //        oCResult.sMessage = "ERROR: [ Copy Documenst:" + sCopyDocumentName + "-" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
        //        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
        //        oCResult.LogToFile();
        //        oXID.SaveErrortoDB(oCResult);
        //    }
        //    return oCResult;
        //}
        #endregion
        public CResult UpdatePolicyIDtoBOI(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();//HttpContext.Current.Session.SessionID;
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string FKiPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPolicyNo = oParams.Where(m => m.sName.ToLower() == "sPolicyNo".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                XIIXI oIXI = new XIIXI();
                var oPolicyI = oIXI.BOI("ACPolicy_T", iACPolicyID);
                string QuoteID = "";
                if (oPolicyI != null && oPolicyI.Attributes != null && oPolicyI.Attributes.ContainsKey("FKiQuoteID"))
                {
                    QuoteID = oPolicyI.Attributes["FKiQuoteID"].sValue;
                }
                XIInfraCache oCache = new XIInfraCache();
                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> oSQLParams = new List<SqlParameter>();
                XIWhereParams oWP = new XIWhereParams();
                oWP.sField = "FKiQSInstanceID";
                oWP.sOperator = "=";
                oWP.sValue = sQSInstanceID;
                oWParams.Add(oWP);
                oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = sQSInstanceID });
                oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                CResult oCresult = oQE.BuildQuery();
                if (sStructureName == "caravan")
                {
                    //Update QsInstance against Claims to policy
                    oCResult.oTraceStack.Add(new CNV { sName = "Claim", sValue = "Update Policy id in Claim Started" });
                    oQE.AddBO("Claim_T", null, oWParams);
                    oCresult = oQE.BuildQuery();
                    if (oCresult.bOK && oCresult.oResult != null)
                    {
                        var sSql = (string)oCresult.oResult;
                        ExecutionEngine oEEngine = new ExecutionEngine();
                        oEEngine.XIDataSource = oQE.XIDataSource;
                        oEEngine.sSQL = sSql;
                        oEEngine.SqlParams = oSQLParams;
                        CResult oCRes = oEEngine.Execute();
                        if (oCRes.bOK && oCRes.oResult != null)
                        {
                            var oResponseBOIList = ((Dictionary<string, XIIBO>)oCRes.oResult).Values.ToList();
                            XIDBO oBOD = oQE.QParams.FirstOrDefault().BOD;
                            oResponseBOIList.ForEach(x => x.BOD = oBOD);
                            if (oResponseBOIList != null && oResponseBOIList.Count() > 0)
                            {
                                foreach (var oClaimBOI in oResponseBOIList)
                                {
                                    if (oClaimBOI.Attributes.ContainsKey("FKiACPolicyID"))
                                    {
                                        oClaimBOI.Attributes["FKiACPolicyID"].sValue = iACPolicyID.ToString();
                                        oClaimBOI.Attributes["FKiACPolicyID"].bDirty = true;
                                        if (oClaimBOI.Attributes.ContainsKey("FKiPolicyVersionID"))
                                        {
                                            oClaimBOI.Attributes["FKiPolicyVersionID"].sValue = FKiPolicyVersionID;
                                            oClaimBOI.Attributes["FKiPolicyVersionID"].bDirty = true;
                                        }
                                        oClaimBOI.Save(oClaimBOI);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    oQE.AddBO("Driver_T", null, oWParams);
                    oCresult = oQE.BuildQuery();
                    if (oCresult.bOK && oCresult.oResult != null)
                    {
                        var sSql = (string)oCresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = oSQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD = oQE.QParams.FirstOrDefault().BOD;
                            oBOIList.ForEach(x => x.BOD = oBOD);
                            foreach (var instance in oBOIList)
                            {
                                List<string> oBONameList = new List<string>();
                                oBONameList.Add("Claim_T");
                                oBONameList.Add("Conviction_T");
                                oBONameList.Add("MedicalCondition_T");
                                var sDriverInstanceID = instance.Attributes.Where(x => x.Key.ToLower() == oBOD.sPrimaryKey.ToLower()).Select(x => x.Value.sValue).FirstOrDefault();
                                if (!string.IsNullOrEmpty(sDriverInstanceID))
                                {
                                    if (oBONameList != null && oBONameList.Count() > 0)
                                    {
                                        foreach (var sBO in oBONameList)
                                        {
                                            QueryEngine oQEngine = new QueryEngine();
                                            List<XIWhereParams> oWhereParams = new List<XIWhereParams>();
                                            List<SqlParameter> SQLParams = new List<SqlParameter>();
                                            XIWhereParams oXIWP = new XIWhereParams();
                                            oXIWP.sField = "FKiDriverID";
                                            oXIWP.sOperator = "=";
                                            oXIWP.sValue = sDriverInstanceID;
                                            oWhereParams.Add(oXIWP);
                                            SQLParams.Add(new SqlParameter { ParameterName = "@FKiDriverID", Value = sDriverInstanceID });
                                            oQEngine.AddBO(sBO, null, oWhereParams);
                                            CResult oResult = oQEngine.BuildQuery();
                                            if (oResult.bOK && oResult.oResult != null)
                                            {
                                                sSql = (string)oResult.oResult;
                                                ExecutionEngine oEEngine = new ExecutionEngine();
                                                oEEngine.XIDataSource = oQEngine.XIDataSource;
                                                oEEngine.sSQL = sSql;
                                                oEEngine.SqlParams = SQLParams;
                                                CResult oCRes = oEEngine.Execute();
                                                if (oCRes.bOK && oCRes.oResult != null)
                                                {
                                                    var oResponseBOIList = ((Dictionary<string, XIIBO>)oCRes.oResult).Values.ToList();
                                                    oBOD = oQEngine.QParams.FirstOrDefault().BOD;
                                                    oResponseBOIList.ForEach(x => x.BOD = oBOD);
                                                    if (oResponseBOIList != null && oResponseBOIList.Count() > 0)
                                                    {
                                                        foreach (var oInstance in oResponseBOIList)
                                                        {
                                                            if (oInstance.Attributes.ContainsKey("FKiACPolicyID"))
                                                            {
                                                                oInstance.Attributes["FKiACPolicyID"].sValue = iACPolicyID.ToString();
                                                                oInstance.Attributes["FKiACPolicyID"].bDirty = true;
                                                            }
                                                            if (oInstance.Attributes.ContainsKey("FKiPolicyVersionID"))
                                                            {
                                                                oInstance.Attributes["FKiPolicyVersionID"].sValue = FKiPolicyVersionID;
                                                                oInstance.Attributes["FKiPolicyVersionID"].bDirty = true;
                                                            }
                                                            var oRes = oInstance.Save(oInstance, false);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (instance.Attributes.ContainsKey("FKiPolicyID"))
                                {
                                    instance.Attributes["FKiPolicyID"].sValue = iACPolicyID.ToString();
                                    instance.Attributes["FKiPolicyID"].bDirty = true;
                                }
                                if (instance.Attributes.ContainsKey("FKiPolicyVersionID"))
                                {
                                    instance.Attributes["FKiPolicyVersionID"].sValue = FKiPolicyVersionID;
                                    instance.Attributes["FKiPolicyVersionID"].bDirty = true;
                                }
                                var oResponse = instance.Save(instance, false);

                            }
                        }
                    }
                    oCResult.oTraceStack.Add(new CNV { sName = "Vehicle", sValue = "Update Policy id in Vehicle Started" });
                    List<CNV> onv = new List<CNV>();
                    onv.Add(new CNV { sName = "FKiQSInstanceID", sValue = sQSInstanceID });
                    var oBOI = oIXI.BOI("Vehicle_T", "", "Create", onv);
                    if (oBOI != null)
                    {
                        if (oBOI.Attributes.ContainsKey("FKiACPolicyID"))
                        {
                            oBOI.Attributes["FKiACPolicyID"].sValue = iACPolicyID.ToString();
                            oBOI.Attributes["FKiACPolicyID"].bDirty = true;
                            if (oBOI.Attributes.ContainsKey("FKiPolicyVersionID"))
                            {
                                oBOI.Attributes["FKiPolicyVersionID"].sValue = FKiPolicyVersionID;
                                oBOI.Attributes["FKiPolicyVersionID"].bDirty = true;
                            }
                            oBOI.Save(oBOI);
                        }
                        oCResult.oTraceStack.Add(new CNV { sName = "Vehicle", sValue = "Vehicle: Policy id Updated sucessfully" });
                    }
                }

                oCResult.oTraceStack.Add(new CNV { sName = "Aggregations", sValue = "Update Policy No in Aggregation Started" });
                int iQuoteID = 0;
                if (int.TryParse(QuoteID, out iQuoteID))
                {
                    var oQuoteBOI = oIXI.BOI("Aggregations", iQuoteID.ToString(), "");
                    if (oQuoteBOI.Attributes.ContainsKey("FKsPolicyNo"))
                    {
                        oQuoteBOI.Attributes["FKsPolicyNo"].sValue = sPolicyNo;
                        oQuoteBOI.Attributes["FKsPolicyNo"].bDirty = true;
                        oQuoteBOI.Save(oQuoteBOI);
                    }
                    oCResult.oTraceStack.Add(new CNV { sName = "Aggregations", sValue = "Aggregation: Policy No Updated sucessfully" });
                }
                oCResult.oResult = null;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "UpDatePolicyIDToBOI", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult; // always
        }
        public CResult PerformAction(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}", iQSInstanceID.ToString(), null, null);
                string iUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                XIIXI oIXI = new XIIXI();
                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                var Actions = oCache.Get_ParamVal(sSessionID, sGUID, null, "Actions");
                var Action1ClickBO = oCache.Get_ParamVal(sSessionID, sGUID, null, "Action1ClickBO");
                XIIBO oBOI = new XIIBO();
                XIDBO oBODs = new XIDBO();
                oBODs = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XIActionInstance_T");
                var oActionBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "", Action1ClickBO);
                List<string> sValues = new List<string>();
                if (Actions.Contains(','))
                    sValues = Actions.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();
                else
                    sValues.Add(Actions);
                SchedulerServices.Scheduler oScheduler = new SchedulerServices.Scheduler();
                Random generator = new Random();
                String BatchID = generator.Next(0, 999999).ToString();
                XIIBO oBOInstance = new XIIBO();
                foreach (var item in sValues)
                {
                    oBOInstance = oIXI.BOI(oActionBOD.Name, item);
                    oBOI = new XIIBO();
                    oBOI.BOD = oBODs;
                    oBOI.SetAttribute("iType", oQSInstance.XIValues.Where(x => x.Key.ToLower() == "itype").FirstOrDefault().Value.sValue);
                    oBOI.SetAttribute("iStatus", "10");
                    oBOI.SetAttribute("FKiEngineInstanceID", oQSInstance.XIValues.Where(x => x.Key.ToLower() == "action").FirstOrDefault().Value.sValue);
                    oBOI.SetAttribute("BOID", Action1ClickBO);
                    oBOI.SetAttribute("BOInstanceID", item);
                    oBOI.SetAttribute("iBatchID", BatchID);
                    oCResult = oScheduler.OnStart(oQSInstance.XIValues.Where(x => x.Key.ToLower() == "action").FirstOrDefault().Value.iValue, iQSInstanceID, item);
                    if (oCResult.bOK)
                    {
                        oBOI.SetAttribute("iStatus", "20");
                    }
                    else if (!oCResult.bOK)
                    {
                        oBOI.SetAttribute("iStatus", "30");
                    }
                    oBOI.SetAttribute("sDetails", oBOInstance.AttributeI("sName").sValue);
                    oBOI.SetAttribute("FKiQSInstanceID", sQSInstanceID);
                    oBOI.SetAttribute("FKsWhoID", iUserID);
                    oBOI.SetAttribute("sResult", string.Join("\n", ((CResult)oCResult.oResult).oTraceStack.ToList().Select(x => x.sValue)));
                    oCResult = oBOI.Save(oBOI);
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "UpDatePolicyIDToBOI", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult; // always
        }
        public CResult AsynchronousActions(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var ActionInstance = oCache.Get_ParamVal(sSessionID, sGUID, null, "{-iInstanceID}");
                string Actions = oParams.Where(m => m.sName.ToLower() == "ActionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                XIIXI oIXI = new XIIXI();
                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                XIIBO oBOI = new XIIBO();
                oBOI = oIXI.BOI("XIActionInstance_T", ActionInstance);
                List<string> sValues = new List<string>();
                if (Actions.Contains(','))
                    sValues = Actions.Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries).ToList();
                else
                    sValues.Add(Actions);
                SchedulerServices.Scheduler oScheduler = new SchedulerServices.Scheduler();

                foreach (var item in sValues)
                {
                    oCResult = oScheduler.OnStart(Convert.ToInt32(item), iQSInstanceID, item);
                    if (oCResult.bOK)
                    {
                        oBOI.SetAttribute("iStatus", "20");
                    }
                    else if (!oCResult.bOK)
                    {
                        oBOI.SetAttribute("iStatus", "30");
                    }
                    oBOI.SetAttribute("FKsWhoID", iUserID);
                    oBOI.SetAttribute("sResult", oCResult.oResult.ToString());
                    oCResult = oBOI.Save(oBOI);
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "UpDatePolicyIDToBOI", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult; // always
        }
        public CResult InsertXIActionInstance(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            XIDefinitionBase oXID = new XIDefinitionBase();
            try
            {
                XIIBO oBOI = new XIIBO();
                XIDBO oBODs = new XIDBO();
                oBODs = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XIActionInstance_T");
                string QSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string OneClickID = oParams.Where(m => m.sName.ToLower() == "1ClickID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                oBOI.BOD = oBODs;
                oBOI.Attributes["FKiQSInstanceID".ToLower()] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = QSInstanceID, bDirty = true };
                oBOI.Attributes["ID".ToLower()] = new XIIAttribute { sName = "ID", sValue = OneClickID, bDirty = true };
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sSessionID = HttpContext.Current.Session.SessionID;
                oCResult = oBOI.Save(oBOI);
                oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|1ClickID}", OneClickID, "", null);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }

            return oCResult;
        }
        public CResult InsertCancelPolicy(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string PolicyID = oParams.Where(m => m.sName.ToLower() == "iPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserID = string.Empty;
                if (int.TryParse(iQSIID, out iQSInstanceID))
                { }
                if (int.TryParse(PolicyID, out iPolicyID))
                { }
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                //var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                oResult.sMessage = "PolicyID :" + PolicyID;
                oXID.SaveErrortoDB(oResult);

                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>(StringComparer.CurrentCultureIgnoreCase);
                int iInsatnceID = 0;
                if (int.TryParse(iQSIID, out iInsatnceID))
                { }

                //XIIQS oQsInstance = oIXI.GetQuestionSetInstanceByID(0, iInsatnceID, null, 0, 0, null);
                XIIQS oQsInstance = oIXI.GetQSXIValuesByQSIID(iInsatnceID.ToString());
                //XIBOBuilding oBOBuilding = new XIBOBuilding();
                //foreach (var oQS in oQsInstance.XIValues)
                //{
                //    if (!OQSD.ContainsKey(oQS.Key))
                //    {
                //        OQSD.Add(oQS.Key, new CNV { sName = oQS.Key, sValue = oQS.Value.sValue });
                //    }
                //}
                OQSD = oQsInstance.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });

                var oPolicyI = oIXI.BOI("ACPolicy_T", PolicyID, "Create");
                var sPolicyNo = "";
                var dStartDate = "";
                var dEndDate = "";
                if (oPolicyI.Attributes.ContainsKey("sPolicyNo"))
                {
                    sPolicyNo = oPolicyI.Attributes["sPolicyNo"].sValue;
                    List<CNV> oPolicyNVs = new List<CNV>();
                    oPolicyNVs.Add(new CNV { sName = "sPolicyNo", sValue = sPolicyNo });
                    var oPolicy = oIXI.BOI("ACPolicy_T", "", "", oPolicyNVs);
                    if (oPolicy.Attributes.ContainsKey("dCoverStart"))
                    {
                        dStartDate = oPolicy.Attributes["dCoverStart"].sValue;
                    }
                    if (oPolicy.Attributes.ContainsKey("dCoverEnd"))
                    {
                        dEndDate = oPolicy.Attributes["dCoverEnd"].sValue;
                    }
                }
                if (oPolicyI.Attributes.ContainsKey("FKiUserID"))
                {
                    sUserID = oPolicyI.Attributes["FKiUserID"].sValue;
                }
                //List<CNV> oNVs = new List<CNV>();
                //oNVs.Add(new CNV { sName = "FKiPolicyID", sValue = PolicyID });
                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                XIWhereParams oWP = new XIWhereParams();
                //oWP.sField = "FKsPolicyNo";
                //oWP.sOperator = "=";
                //oWP.sValue = sPolicyNo;
                //oWParams.Add(oWP);
                //oWP = new XIWhereParams();
                //oWP.sField = "iStatus";
                //oWP.sOperator = "!=";
                //oWP.sValue = "20";
                //oWParams.Add(oWP);
                //oQE.AddBO("Requirement_T", null, oWParams);
                //CResult oCresult = oQE.BuildQuery();
                //if (oCresult.bOK && oCresult.oResult != null)
                //{
                //    var sSql = (string)oCresult.oResult;
                //    ExecutionEngine oEE = new ExecutionEngine();
                //    oEE.XIDataSource = oQE.XIDataSource;
                //    oEE.sSQL = sSql;
                //    var oQResult = oEE.Execute();
                //    if (oQResult.bOK && oQResult.oResult != null)
                //    {
                //        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                //        if (oBOIList.Count > 0)
                //        {
                //            if (!OQSD.ContainsKey("bDocumentsReceived"))
                //            {
                //                OQSD["bDocumentsReceived"] = new CNV { sName = "bDocumentsReceived", sValue = "0" };
                //            }
                //            if (!OQSD.ContainsKey("sDeclineReason"))
                //            {
                //                OQSD["sDeclineReason"] = new CNV { sName = "sDeclineReason", sValue = "your outstanding documents are not recevied" };
                //            }
                //        }
                //        else
                //        {
                if (!OQSD.ContainsKey("bDocumentsReceived"))
                {
                    OQSD["bDocumentsReceived"] = new CNV { sName = "bDocumentsReceived", sValue = "1" };
                }
                //        }
                //    }
                //}
                oQE = new QueryEngine();
                oWParams = new List<XIWhereParams>();
                oWP = new XIWhereParams();
                oWP.sField = "FKsPolicyNo";
                oWP.sOperator = "=";
                oWP.sValue = sPolicyNo;
                oWParams.Add(oWP);
                oWP = new XIWhereParams();
                oWP.sField = "dDate";
                oWP.sOperator = ">";
                oWP.sValue = dStartDate;
                oWParams.Add(oWP);
                oWP = new XIWhereParams();
                oWP.sField = "dDate";
                oWP.sOperator = "<=";
                oWP.sValue = dEndDate;
                oWParams.Add(oWP);
                oQE.AddBO("ClaimMidTerm_T", null, oWParams);
                CResult oresult = oQE.BuildQuery();
                if (oresult.bOK && oresult.oResult != null)
                {
                    var sSql = (string)oresult.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql;
                    oResult.sMessage = "ClaimMidTerm Query: " + oEE.sSQL;
                    oXID.SaveErrortoDB(oResult);
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        if (oBOIList.Count > 0)
                        {
                            if (!OQSD.ContainsKey("bNoClaims"))
                            {
                                OQSD["bNoClaims"] = new CNV { sName = "bNoClaims", sValue = "0" };
                            }
                            if (!OQSD.ContainsKey("sDeclineReason"))
                            {
                                OQSD["sDeclineReason"] = new CNV { sName = "sDeclineReason", sValue = "your policy have new claims" };
                            }
                            else if (OQSD.ContainsKey("sDeclineReason"))
                            {
                                OQSD["sDeclineReason"].sValue = "your policy have new claims";
                            }
                        }
                        else
                        {
                            if (!OQSD.ContainsKey("bNoClaims"))
                            {
                                OQSD["bNoClaims"] = new CNV { sName = "bNoClaims", sValue = "1" };
                            }
                        }
                    }
                    else
                    {
                        if (!OQSD.ContainsKey("bNoClaims"))
                        {
                            OQSD["bNoClaims"] = new CNV { sName = "bNoClaims", sValue = "1" };
                        }
                    }
                }
                if (!OQSD.ContainsKey("dDate"))
                {
                    OQSD["dDate"] = new CNV { sName = "dDate", sValue = DateTime.Now.ToString() };
                }
                if (!OQSD.ContainsKey("dInsurerCallDate"))
                {
                    OQSD["dInsurerCallDate"] = new CNV { sName = "dInsurerCallDate", sValue = DateTime.Now.ToString() };
                }
                if (!OQSD.ContainsKey("FKiACPolicyID"))
                {
                    OQSD["FKiACPolicyID"] = new CNV { sName = "FKiACPolicyID", sValue = PolicyID };
                }
                if (!OQSD.ContainsKey("rCancelRate"))
                {
                    OQSD["rCancelRate"] = new CNV { sName = "rCancelRate", sValue = "0" };
                }
                if (!OQSD.ContainsKey("rCancellationFee"))
                {
                    OQSD["rCancellationFee"] = new CNV { sName = "rCancellationFee", sValue = "0" };
                }
                if (!OQSD.ContainsKey("rCancelRateManual"))
                {
                    float rCancelRate = 0;
                    float rCancellationFee = 0;
                    if (float.TryParse(OQSD["rCancelRate"].sValue, out rCancelRate))
                    {
                    }
                    if (float.TryParse(OQSD["rCancellationFee"].sValue, out rCancellationFee))
                    {
                    }
                    var rCancelRateMAnual = rCancelRate + rCancellationFee;
                    OQSD["rCancelRateManual"] = new CNV { sName = "rCancelRateManual", sValue = rCancelRateMAnual.ToString() };
                }
                if (!OQSD.ContainsKey("FKsPolicyNo"))
                {
                    OQSD["FKsPolicyNo"] = new CNV { sName = "FKsPolicyNo", sValue = sPolicyNo };
                }
                if (!OQSD.ContainsKey("FKsUserID"))
                {
                    OQSD["FKsUserID"] = new CNV { sName = "FKsUserID", sValue = sUserID };
                }
                var sCancelPolicyID = "";
                List<CNV> oCancelNV = new List<CNV>();
                oCancelNV.Add(new CNV { sName = "FKiACPolicyID", sValue = PolicyID });
                oCancelNV.Add(new CNV { sName = "FkiAddonID", sValue = "0" });
                var oCancelPI = oIXI.BOI("CancelPolicy_T", "", "Create", oCancelNV);
                if (oCancelPI != null)
                {
                    sCancelPolicyID = oCancelPI.Attributes[oCancelPI.BOD.sPrimaryKey].sValue;
                }
                // Create Cancel policy
                var CancelPolicyData = oBO.BuildBoObject("CancelPolicy_T", "Create", OQSD, sCancelPolicyID);
                if (CancelPolicyData.xiStatus == 0 && CancelPolicyData.oResult != null)
                {
                    var result = (CResult)CancelPolicyData.oResult;
                    var oCancelPolicyI = (XIIBO)result.oResult;
                    if (oCancelPolicyI.Attributes["bNoClaims"].sValue == "1" && oCancelPolicyI.Attributes["bDocumentsReceived"].sValue == "1")
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "Details", null, null);
                    }
                    else
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", "Decline", null, null);
                    }
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|CancelPolicy_T.id}", oCancelPolicyI.Attributes[oCancelPolicyI.BOD.sPrimaryKey].sValue, null, null);
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQSInstanceID, iPolicyID);
            }
            return oResult;
        }
        public CResult ExecuteCancellationScript(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                int CancelPolicyID = 0;
                XIIXI oXIIXI = new XIIXI();
                CResult oresult = new CResult();
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iCancelPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string PolicyID = oParams.Where(m => m.sName.ToLower() == "iPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var ProductVersionID = "";
                if (int.TryParse(iID, out CancelPolicyID))
                { }
                if (int.TryParse(PolicyID, out iPolicyID))
                { }
                if (int.TryParse(iQSIID, out iQSInstanceID))
                { }
                XIIQS oQsInstance = oXIIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                string CancellationDate = oQsInstance.XIIValues("dDate");
                List<CNV> oNVs = new List<CNV>();
                oNVs.Add(new CNV { sName = "FKiACPolicyID", sValue = iPolicyID.ToString() });
                oNVs.Add(new CNV { sName = "iStatus", sValue = "10" });
                var oPolicyI = oXIIXI.BOI("ACPolicy_T", iPolicyID.ToString(), "Create");
                var sPolicyNo = "";
                if (oPolicyI != null && oPolicyI.Attributes.ContainsKey("sPolicyNo"))
                {
                    sPolicyNo = oPolicyI.Attributes["sPolicyNo"].sValue;
                }
                double iDays = 0;
                var PolicyVersion = oXIIXI.BOI("ACPolicyVersion_T", "", "", oNVs);
                if (PolicyVersion != null)
                {
                    ProductVersionID = PolicyVersion.Attributes["fkiproductversionid"].sValue;
                    if (PolicyVersion.Attributes.ContainsKey("dEffectiveFrom"))
                    {
                        if (!string.IsNullOrEmpty(PolicyVersion.Attributes["dEffectiveFrom"].sValue))
                        {
                            var DiffDays = Convert.ToDateTime(CancellationDate) - Convert.ToDateTime(PolicyVersion.Attributes["dEffectiveFrom"].sValue);
                            iDays = DiffDays.TotalDays;
                        }
                    }
                    if (iDays > 0)
                    {
                        double rTotalPremium = 0;
                        if (PolicyVersion.Attributes.ContainsKey("rTotalPremium"))
                        {
                            if (double.TryParse(PolicyVersion.Attributes["rTotalPremium"].sValue, out rTotalPremium))
                            {
                                PolicyVersion.Attributes["rUsedPremium"].sValue = String.Format("{0:0.00}", (rTotalPremium * iDays / 365));
                                PolicyVersion.Attributes["rUsedPremium"].bDirty = true;
                                PolicyVersion.Save(PolicyVersion);
                            }
                        }
                    }
                }
                if (ProductVersionID != null)
                {
                    XIInfraScript oScript = new XIInfraScript();
                    XID1Click PV1Click = new XID1Click();
                    var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Cancel Script");
                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> nParams = new List<CNV>();
                    CNV oNV = new CNV();
                    oNV.sName = "{XIP|ProductVersionID}";
                    oNV.sValue = ProductVersionID.ToString();
                    nParams.Add(oNV);
                    var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, nParams);
                    PV1Click.Query = oQuery;
                    PV1Click.Name = "ProductVersion_T";
                    var oOneClick = PV1Click.OneClick_Execute();
                    foreach (var item1 in oOneClick.Values)
                    {
                        var ProductQuery = "select * from product where id = " + item1.Attributes["product"].sValue;
                        PV1Click.Query = ProductQuery;
                        PV1Click.Name = "Product";
                        var oProductClick = PV1Click.OneClick_Execute().FirstOrDefault();
                        var PParams = new Dictionary<string, object>();
                        var sProductName = oProductClick.Value.Attributes["sname"].sValue;
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|Product.id}", oProductClick.Value.Attributes["id"].sValue, null, null);
                        //int iScriptID = 0;
                        Guid gScriptIDXIGUID = Guid.Empty;
                        if (Guid.TryParse(item1.Attributes["cancelscript"].sValue, out gScriptIDXIGUID))
                        {
                            oCResult.sMessage = "script started executing , script id:" + gScriptIDXIGUID.ToString();
                            oXID.SaveErrortoDB(oCResult);
                            //Script Excecution
                            var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, CancelPolicyID.ToString(), 0, sDataBase, 0, sProductName, item1.Attributes["ID"].sValue, null, oPolicyI.Attributes["dCurrentPolicyOnCover"].sValue, PolicyVersion.Attributes["rQuotePremium"].sValue, 0, sSessionID);
                            //if (ScriptResults.bOK && ScriptResults.oResult != null)
                            //{
                            //    var result = (string)ScriptResults.oResult;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult;
        }
        public CResult UpdateCancelPolicyDetails(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string CancelPolicyID = oParams.Where(m => m.sName.ToLower() == "iCancelPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPolicyID = string.Empty; string sUserid = string.Empty;
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                if (int.TryParse(iQSIID, out iInstanceID))
                { }

                XIIQS oQsInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                //XIIQS oQsInstance = oIXI.GetQuestionSetInstanceByID(0, iInsatnceID, null, 0, 0, null);
                //var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                var oCancelI = oIXI.BOI("CancelPolicy_T", CancelPolicyID, "Create");
                if (oCancelI.Attributes.ContainsKey("FKiACPolicyID"))
                {
                    if (int.TryParse(oCancelI.AttributeI("FKiACPolicyID").sValue, out iPolicyID))
                    { }
                }
                if (oCancelI.Attributes.ContainsKey("rCancellationFee") && oQsInstance.XIValues.ContainsKey("rCancellationFee"))
                {
                    oCancelI.Attributes["rCancellationFee"].sValue = oQsInstance.XIValues["rCancellationFee"].sValue;
                }
                if (oCancelI.Attributes.ContainsKey("rCancelRate") && oQsInstance.XIValues.ContainsKey("rCancelRate"))
                {
                    oCancelI.Attributes["rCancelRate"].sValue = oQsInstance.XIValues["rCancelRate"].sValue;
                }
                if (oCancelI.Attributes.ContainsKey("sClientOtherReason") && oQsInstance.XIValues.ContainsKey("Clientother"))
                {
                    oCancelI.Attributes["sClientOtherReason"].sValue = oQsInstance.XIValues["Clientother"].sValue;
                }
                if (oCancelI.Attributes.ContainsKey("FKiACPolicyID"))
                {
                    sPolicyID = oCancelI.AttributeI("FKiACPolicyID").sValue;
                }
                if (oCancelI.Attributes.ContainsKey("FKsUserID"))
                {
                    sUserid = oCancelI.AttributeI("FKsUserID").sValue;
                }
                oCancelI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);

                if (oCancelI.Attributes.ContainsKey("rCancelRateManual"))
                {
                    float rCancelRate = 0;
                    float rCancellationFee = 0;
                    if (float.TryParse(oCancelI.Attributes["rCancelRate"].sValue, out rCancelRate))
                    {
                    }
                    if (float.TryParse(oCancelI.Attributes["rCancellationFee"].sValue, out rCancellationFee))
                    {
                    }
                    var rCancelRateMAnual = rCancelRate - rCancellationFee;
                    oCancelI.Attributes["rCancelRateManual"].sValue = rCancelRateMAnual.ToString();
                }
                var ores = oBO.Save(oCancelI);
                var sPolicyNo = oCancelI.Attributes["FKsPolicyNo"].sValue;
                oResult.sMessage = "Policy Cancelled Successfully For this PolicyNo:" + sPolicyNo;
                oXID.SaveErrortoDB(oResult);
                if (iPolicyID > 0)
                {
                    //QueryEngine oQE = new QueryEngine();
                    //List<XIWhereParams> oWParams = new List<XIWhereParams>();
                    //XIWhereParams oWP = new XIWhereParams();
                    //oWP.sField = "sPolicyNo";
                    //oWP.sOperator = "=";
                    //oWP.sValue = sPolicyNo;
                    //oWParams.Add(oWP);
                    ////load requirement template definition of productid and FKiTransactionTypeID
                    //oQE.AddBO("ACPolicy_T", "Create", oWParams);
                    //CResult oCresult = oQE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    //if (oCresult.bOK && oCresult.oResult != null)
                    //{
                    //var sSql = (string)oCresult.oResult;
                    //ExecutionEngine oEE = new ExecutionEngine();
                    //oEE.XIDataSource = oQE.XIDataSource;
                    //oEE.sSQL = sSql;
                    //var oQResult = oEE.Execute();
                    var oPolicyI = oIXI.BOI("ACPolicy_T", iPolicyID.ToString(), "Create");
                    //if (oQResult.bOK && oQResult.oResult != null)
                    //{
                    //    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                    //    var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    //    var oBOD = oQE.QParams.FirstOrDefault().BOD;
                    //    oBOIList.ForEach(x => x.BOD = oBOD);
                    if (oPolicyI != null && oPolicyI.Attributes.ContainsKey("iStatus"))
                    {
                        // XIIBO oBO = new XIIBO();
                        //if (instance.Attributes.ContainsKey("iStatus"))
                        //{
                        oPolicyI.Attributes["dtCancelled"].sValue = oQsInstance.XIValues["dDate"].sValue;
                        oPolicyI.Attributes["iStatus"].sValue = oPolicyI.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Cancelled").Select(m => m.sValues).FirstOrDefault();
                        oPolicyI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                        // Change Policy Status to Cancelled
                        var UpdatedPolicyData = oBO.Save(oPolicyI);
                        if (UpdatedPolicyData.bOK && UpdatedPolicyData.oResult != null)
                        {
                            oResult.sMessage = "QSInstanceID: " + iInstanceID + " _PolicyID: " + iPolicyID + " :Changed Policy Status to Cancelled For this PolicyID:" + oPolicyI.Attributes[oPolicyI.BOD.sPrimaryKey].sValue;
                            oXID.SaveErrortoDB(oResult, iInstanceID, iPolicyID);
                        }
                        //}
                        //if (instance.Attributes.ContainsKey("FKiProductID"))
                        //{
                        //    sProductID = instance.AttributeI("FKiProductID").sValue;
                        //}
                    }
                    //}
                    //}
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}", "200", null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iUserID}", sUserid, null, null);
                    oParams.Add(new CNV { sName = "iACPolicyID", sValue = sPolicyID });
                    oParams.Add(new CNV { sName = "iProductID", sValue = sProductID });

                    var oBOI = oIXI.BOI("ACPolicy_T", oCancelI.AttributeI("FKiACPolicyID").sValue);
                    JournalTransactions oJTransactions = new JournalTransactions();
                    XIIBO oTransaction = new XIIBO();
                    oTransaction.SetAttribute("zBaseValue", oCancelI.AttributeI("rCancelRateManual").doValue.ToString());
                    oTransaction.SetAttribute("FKiACPolicyID", oBOI.AttributeI("id").sValue);
                    oTransaction.SetAttribute("FKiSupplierID", oBOI.AttributeI("FKiSupplierID").sValue);
                    oTransaction.SetAttribute("sTransCode", "RETP");
                    oTransaction.SetAttribute("FKsWhoID", sUserID);
                    var RETPTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                    oResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : Cancel Transaction Created Successfully" });
                    var oCResult = GeneratePolicyDocuments(oParams);
                    if (oCResult.bOK && oCResult.oResult != null)
                    {
                        oResult.oTraceStack.Add(new CNV { sName = "CancelPolicy Documents", sValue = "Success :CancelPolicy Documents Generated Successfully" });
                    }
                    var sTransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iTransactionID}");
                    if (!string.IsNullOrEmpty(sTransactionType) && sTransactionType == "200")
                    {
                        if (oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).FirstOrDefault() != null)
                        {
                            oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).FirstOrDefault().sValue = "Cancellation Completed";
                        }
                        else
                        {
                            oParams.Add(new CNV { sName = "sXiLink", sValue = "Cancellation Completed" });
                        }
                        var oNotifications = InsertNotification(oParams);
                        var oNotificationsResult = oNotifications.oTraceStack.ToList();
                        foreach (var oresult in oNotificationsResult)
                        {
                            oCResult.oTraceStack.Add(oresult);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " _PolicyID: " + iPolicyID + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iInstanceID, iPolicyID);
            }
            return oResult;
        }
        public CResult UpdateQuotePrice(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iInstanceID = 0;
            try
            {
                XIIXI oXIXI = new XIIXI();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(iID, out QSIGUID);
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    XIIBO oBO = new XIIBO();
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    var rQuotePrice = oQSInstance.XIIValues("rOverrideQuote");
                    var sAdmin = oQSInstance.XIIValues("rOverrideAdmin");
                    var sOverrideInsurerCharge = oQSInstance.XIIValues("rOverrideInsurerCharge");
                    var sOverrideCommision = oQSInstance.XIIValues("rOverrideCommision");
                    double rOverrideAdmin = 0;
                    double rOverrideCommision = 0;
                    double rQuote = 0;
                    double rAdmin = 0;
                    if (double.TryParse(sAdmin, out rOverrideAdmin)) { }
                    if (double.TryParse(sOverrideCommision, out rOverrideCommision)) { }
                    if (double.TryParse(rQuotePrice, out rQuote)) { }
                    var sCode = oQSInstance.XIIValues("sCode");
                    var sInsurerRefCode = oQSInstance.XIIValues("sInsurerRefCode");
                    var oQuoteI = oXIXI.BOI("Aggregations", iQuoteID, "");
                    if (oQuoteI != null && oQuoteI.Attributes != null)
                    {
                        XIAPI oXIAPI = new XIAPI();
                        var oProductVersionI = oIXI.BOI("ProductVersion_T", oQuoteI.Attributes["FKiProductVersionID"].sValue);
                        int iProductID = 0;
                        string ProductID = oProductVersionI.Attributes["FKiProductID"].sValue;
                        if (int.TryParse(ProductID, out iProductID)) { }
                        double rFinalQuote = 0;
                        double rPFAmount = 0;
                        double rMonthlyTotal = 0;
                        double rPaymentCharge = 0; double rInsurerCharge = 0;
                        if (double.TryParse(oQuoteI.Attributes["rPaymentCharge"].sValue, out rPaymentCharge)) { }
                        //if (double.TryParse(oQuoteI.Attributes["rInsurerCharge"].sValue, out rInsurerCharge)) { }
                        if (double.TryParse(sOverrideInsurerCharge, out rInsurerCharge)) { }
                        if (double.TryParse(oQuoteI.Attributes["zDefaultAdmin"].sValue, out rAdmin)) { }
                        rFinalQuote = rQuote + rPaymentCharge + rInsurerCharge + rOverrideAdmin;
                        oQuoteI.Attributes["zDefaultAdmin"].sValue = String.Format("{0:0.00}", rOverrideAdmin);
                        oQuoteI.Attributes["zDefaultAdmin"].bDirty = true;
                        oQuoteI.Attributes["zCommission"].sValue = String.Format("{0:0.00}", rOverrideCommision);
                        oQuoteI.Attributes["zCommission"].bDirty = true;
                        oQuoteI.SetAttribute("rInsurerCharge", String.Format("{0:0.00}", rInsurerCharge));
                        var MinimumDeposit = oXIAPI.GetMinimumDepostAmount(rPaymentCharge, rInsurerCharge, rFinalQuote, rAdmin, sGUID, iID, iProductID, 0, 0);
                        double rMinDeposit = 0;
                        if (double.TryParse(MinimumDeposit, out rMinDeposit)) { }
                        oQuoteI.Attributes["zDefaultDeposit"].sValue = MinimumDeposit;
                        oQuoteI.Attributes["zDefaultDeposit"].bDirty = true;
                        var PFSchemeID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}");
                        int iPFSchemeID = 0;
                        if (int.TryParse(PFSchemeID, out iPFSchemeID))
                        { }
                        var MonthlyAmount = oXIAPI.GetMonthlyPremiumAmount(rFinalQuote, rMinDeposit, iProductID, 0, 0, iPFSchemeID);
                        rMonthlyTotal = (MonthlyAmount * 10) + rMinDeposit;
                        oQuoteI.Attributes["rMonthlyPrice"].sValue = String.Format("{0:0.00}", MonthlyAmount);
                        oQuoteI.Attributes["rMonthlyPrice"].bDirty = true;
                        oQuoteI.Attributes["rMonthlyTotal"].sValue = String.Format("{0:0.00}", rMonthlyTotal);
                        oQuoteI.Attributes["rMonthlyTotal"].bDirty = true;
                        oQuoteI.Attributes["rPrice"].sValue = String.Format("{0:0.00}", rQuote);
                        oQuoteI.Attributes["rPrice"].bDirty = true;
                        oQuoteI.Attributes["rFinalQuote"].sValue = String.Format("{0:0.00}", rFinalQuote);
                        oQuoteI.Attributes["rFinalQuote"].bDirty = true;
                        rPFAmount = rMonthlyTotal - rMinDeposit;
                        oQuoteI.Attributes["rPremiumFinanceAmount"].sValue = String.Format("{0:0.00}", rPFAmount);
                        oQuoteI.Attributes["rPremiumFinanceAmount"].bDirty = true;
                        if (oQuoteI.Attributes.ContainsKey("sVerificationCode"))
                        {
                            oQuoteI.Attributes["sVerificationCode"].sValue = sCode;
                            oQuoteI.Attributes["sVerificationCode"].bDirty = true;
                        }
                        if (oQuoteI.Attributes.ContainsKey("sInsurerRefCode"))
                        {
                            oQuoteI.Attributes["sInsurerRefCode"].sValue = sInsurerRefCode;
                            oQuoteI.Attributes["sInsurerRefCode"].bDirty = true;
                        }
                        oQuoteI.Attributes["rSubTotal"].sValue = String.Format("{0:0.00}", (rQuote + rInsurerCharge));
                        oQuoteI.Attributes["rSubTotal"].bDirty = true;
                        oQuoteI.Attributes["ID"].bDirty = true;
                        //oQuoteI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                        oBO.Save(oQuoteI);
                    }
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iInstanceID);
            }
            return oResult;
        }
        public CResult MakeaChange(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0; int iInstanceID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGroupName = oParams.Where(m => m.sName.ToLower() == "sGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTemplateName = oParams.Where(m => m.sName.ToLower() == "sTemplateName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDriverInstanceID = oCache.Get_ParamVal(sSessionID, sGUID, null, "-MCADDASID");
                string sUserID = oParams.Where(x => x.sName.ToLower() == "iUserID".ToLower()).Select(x => x.sValue).FirstOrDefault();
                string sSuccessMessage = oParams.Where(x => x.sName.ToLower() == "SuccessMessage".ToLower()).Select(x => x.sValue).FirstOrDefault();
                string sXiLink = oParams.Where(x => x.sName.ToLower() == "sXiLink".ToLower()).Select(x => x.sValue).FirstOrDefault();
                string sModifications = oParams.Where(x => x.sName.ToLower() == "Modifications".ToLower()).Select(x => x.sValue).FirstOrDefault();
                //for notifications

                //var oXiLink = (XILink)oCache.GetObjectFromCache(XIConstant.CacheXILink, "Policy Documents Parameters", "");
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sStructureName = oParams.Where(m => m.sName.ToLower() == "Structure Name".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //int iUserID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                //int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                //string sOrgName = oParams.Where(m => m.sName.ToLower() == "sOrgName".ToLower()).Select(m => m.sValue).FirstOrDefault();

                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> nParms = new List<CNV>();
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                string FKsCategoryID = oGUIDParams.NMyInstance.Where(m => m.Key == "{XIP|FKiCategoryID}").Select(m => m.Value.sValue).FirstOrDefault();

                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iQSInstanceID = Convert.ToInt32(iID);
                }
                XIIXI oXII = new XIIXI(); XIIBO oBOI = new XIIBO();
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iQSInstanceID);
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });
                if (!string.IsNullOrEmpty(sDriverInstanceID))
                {
                    oBOI = oXII.BOI("MakeAChange_T", sDriverInstanceID);
                    //oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "MakeAChange_T", null);
                    if (oBOI != null)
                    {
                        if (oBOI.Attributes.ContainsKey("FKiACPolicyID"))
                        {
                            iInstanceID = Convert.ToInt32(OQSD["FKiACPolicyID"].sValue);
                            oBOI.Attributes["FKiACPolicyID"] = new XIIAttribute { sName = "FKiACPolicyID", sValue = OQSD["FKiACPolicyID"].sValue, bDirty = true };
                        }
                        if (oBOI.Attributes.ContainsKey("iAnyClaimsMC"))
                        {
                            oBOI.Attributes["iAnyClaimsMC"] = new XIIAttribute { sName = "iAnyClaimsMC", sValue = OQSD["iAnyClaimsMC"].sValue, bDirty = true };
                        }
                        if (oBOI.Attributes.ContainsKey("iAnyConvictionsMC"))
                        {
                            oBOI.Attributes["iAnyConvictionsMC"] = new XIIAttribute { sName = "iAnyConvictionsMC", sValue = OQSD["iAnyConvictionsMC"].sValue, bDirty = true };
                        }
                        if (oBOI.Attributes.ContainsKey("iMedicalConditionsMC"))
                        {
                            oBOI.Attributes["iMedicalConditionsMC"] = new XIIAttribute { sName = "iMedicalConditionsMC", sValue = OQSD["iMedicalConditionsMC"].sValue, bDirty = true };
                        }
                        if (oBOI.Attributes.ContainsKey("iSecondaryOccupationMC"))
                        {
                            oBOI.Attributes["iSecondaryOccupationMC"] = new XIIAttribute { sName = "iSecondaryOccupationMC", sValue = OQSD["iSecondaryOccupationMC"].sValue, bDirty = true };
                        }
                        if (oBOI.Attributes.ContainsKey("sRegistrationNumber"))
                        {
                            oBOI.Attributes["sRegistrationNumber"] = new XIIAttribute { sName = "sRegistrationNumber", sValue = OQSD["sRegistrationNumber"].sValue, bDirty = true };
                        }
                    }
                    var MakeaChangeData = oBOI.Save(oBOI);
                    if (MakeaChangeData.xiStatus == 0 && MakeaChangeData.oResult != null)
                    {
                        var oMakeaChangeData = (XIIBO)MakeaChangeData.oResult;
                        Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                        dictmsg.Add("Success:UserName", "Request submitted successfully");
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                        oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                    }
                }
                else
                {
                    if (OQSD.ContainsKey("FKiACPolicyID"))
                    {
                        iInstanceID = Convert.ToInt32(OQSD["FKiACPolicyID"].sValue);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", iInstanceID.ToString(), null, null);
                    }
                    if (!OQSD.ContainsKey("FKiQSInstanceID"))
                    {
                        OQSD["FKiQSInstanceID"] = new CNV { sName = "FKiQSInstanceID", sValue = iQSInstanceID.ToString() };
                    }
                    if (!OQSD.ContainsKey("FKiCategoryID"))
                    {
                        OQSD["FKiCategoryID"] = new CNV { sName = "FKiCategoryID", sValue = FKsCategoryID };
                    }
                    if (!OQSD.ContainsKey("iStatus"))
                    {
                        OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "10" };
                    }
                    if (OQSD.ContainsKey("iTitle"))
                    {
                        var sValue = OQSD["iTitle"].sValue;
                        OQSD["iTitleMC"] = new CNV { sName = "iTitleMC", sValue = sValue };
                    }
                    if (OQSD.ContainsKey("sFirstName"))
                    {
                        var sValue = OQSD["sFirstName"].sValue;
                        OQSD["sFirstNameMC"] = new CNV { sName = "sFirstNameMC", sValue = sValue };
                    }
                    if (OQSD.ContainsKey("sLastName"))
                    {
                        var sValue = OQSD["sLastName"].sValue;
                        OQSD["sLastNameMC"] = new CNV { sName = "sLastNameMC", sValue = sValue };
                    }
                    if (OQSD.ContainsKey("dDOBMC"))
                    {
                        var sValue = OQSD["dDOBMC"].sValue;
                        OQSD["dDOB"] = new CNV { sName = "dDOB", sValue = sValue };
                    }
                    //if (oBOI == null)
                    //{

                    var MakeaChangeData = oBOI.BuildBoObject("MakeAChange_T", sGroupName, OQSD, "");
                    if (MakeaChangeData.xiStatus == 0 && MakeaChangeData.oResult != null)
                    {
                        var oMakeaChangeData = (CResult)MakeaChangeData.oResult;
                        Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                        dictmsg.Add("Success:UserName", sSuccessMessage);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                    }
                    if (!string.IsNullOrEmpty(sModifications))
                    {
                        var Modification = string.Empty;
                        var ModificationsList = sModifications.Split(',').ToList();
                        foreach (var item in ModificationsList)
                        {
                            if (OQSD.Any(x => x.Key == item && x.Value.sValue == "true"))
                                Modification += item + ",";
                        }
                        //sVehicleModificationsDescription
                        //MakeaChangeData.oResult
                        var BOI = (XIIBO)((CResult)MakeaChangeData.oResult).oResult;
                        BOI.SetAttribute("sVehicleModificationsDescription", Modification.Substring(0, Modification.Length - 1));
                        BOI.Save(BOI);
                    }
                }
                oCache.Set_ParamVal(sSessionID, sGUID, null, "-iUserID", sUserID, null, null);
                //oParams.Add(new CNV { sName = "sXiLink", sValue = "MakeaChange Notfications Xilink" });
                //if (!string.IsNullOrEmpty(sTemplateName))
                //{
                if (oParams != null && oParams.Count() > 0)
                {
                    //CNV oNV = new CNV();
                    //oNV.sName = "sInstanceID";
                    //oNV.sValue = iInstanceID.ToString();
                    //oParams.Add(oNV);
                    var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "NextStep");
                    oParams.Remove(stuffToRemove);
                }
                InsertNotification(oParams);
                var oPolicyI = oXII.BOI("ACPolicy_T", iInstanceID.ToString(), "Create");
                if (oPolicyI != null)
                {
                    var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "MTARequest", "0");
                    if (oContentDef != null && oContentDef.Count() > 0)
                    {
                        XIContentEditors oDocumentContent = new XIContentEditors();
                        XIInfraEmail oEmail = new XIInfraEmail();
                        XIIBO oPolicyBOI = new XIIBO();
                        oPolicyBOI.BOD = oPolicyI.BOD;
                        XIBOInstance oBOIInstance = new XIBOInstance();
                        oBOIInstance.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                        oPolicyBOI.SetAttribute("sPolicyNo", oPolicyI.Attributes["sPolicyNo"].sValue);
                        oPolicyBOI.SetAttribute("sName", oPolicyI.Attributes["sName"].sValue);
                        oPolicyBOI.SetAttribute("FKiProductID", oPolicyI.Attributes["FKiProductID"].sValue);
                        oPolicyBOI.SetAttribute("FKiCustomerID", oPolicyI.Attributes["FKiCustomerID"].sValue);
                        List<XIIBO> oBOIList = new List<XIIBO>();
                        //oBOI.Attributes = oBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => x.Value);
                        oPolicyBOI.XIIValues = oPolicyBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => new XIIValue { sValue = x.Value.sValue });
                        oBOIList.Add(oPolicyBOI);
                        oBOIInstance.oStructureInstance["ACPolicy_T"] = oBOIList;
                        oDocumentContent = oContentDef.FirstOrDefault();
                        //Get Document Template htmlcontent with dynamic data
                        XIContentEditors oConent = new XIContentEditors();
                        oCResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iInstanceID + "] - Template Merging Started";
                        oXID.SaveErrortoDB(oCResult, iQSInstanceID, iInstanceID);
                        oConent.sSessionID = "";
                        //var oRes = oConent.MergeTemplateContent(oDocumentContent, oBOIInstance);
                        var oRes = oConent.MergeContentTemplate(oDocumentContent, oBOIInstance);
                        if (!oRes.bOK)
                        {
                            return null;
                        }
                        oCResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iInstanceID + "] - Template Merged Sucessfully";
                        oXID.SaveErrortoDB(oCResult, iQSInstanceID, iInstanceID);
                        string sContent = (string)oRes.oResult;
                        oEmail.EmailID = oPolicyI.Attributes["sEmail"].sValue;
                        oEmail.sSubject = oDocumentContent.sSubject;
                        oEmail.Bcc = oDocumentContent.sBCC;
                        oEmail.cc = oDocumentContent.sCC;
                        oEmail.From = oDocumentContent.sFrom;
                        oEmail.iServerID = oDocumentContent.FkiServerID;
                        oEmail.Sendmail(oQSI.QSDefinition.FKiOrgID, sContent, null, 0, XIConstant.Email_MTARequest, 0, null, 0, oDocumentContent.bIsBCCOnly);//send mail with attachment
                        oCResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iInstanceID + "] - Mail send successfully";
                        oXID.SaveErrortoDB(oCResult, iQSInstanceID, iInstanceID);
                        oCResult.oTraceStack.Add(new CNV { sName = "Mail send successfully", sValue = "Mail send successfully" });
                    }
                }
                //}
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MakeaChange" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iInstanceID);
            }
            return oCResult;
        }
        public CResult MakeaChangeDriverAutoSave(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGroupName = oParams.Where(m => m.sName.ToLower() == "sGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> nParms = new List<CNV>();
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                string FKsCategoryID = oGUIDParams.NMyInstance.Where(m => m.Key == "{XIP|FKiCategoryID}").Select(m => m.Value.sValue).FirstOrDefault();
                var oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "MakeAChange_T", null);
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iQSInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iQSInstanceID))
                { }
                XIIXI oXII = new XIIXI();
                // XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iQSInstanceID);

                //XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID);
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                //OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });
                if (!OQSD.ContainsKey("FKiQSInstanceID"))
                {
                    OQSD["FKiQSInstanceID"] = new CNV { sName = "FKiQSInstanceID", sValue = iQSInstanceID.ToString() };
                }
                if (!OQSD.ContainsKey("FKiCategoryID"))
                {
                    OQSD["FKiCategoryID"] = new CNV { sName = "FKiCategoryID", sValue = FKsCategoryID };
                }
                if (!OQSD.ContainsKey("iStatus"))
                {
                    OQSD["iStatus"] = new CNV { sName = "iStatus", sValue = "10" };
                }
                //if (oBOI == null)
                //{
                XIIBO oBOI = new XIIBO();
                var MakeaChangeData = oBOI.BuildBoObject("MakeAChange_T", sGroupName, OQSD, "");
                if (MakeaChangeData.xiStatus == 0 && MakeaChangeData.oResult != null)
                {
                    var oMakeaChangeData = (CResult)MakeaChangeData.oResult;
                    var oBOInstance = (XIIBO)oMakeaChangeData.oResult;
                    oBOInstance.BOD = oBOD;
                    var iMCDriverID = oBOInstance.Attributes[oBOInstance.BOD.sPrimaryKey.ToLower()].sValue;
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "-MCADDASID", iMCDriverID, null, null);
                }
                //}
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MakeaChange" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }
        public CResult InsertNotification(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                XIInfraCache oCache = new XIInfraCache(); string sUserID = string.Empty;
                //var sSessionID = HttpContext.Current.Session.SessionID;
                string sXiLinkName = oParams.Where(m => m.sName.ToLower() == "sXiLink".ToLower()).Select(m => m.sValue).FirstOrDefault();

                //sBOName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sBOName".ToLower()).Select(m => m.Value).FirstOrDefault();
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTemplateName = oParams.Where(m => m.sName.ToLower() == "sTemplateName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStatus = oParams.Where(m => m.sName.ToLower() == "iStatus".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "sInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                List<CNV> nParms = new List<CNV>();
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                if (string.IsNullOrEmpty(sInstanceID))
                {
                    sInstanceID = nParms.Where(m => m.sName == "{XIP|" + sBOName + ".id}").Select(m => m.sValue).FirstOrDefault();
                    //sUserID = nParms.Where(m => m.sName == "{XIP|FKiUserID}").Select(m => m.sValue).FirstOrDefault();
                    sUserID = nParms.Where(m => m.sName == "{XIP|iUserID}").Select(m => m.sValue).FirstOrDefault();
                }
                else
                {
                    sUserID = oParams.Where(m => m.sName == "iUserID").Select(m => m.sValue).FirstOrDefault();
                }
                //sending notification
                if (!string.IsNullOrEmpty(sXiLinkName))
                {
                    var oXiLink = (XILink)oCache.GetObjectFromCache(XIConstant.CacheXILink, sXiLinkName, "");
                    sTemplateName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sTemplateName".ToLower()).Select(m => m.Value).FirstOrDefault();
                    sBOName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sBOName".ToLower()).Select(m => m.Value).FirstOrDefault();
                    if (string.IsNullOrEmpty(sInstanceID))
                    {
                        sInstanceID = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "iInstanceID".ToLower()).Select(m => m.Value).FirstOrDefault();
                        sInstanceID = nParms.Where(m => m.sName == sInstanceID).Select(m => m.sValue).FirstOrDefault();
                    }
                    sStructureName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sStructureName".ToLower()).Select(m => m.Value).FirstOrDefault();
                    sStatus = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "iStatus".ToLower()).Select(m => m.Value).FirstOrDefault();
                    sUserID = string.IsNullOrEmpty(sUserID) ? oCache.Get_ParamVal(sSessionID, sGUID, null, "-iUserID") : sUserID;
                }
                //string sNotificationTemplateID = "157";
                //string sNotificationTemplateName = "Welcome";
                XIContentEditors oConent = new XIContentEditors();
                XIIXI oXII = new XIIXI();
                XIBOInstance oBOIInstance = new XIBOInstance();
                if (!string.IsNullOrEmpty(sBOName) && !string.IsNullOrEmpty(sInstanceID) && !string.IsNullOrEmpty(sStructureName))
                {
                    oBOIInstance = oXII.BOI(sBOName, sInstanceID).Structure(sStructureName).XILoad();
                }
                if (!string.IsNullOrEmpty(sTemplateName))
                {
                    var oNotificationContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sTemplateName, "0");
                    if (oNotificationContentDef != null && oNotificationContentDef.Count() > 0)
                    {
                        var oNotificationContent = oNotificationContentDef.FirstOrDefault();
                        oCResult.oTraceStack.Add(new CNV { sName = "Notification Template Merging started", sValue = "Notification Template Merging started,TemplateName:" + sTemplateName + "" });
                        var oNotificationRes = oConent.MergeContentTemplate(oNotificationContent, oBOIInstance);
                        oCResult.oTraceStack.Add(new CNV { sName = "Notification Template Merging Completed", sValue = "Notification Template Merging Completed,TemplateName:" + sTemplateName + "" });

                        if (oNotificationRes.bOK && oNotificationRes.oResult != null)
                        {
                            string sResult = (string)oNotificationRes.oResult;
                            XIInfraNotifications oNotifications = new XIInfraNotifications();
                            //oNotifications.sSubject = oNotificationContent.sSubject;
                            //oNotifications.sMessage = (string)oNotificationRes.oResult;
                            //oNotifications.sInstanceID = sInstanceID;
                            ////oNotifications.sOrgName = sOrgName;
                            //oNotifications.iOrgID = iOrgID;
                            oNotifications.iStatus = Convert.ToInt32(sStatus);
                            oNotifications.Create(sUserID, oNotificationContent.Name, oNotifications.iDocumentID.ToString(), oNotificationContent.sSubject, sResult, sInstanceID, iOrgID.ToString());
                            oCResult.oTraceStack.Add(new CNV { sName = "Notification Saving", sValue = "Notification Inserted Successfully" });
                        }
                    }
                }
                if (!string.IsNullOrEmpty(sFailureStep))
                {
                    Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                    dictmsg.Add("Success:UserName", "Notification Send successfully");
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                    oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MakeaChange" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        public CResult UpdateQuoteDetails(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string ProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                var oBOI = oIXI.BOI("Aggregations", iQuoteID, "Create");
                iID = oBOI.AttributeI("FKiQSInstanceIDXIGUID").sValue;
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(iID, out QSIGUID);
                int iProductID = 0;

                if (string.IsNullOrEmpty(ProductID))
                {
                    var oProductVersionI = oIXI.BOI("ProductVersion_T", oBOI.AttributeI("FKiProductVersionID").sValue);
                    if (oProductVersionI != null)
                    {
                        ProductID = oProductVersionI.AttributeI("FKiProductID").sValue;
                    }
                }
                if (int.TryParse(ProductID, out iProductID))
                {
                }
                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iID.ToString());
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    //var iPaymentType = oQSInstance.XIIValues("iClientPayment");
                    QueryEngine oQE1 = new QueryEngine();
                    List<XIWhereParams> oWParams1 = new List<XIWhereParams>();
                    List<SqlParameter> oSQLParams = new List<SqlParameter>();
                    List<CNV> oWhrParams = new List<CNV>();
                    XIIBO oBO = new XIIBO();
                    oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = QSIGUID.ToString() });
                    oWParams1.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = QSIGUID.ToString() });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = QSIGUID.ToString() });
                    oWParams1.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    oWParams1.Add(new XIWhereParams { sField = "iBuyStatus", sOperator = "=", sValue = "10" });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@iBuyStatus", Value = "10" });
                    oQE1.AddBO("Aggregations", "Create", oWParams1);
                    CResult oCresult1 = oQE1.BuildQuery();
                    if (oCresult1.bOK && oCresult1.oResult != null)
                    {
                        var sSql1 = (string)oCresult1.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE1.XIDataSource;
                        oEE.sSQL = sSql1;
                        oEE.SqlParams = oSQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD1 = oQE1.QParams.FirstOrDefault().BOD;
                            oBOIList1.ForEach(x => x.BOD = oBOD1);
                            foreach (var oQuote in oBOIList1)
                            {
                                oQuote.Attributes["iBuyStatus"].sValue = "0";
                                oQuote.Attributes["iBuyStatus"].bDirty = true;
                                oQuote.Attributes["id"].bDirty = true;
                                oBO.Save(oQuote);
                            }
                        }
                    }
                    var oProductI = oIXI.BOI("Product", ProductID);
                    float rAddonTotal = 0;
                    float rAddonAdminTotal = 0;
                    float rTotal = 0;
                    QueryEngine oQE = new QueryEngine();
                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                    List<SqlParameter> SQLParams = new List<SqlParameter>();
                    XIWhereParams oWP = new XIWhereParams();
                    oWP.sField = "FKiQSInstanceIDXIGUID";
                    oWP.sOperator = "=";
                    oWP.sValue = iID;
                    oWParams.Add(oWP);
                    SQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = iID });
                    XIWhereParams oWP1 = new XIWhereParams();
                    oWP1.sField = "iStatus";
                    oWP1.sOperator = "=";
                    oWP1.sValue = "0";
                    oWParams.Add(oWP1);
                    SQLParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "0" });
                    XIWhereParams oWP2 = new XIWhereParams();
                    oWP2.sField = "bIsConverted";
                    oWP2.sOperator = "=";
                    oWP2.sValue = "False";
                    oWParams.Add(oWP2);
                    SQLParams.Add(new SqlParameter { ParameterName = "@bIsConverted", Value = "False" });
                    oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                    SQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    //load requirement template definition of productid and FKiTransactionTypeID
                    oQE.AddBO("ACPurchase_T", "Create", oWParams);
                    CResult oCresult = oQE.BuildQuery();
                    //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query build successfully" });
                    if (oCresult.bOK && oCresult.oResult != null)
                    {
                        var sSql = (string)oCresult.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE.XIDataSource;
                        oEE.sSQL = sSql;
                        oEE.SqlParams = SQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "BO Instance query executed successfully" });
                            var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD = oQE.QParams.FirstOrDefault().BOD;
                            oBOIList.ForEach(x => x.BOD = oBOD);
                            foreach (var instance in oBOIList)
                            {
                                if (instance.Attributes.ContainsKey("rPremiumOverride"))
                                {
                                    var AddonPrice = instance.Attributes["rPremiumOverride"].sValue;
                                    var AddonAdminPrice = instance.Attributes["rAdmin"].sValue;
                                    float rAddon = 0;
                                    if (float.TryParse(AddonPrice, out rAddon))
                                    {
                                        rAddonTotal += rAddon;
                                    }
                                    float rAddonAdmin = 0;
                                    if (float.TryParse(AddonAdminPrice, out rAddonAdmin))
                                    {
                                        rAddonAdminTotal += rAddonAdmin;
                                    }
                                }
                            }
                        }
                    }
                    float rAdmin = 0;
                    float rDefaultDeposit = 0;
                    float rPFAmount = 0;
                    float rPaymentCharge = 0;
                    float rInsurerCharge = 0;
                    float rFinalQuote = 0;
                    // float rQuotePremium = 0;
                    if (float.TryParse(oBOI.Attributes["zDefaultAdmin"].sValue, out rAdmin))
                    {
                    }
                    if (float.TryParse(oBOI.Attributes["rPrice"].sValue, out rFinalQuote))
                    {
                    }
                    double rTotalAdmin = rAdmin + rAddonAdminTotal;
                    if (float.TryParse(oProductI.Attributes["rPaymentCharge"].sValue, out rPaymentCharge))
                    {
                    }
                    if (float.TryParse(oProductI.Attributes["rInsurerCharge"].sValue, out rInsurerCharge))
                    {
                    }
                    rFinalQuote += rAdmin + rPaymentCharge + rInsurerCharge;
                    rTotal += rFinalQuote + rAddonTotal + rAddonAdminTotal;
                    XIAPI oXIAPI = new XIAPI();
                    var obj = oXIAPI.GetMinimumDepostAmount(rPaymentCharge, rInsurerCharge, rFinalQuote, rAdmin, sGUID, iID, iProductID, rAddonAdminTotal, rAddonTotal);
                    if (float.TryParse(obj, out rDefaultDeposit))
                    { }
                    var PFSchemeID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}");
                    int iPFSchemeID = 0;
                    if (int.TryParse(PFSchemeID, out iPFSchemeID))
                    { }
                    var MonthlyAmount = oXIAPI.GetMonthlyPremiumAmount(rFinalQuote, rDefaultDeposit, iProductID, rAddonAdminTotal, rAddonTotal, iPFSchemeID);
                    double rMonthlyTotal = (MonthlyAmount * 10) + rDefaultDeposit;
                    if (oBOI.Attributes.ContainsKey("rMonthlyPrice"))
                    {
                        oBOI.Attributes["rMonthlyPrice"].sValue = String.Format("{0:0.00}", MonthlyAmount);
                    }
                    if (oBOI.Attributes.ContainsKey("rMonthlyTotal"))
                    {
                        oBOI.Attributes["rMonthlyTotal"].sValue = String.Format("{0:0.00}", rMonthlyTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("rAddonAdmin"))
                    {
                        oBOI.Attributes["rAddonAdmin"].sValue = String.Format("{0:0.00}", rAddonAdminTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("rPaymentCharge"))
                    {
                        oBOI.Attributes["rPaymentCharge"].sValue = String.Format("{0:0.00}", rPaymentCharge);
                    }
                    if (oBOI.Attributes.ContainsKey("rInsurerCharge"))
                    {
                        oBOI.Attributes["rInsurerCharge"].sValue = String.Format("{0:0.00}", rInsurerCharge);
                    }
                    if (oBOI.Attributes.ContainsKey("rTotalAdmin"))
                    {
                        oBOI.Attributes["rTotalAdmin"].sValue = String.Format("{0:0.00}", rTotalAdmin);
                    }
                    if (oBOI.Attributes.ContainsKey("zDefaultDeposit"))
                    {
                        oBOI.Attributes["zDefaultDeposit"].sValue = String.Format("{0:0.00}", rDefaultDeposit);
                    }
                    if (oBOI.Attributes.ContainsKey("rAddonPrice"))
                    {
                        oBOI.Attributes["rAddonPrice"].sValue = String.Format("{0:0.00}", rAddonTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("rtotal"))
                    {
                        oBOI.Attributes["rtotal"].sValue = String.Format("{0:0.00}", rTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("rpremiumfinanceamount"))
                    {
                        oBOI.Attributes["rpremiumfinanceamount"].sValue = String.Format("{0:0.00}", rPFAmount);
                    }
                    if (oBOI.Attributes.ContainsKey("rFinalPremium"))
                    {
                        oBOI.Attributes["rFinalPremium"].sValue = String.Format("{0:0.00}", rTotal);
                    }
                    if (oBOI.Attributes.ContainsKey("iBuyStatus"))
                    {
                        oBOI.Attributes["iBuyStatus"].sValue = "10";
                    }
                    if (oBOI.Attributes.ContainsKey("sGUID"))
                    {
                        var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                        oBOI.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                    }
                    oBOI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                    var oQuoteI = oBO.Save(oBOI);
                    oCResult.oResult = null;
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult InsertVehicle(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iQSInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iQSInstanceID))
                { }
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                int iQSDID = 0;
                string sQSDID = (string)oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                if (int.TryParse(sQSDID, out iQSDID)) { }
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                oQSI.ID = iQSInstanceID;
                var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                if (oQSDefinition != null)
                {
                    oQSI.QSDefinition = oQSDefinition;
                }
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = iQSInstanceID.ToString() });
                XIIBO oBOI = new XIIBO();
                oBOI = oXII.BOI("Vehicle_T", null, "create", oWhrParams);
                var iInstanceID = "";
                if (oBOI != null && oBOI.Attributes.ContainsKey(oBOI.BOD.sPrimaryKey))
                {
                    iInstanceID = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue;
                }
                else
                {
                    oBOI = new XIIBO();
                }
                if (!OQSD.ContainsKey("FKiQSInstanceID"))
                {
                    OQSD["FKiQSInstanceID"] = new CNV { sName = "FKiQSInstanceID", sValue = iQSInstanceID.ToString() };
                }
                if (oQSI.XIValues.ContainsKey("sPostCode") && !OQSD.ContainsKey("sVehiclePostCode"))
                {
                    OQSD["sVehiclePostCode"] = new CNV { sName = "sVehiclePostCode", sValue = oQSI.XIValues["sPostCode"].sValue };
                }
                if (oQSI.XIValues.ContainsKey("sRegNo") && !OQSD.ContainsKey("sRegistration"))
                {
                    OQSD["sRegistration"] = new CNV { sName = "sRegistration", sValue = oQSI.XIValues["sRegNo"].sValue };
                }
                string sDateofpurchase = "";
                if (oQSI.XIValues.ContainsKey("iMotorhomebuyMonth") && oQSI.XIValues.ContainsKey("iMotorhomebuyYear"))
                {
                    int iMonth = 0; int iYear = 0;
                    int.TryParse(oQSI.XIValues["iMotorhomebuyMonth"].sValue, out iMonth);
                    int.TryParse(oQSI.XIValues["iMotorhomebuyYear"].sValue, out iYear);
                    var dtDateofPurchase = new DateTime(iYear, iMonth, 1);
                    sDateofpurchase = dtDateofPurchase.ToString(XIConstant.Date_Format);
                }
                else
                {
                    sDateofpurchase = oQSI.XIValues["dDateofpurchase"].sValue;
                }
                if (!OQSD.ContainsKey("dPurchase"))
                {
                    OQSD["dPurchase"] = new CNV { sName = "dPurchase", sValue = sDateofpurchase };
                }
                if (!OQSD.ContainsKey("bLeftHandDrive"))
                {
                    bool IsLeftHandDrive = false;
                    if (oQSI.XIValues.ContainsKey("bISLeftHandDrive") && oQSI.XIValues["bISLeftHandDrive"].sResolvedValue.ToLower() == "yes")
                    {
                        IsLeftHandDrive = true;
                    }
                    if (oQSI.XIValues.ContainsKey("bISRightHandDrive") && oQSI.XIValues["bISRightHandDrive"].sResolvedValue.ToLower() == "no")
                    {
                        IsLeftHandDrive = true;
                    }
                    OQSD["bLeftHandDrive"] = new CNV { sName = "bLeftHandDrive", sValue = IsLeftHandDrive.ToString() };
                }
                if (!OQSD.ContainsKey("sModel"))
                {
                    OQSD["sModel"] = new CNV { sName = "sModel", sValue = oQSI.XIValues["sModelofCaravanUpdated"].sValue };
                }
                if (!OQSD.ContainsKey("iEngineSize"))
                {
                    OQSD["iEngineSize"] = new CNV { sName = "iEngineSize", sValue = oQSI.XIValues["sEngineSize"].sValue };
                }
                if (!OQSD.ContainsKey("iSeats"))
                {
                    OQSD["iSeats"] = new CNV { sName = "iSeats", sValue = oQSI.XIValues["iNoofSeats"].sValue };
                }
                if (!OQSD.ContainsKey("enumGaragingID"))
                {
                    OQSD["enumGaragingID"] = new CNV { sName = "enumGaragingID", sValue = oQSI.XIValues["sWheredoyoustoreUpdated"].sValue };
                }
                if (!OQSD.ContainsKey("dInsurancePolicyStartDate"))
                {
                    OQSD["dInsurancePolicyStartDate"] = new CNV { sName = "dInsurancePolicyStartDate", sValue = oQSI.XIValues["dCoverStart"].sValue };
                }
                if (!OQSD.ContainsKey("rInsuranceVoluntaryExcess"))
                {
                    OQSD["rInsuranceVoluntaryExcess"] = new CNV { sName = "rInsuranceVoluntaryExcess", sValue = oQSI.XIValues["VoluntaryExcess"].sValue };
                }
                if (!OQSD.ContainsKey("iMilage"))
                {
                    OQSD["iMilage"] = new CNV { sName = "rInsuranceVoluntaryExcess", sValue = oQSI.XIValues["iMileage"].sValue };
                }
                if (!OQSD.ContainsKey("sMake"))
                {
                    var sMake = oQSI.XIValues["sCaravanMakeUpdated"].sDerivedValue;
                    if (!string.IsNullOrEmpty(sMake) && sMake.ToLower() == "other")
                    {
                        sMake = oQSI.XIValues["VehicleMakeother"].sDerivedValue;
                    }
                    OQSD["sMake"] = new CNV { sName = "sMake", sValue = sMake };
                }
                if (!OQSD.ContainsKey("enumVehicleSecurityID"))
                {
                    OQSD["enumVehicleSecurityID"] = new CNV { sName = "enumVehicleSecurityID", sValue = oQSI.XIValues["iVehicleSecurity"].sValue };
                }
                if (!OQSD.ContainsKey("enumRegisteredOwner"))
                {
                    OQSD["enumRegisteredOwner"] = new CNV { sName = "enumRegisteredOwner", sValue = oQSI.XIValues["sVehicleOwner"].sValue };
                }
                if (!OQSD.ContainsKey("enumRegisteredKeeper"))
                {
                    OQSD["enumRegisteredKeeper"] = new CNV { sName = "enumRegisteredKeeper", sValue = oQSI.XIValues["sVehicleKeeper"].sValue };
                }
                if (!OQSD.ContainsKey("bModifications"))
                {
                    bool bModifications = false;
                    if (OQSD.ContainsKey("sVehicleModifications") && !string.IsNullOrEmpty(oQSI.XIValues["sVehicleModifications"].sDerivedValue) && oQSI.XIValues["sVehicleModifications"].sDerivedValue.ToLower() == "yes")
                    {
                        bModifications = true;
                    }
                    OQSD["bModifications"] = new CNV { sName = "bModifications", sValue = bModifications.ToString() };
                }
                if (!OQSD.ContainsKey("sWhereOvernight"))
                {
                    OQSD["sWhereOvernight"] = new CNV { sName = "sWhereOvernight", sValue = oQSI.XIValues["iWhatisthelocationofyourmotorhomeovernight"].sDerivedValue };
                }
                if (!OQSD.ContainsKey("iYear"))
                {
                    OQSD["iYear"] = new CNV { sName = "iYear", sValue = oQSI.XIValues["iYearOfManufactureUpdated"].sValue };
                }
                //if (!OQSD.ContainsKey("iInsuranceCoverType"))
                //{
                //    OQSD["iInsuranceCoverType"] = new CNV { sName = "iInsuranceCoverType", sValue = oQSI.XIValues["sTypeofCoverUpdated"].sValue };
                //}
                if (!OQSD.ContainsKey("iInsuranceNoClaims"))
                {
                    OQSD["iInsuranceNoClaims"] = new CNV { sName = "iInsuranceNoClaims", sValue = oQSI.XIValues["iNoClaimsYears"].sValue };
                }
                var VehicleData = oBOI.BuildBoObject("Vehicle_T", "Create", OQSD, iInstanceID);
                if (VehicleData.xiStatus == 0 && VehicleData.oResult != null)
                {
                    var ovehicle = (CResult)VehicleData.oResult;
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Tree Structure Component" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }
        public CResult RequirementChasing(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            string iQSInstanceID =string.Empty; int iPolicyID = 0;
            List<CNV> oAuditParams = new List<CNV>();
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> nParms = new List<CNV>();
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iQSInstanceID = iID;
                }
                string sACPolicyID = nParms.Where(x => x.sName == "{XIP|" + sBOName + ".id}").Select(x => x.sValue).FirstOrDefault();
                if (int.TryParse(sACPolicyID, out iPolicyID))
                { }
                oParams.Add(new CNV
                {
                    sName = "iACPolicyID",
                    sValue = sACPolicyID
                });
                string sEmail = oGUIDParams.NMyInstance.Where(m => m.Key == "{XIP|sEmail}").Select(m => m.Value.sValue).FirstOrDefault();
                oParams.Add(new CNV
                {
                    sName = "sEmail",
                    sValue = sEmail
                });
                XIIXI oXII = new XIIXI(); XIIBO oBOI = new XIIBO();
                XIIQS oQSI = oXII.GetQuestionSetInstanceByID("0", iQSInstanceID);
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });
                if (!OQSD.ContainsKey("FKiACPolicyID"))
                {
                    OQSD["FKiACPolicyID"] = new CNV { sName = "FKiACPolicyID", sValue = sACPolicyID };
                }
                RequirementChasingMailProcessing(oParams, OQSD);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Requirement Chasing" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                //oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult;
        }

        public CResult RequirementChasingForPendingPolicies(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            string iQSInstanceID = string.Empty; int iPolicyID = 0;
            List<CNV> oAuditParams = new List<CNV>();
            try 
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = Guid.NewGuid().ToString();
                var UserorgID = HttpContext.Current.Session["iUserOrg"];
                oParams.Add(new CNV
                {
                    sName = "sGUID",
                    sValue = sGUID
                });
                oParams.Add(new CNV
                {
                    sName = "iOrganizationID",
                    sValue = UserorgID.ToString()
                });
                RequirementChasingMailProcessing(oParams, null);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing RequirementChasingForPendingPolicies" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                //oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        private CResult RequirementChasingMailProcessing(List<CNV> oParams, Dictionary<string, CNV> OQSD)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTemplateName = oParams.Where(m => m.sName.ToLower() == "sTemplateName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                bool SendEmail = Convert.ToBoolean(oParams.Where(m => m.sName.ToLower() == "bSendEmail".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string sACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sEmail = oParams.Where(m => m.sName.ToLower() == "sEmail".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sChaserMessage = oParams.Where(m => m.sName.ToLower() == "sChaserMessage".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iTemplateID = oParams.Where(m => m.sName.ToLower() == "iTemplateID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                //int iOrgID = Convert.ToInt32(HttpContext.Current.Session["iUserOrg"]);
                XIInfraCache oCache = new XIInfraCache();
                bool bIsEmailChaser = false;
                var sSessionID = HttpContext.Current.Session.SessionID;
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);               
                if (int.TryParse(sACPolicyID, out iPolicyID))
                { }

                XIIXI oXII = new XIIXI(); XIIBO oBOI = new XIIBO();
                if (!string.IsNullOrEmpty(sACPolicyID) && !string.IsNullOrEmpty(sStructureName))
                {
                    if (OQSD == null)
                    {
                        OQSD = new Dictionary<string, CNV>();
                        OQSD["FKiACPolicyID"] = new CNV { sName = "FKiACPolicyID", sValue = sACPolicyID };
                        OQSD["bSendEmail"] = new CNV { sName = "bSendEmail", sValue = "true" };
                        OQSD["sChaserMessage"] = new CNV { sName = "sChaserMessage", sValue = sChaserMessage };
                        bIsEmailChaser = true;
                    }
                    else if(OQSD != null && OQSD.ContainsKey("bSendEmail"))
                     {
                        string sValue = OQSD["bSendEmail"].sValue;
                        if (!string.IsNullOrEmpty(sValue) && (sValue.ToLower() == "on" || sValue.ToLower() == "true"))
                        {
                            bIsEmailChaser = true;
                        }
                    }
                    var oRequirementChaser = oBOI.BuildBoObject("RequirementChaser_T", "Save", OQSD, "");
                    XIContentEditors oContent = new XIContentEditors();
                    var oStructureInstance = oXII.BOI(sBOName, sACPolicyID).Structure(sStructureName).XILoad();
                    List<XIContentEditors> oContentDef = new List<XIContentEditors>();
                    if (!string.IsNullOrEmpty(iTemplateID))
                    {
                       oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, iTemplateID);
                    }
                    else
                    {
                       oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, "223");
                    }
                    if (oContentDef != null && oContentDef.Count() > 0)
                    {
                        oContent = oContentDef.FirstOrDefault();
                    }
                    var sStructureresult = oContent.MergeContentTemplate(oContent, oStructureInstance);//Get template content with dynamic data
                    if (sStructureresult.bOK && sStructureresult.oResult != null)
                    {
                        XIInfraEmail oEmail = new XIInfraEmail();
                        string sChasingMailContent = (string)sStructureresult.oResult;
                        oEmail.EmailID = sEmail;
                        oEmail.sSubject = oContent.sSubject;
                        Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                        if (bIsEmailChaser == true)
                        {
                            oEmail.Bcc = oContent.sBCC;
                            oEmail.cc = oContent.sCC;
                            oEmail.From = oContent.sFrom;
                            oEmail.iServerID = oContent.FkiServerID;
                            oEmail.Sendmail(iOrgID, sChasingMailContent, null, 0, XIConstant.Email_RequirementChase, 0, null, Convert.ToInt64(iPolicyID), oContent.bIsBCCOnly);//send requiremt chasing mail without attachment
                            //var oRequirementChaser = oBOI.BuildBoObject("RequirementChaser_T", "Save", OQSD, "");
                            if (oRequirementChaser.xiStatus == 0 && oRequirementChaser.oResult != null)
                            {
                                var oMakeaChangeData = (CResult)oRequirementChaser.oResult;
                                dictmsg.Add("Success:UserName", "Requirement Chaser sent successfully");
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                                oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                            }
                        }
                        else
                        {
                            dictmsg.Add("Error:UserName", "Need to check E-mail / Letter Chaser");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing RequirementChasingMailProcessing" });
                oCResult.sMessage = "ERROR: PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                //oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }



        #region Quotes_Signalr
        public CResult ExeThread(List<CNV> oParams, iSiganlR oSignalRI)
        {
            // NOTE: HTTPCONTEXT GETTING NULL NNED TO VERIFY HERE 
            CResult oResult = new CResult();
            oSignalR = oSignalRI;
            if (oSignalR != null)
            {
                var context = HttpContext.Current;
                // Holding the Current HttpContext Values in the Object Here
                var sessionItems = Utility.SessionItems();
                Thread threadObj = new Thread(new ThreadStart(() =>
                {
                    ExeScript(oParams, sessionItems);
                }));
                threadObj.Start();
                threadObj.IsBackground = true;
            }
            else
            {
                oResult.sMessage = "Null constructor";
                oXID.SaveErrortoDB(oResult);
            }
            //ExeScript(oParams);
            return oResult;
        }
        public CResult ExeThreadForPartial(List<CNV> oParams, iSiganlR oSignalRI)
        {
            // NOTE: HTTPCONTEXT GETTING NULL NNED TO VERIFY HERE 
            CResult oResult = new CResult();
            oSignalR = oSignalRI;
            if (oSignalR != null)
            {
                var context = HttpContext.Current;
                // Holding the Current HttpContext Values in the Object Here
                var sessionItems = Utility.SessionItems();
                Thread threadObj = new Thread(new ThreadStart(() =>
                {
                    ExePartialScript(oParams, sessionItems);
                }));
                threadObj.Start();
                threadObj.IsBackground = true;
            }
            else
            {
                oResult.sMessage = "Null constructor";
                oXID.SaveErrortoDB(oResult);
            }
            //ExeScript(oParams);
            return oResult;
        }

        public void HTTPRequest(string QSInstanceID, int ProductVersionID, string sRoleName, string sDataBase, string sGUID, string sSessionID, int iQuoteType)
        {
            try
            {
                oSignalR.HitSignalR(QSInstanceID, ProductVersionID, sRoleName, sDataBase, sGUID, sSessionID, iQuoteType);

                //oresult = new CResult();
                //string destinationUrl = ConfigurationManager.AppSettings["ApplicationPath"] + $"PremiumFinance/SignalREvent/{QSInstanceID}/{ProductVersionID}/{sRoleName}";
                //HttpWebRequest request = (HttpWebRequest)WebRequest.Create(destinationUrl);
                //request.Method = "GET";
                //ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(delegate { return true; });
                //// ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                //HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                //if (response.StatusCode == HttpStatusCode.OK)
                //{
                //    Stream responseStream = response.GetResponseStream();
                //    string responseStr = new StreamReader(responseStream).ReadToEnd();
                //}
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        #endregion
        #region ExecuteScriptWithoutSignalR

        public CResult ExecuteScript_old(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            List<string> Info = new List<string>();
            Info.Add("ExecuteScript Method Started");
            string iID = "";
            int iInstanceID = 0;
            try
            {
                CResult oresult = new CResult();
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (sSessionID != "API")
                    sSessionID = HttpContext.Current.Session.SessionID;
                iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //    string sCustomerStartRef = oParams.Where(m => m.sName.ToLower() == "sCustomerStartReference".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sScriptType = oParams.Where(m => m.sName.ToLower() == "sScriptType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sRoleName = oParams.Where(m => m.sName.ToLower() == "srolename".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iCustomerID = 0;
                //    string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //    int iCustomerID = 0;
                XID1Click oD1Click = new XID1Click();
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                int iScriptType = 10;
                if (!string.IsNullOrEmpty(sScriptType) && sScriptType.ToLower() == "partial")
                {
                    iScriptType = 20;
                }
                XIIXI oXII = new XIIXI();
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString() });
                var oLeadI = oXII.BOI("Lead_T", "", "Create", oWhrParams);
                long iLeadID = 0;
                if (oLeadI != null && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                {
                    if (long.TryParse(oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue, out iLeadID))
                    { }
                }
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
                int iQSDID = 0;
                string sQSDID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                if (int.TryParse(sQSDID, out iQSDID)) { }
                iQSDID = iQSDID == 0 ? Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault()) : iQSDID;
                oQSI.ID = iInstanceID;
                var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                if (oQSDefinition != null)
                {
                    oQSI.QSDefinition = oQSDefinition;
                }
                var TransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                var ProductVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iProductVersionID}");
                string IsWithoutOTP = oQSI.XIIValues("bIsWithoutOTP");
                var dtOldcoverStart = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|doldcoverstart}");
                var roldGrossPremium = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|roldGrossPremium}");
                var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
                string dtInsuranceCoverStartDate = oQSI.XIIValues("dCoverStart");//"10/30/2018";
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|dPolicyDate}", dtInsuranceCoverStartDate, null, null);
                string PFScheme = oQSI.XIIValues("sSchemeRef");
                string sName = oQSI.XIIValues("sFirstName") + " " + oQSI.XIIValues("sLastName");
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}", PFScheme, null, null);
                List<XIIBO> oBOIList = new List<XIIBO>();
                var BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Aggregations");
                int iQSType = 0;
                bool bIsVisibleUser = false;
                if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal")
                {
                    iQSType = 10;
                }
                else
                {
                    iQSType = 20;
                    bIsVisibleUser = true;
                }
                QueryEngine oAggregationsQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> SqlParams = new List<SqlParameter>();
                oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iInstanceID.ToString() });
                oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = iScriptType.ToString() });
                SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iInstanceID.ToString() });
                SqlParams.Add(new SqlParameter { ParameterName = "@iType", Value = iScriptType.ToString() });
                oAggregationsQE.AddBO("Aggregations", "", oWParams);
                CResult oCresult1 = oAggregationsQE.BuildQuery();
                if (oCresult1.bOK && oCresult1.oResult != null)
                {
                    var sSql1 = (string)oCresult1.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oAggregationsQE.XIDataSource;
                    oEE.sSQL = sSql1;
                    oEE.SqlParams = SqlParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD1 = oAggregationsQE.QParams.FirstOrDefault().BOD;
                        oBOIList1.ForEach(x => x.BOD = oBOD1);
                        if (oBOIList1 != null && oBOIList1.Count > 0)
                        {
                            foreach (var oBOI in oBOIList1)
                            {
                                XIIBO oBO = new XIIBO();
                                oBO.Delete(oBOI);
                            }
                        }
                    }
                }
                var Content = "";
                var sMergeSummaryID = oCache.Get_ParamVal(sSessionID, sGUID, "", "{XIP|iMergeQSSummaryID}");
                int iMergeSummaryID = 0;
                if (int.TryParse(sMergeSummaryID, out iMergeSummaryID))
                {
                    var oBOI = oXII.BOI("MergeQsSummary_T", iMergeSummaryID.ToString(), "Create");
                    if (oBOI != null && oBOI.Attributes != null && oBOI.Attributes.ContainsKey("scontent"))
                    {
                        Content = oBOI.Attributes["scontent"].sValue;
                    }
                }
                var sourceD = (XIDSource)oCache.GetObjectFromCache("source", "", oQSI.FKiSourceID.ToString());
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                foreach (var xiValue in oQSI.XIValues)
                {
                    if (!OQSD.ContainsKey(xiValue.Key))
                    {
                        OQSD.Add(xiValue.Key, new CNV { sName = xiValue.Key, sValue = xiValue.Value.sValue });
                    }
                }
                //var SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                string sPrefix = string.Empty;
                //if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sprefixcode"))
                //{
                sPrefix = sourceD.sPrefixCode;
                //}
                var SourceI = oXII.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                //User Creation
                XIInfraUsers oUserD = new XIInfraUsers();
                oUserD.sUserName = oQSI.XIIValues("sEmail");
                var UserDetails = oUserD.Get_UserDetails(sDataBase);
                if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                {
                    Info.Add("Checked User Exists or not and User exists");
                    oUserD = (XIInfraUsers)UserDetails.oResult;
                    //var oUserD = (XIInfraUsers)oUser.oResult;
                    CNV oNVUser = new CNV();
                    oNVUser.sName = "FKiUserID";
                    oNVUser.sValue = oUserD.UserID.ToString();
                    OQSD.Add("FKiUserID", oNVUser);
                    OQSD.Add("iStatus", new CNV { sName = "iStatus", sValue = "0" });
                    var iNewUserID = oUserD.UserID;
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iUserID}", Convert.ToString(oUserD.UserID), null, null);
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|FKiUserID}", Convert.ToString(oUserD.UserID), null, null);
                    XIIBO oBII = new XIIBO();
                    //Customer Creation
                    oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Customer Insertion Started";
                    oXID.SaveErrortoDB(oCResult);

                    List<CNV> oCustomerNV = new List<CNV>();
                    oCustomerNV.Add(new CNV { sName = "FkiUserID", sValue = oUserD.UserID.ToString() });
                    var oCustomerI = oXII.BOI("Customer_T", "", "Create", oCustomerNV);
                    if (oCustomerI == null)
                    {
                        try
                        {
                            oWhrParams = new List<CNV>();
                            oWhrParams.Add(new CNV { sName = "fkiqsinstanceid", sValue = iInstanceID.ToString() });
                            oWhrParams.Add(new CNV { sName = "bmaindriver", sValue = 1.ToString() });
                            XIIBO oBOI = new XIIBO();
                            oBOI = oXII.BOI("Driver_T", null, "create", oWhrParams);
                            if (oBOI != null && oBOI.Attributes.ContainsKey("dDOB") && !OQSD.ContainsKey("dDOB"))
                            {
                                OQSD.Add("dDOB", new CNV { sName = "dDOB", sValue = oBOI.Attributes["dDOB"].sValue });
                            }
                        }
                        catch (Exception ex)
                        {
                            oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Falied to get DOB from Driver for customer insertion " + ex.ToString();
                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                        }
                        XIIXI oXIIXI = new XIIXI();
                        string sPrefixCode = string.Empty;
                        //SourceI = oXIIXI.BOI("XISource_T", oQSI.FKiSourceID.ToString());
                        if (SourceI.Attributes != null && SourceI.Attributes.ContainsKey("sPrefixCode"))
                        {
                            sPrefixCode = SourceI.Attributes["sPrefixCode"].sValue;
                        }
                        string sCustomerRefNo = CustomerRefNoGeneration(sPrefixCode);
                        OQSD.Add("sReference", new CNV { sName = "sReference", sValue = sCustomerRefNo });
                        if (!OQSD.ContainsKey("sExternalRefID"))
                        {
                            OQSD.Add("sExternalRefID", new CNV { sName = "sExternalRefID", sValue = oQSI.sExternalRefID });
                        }
                        if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal" && (!string.IsNullOrEmpty(IsWithoutOTP) && (IsWithoutOTP.ToLower() == "on" || IsWithoutOTP.ToLower() == "true")) && !OQSD.ContainsKey("bDisableClientLogin"))
                        {
                            OQSD.Add("bDisableClientLogin", new CNV { sName = "bDisableClientLogin", sValue = "True" });
                        }
                        if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal" && (!string.IsNullOrEmpty(IsWithoutOTP) && (IsWithoutOTP.ToLower() == "on" || IsWithoutOTP.ToLower() == "true")) && !OQSD.ContainsKey("bISMailSended"))
                        {
                            OQSD.Add("bISMailSended", new CNV { sName = "bISMailSended", sValue = "False" });
                        }
                        else if (!OQSD.ContainsKey("bISMailSended"))
                        {
                            OQSD.Add("bISMailSended", new CNV { sName = "bISMailSended", sValue = "True" });
                        }
                        var CustomerData = oBII.BuildBoObject("Customer_T", "Create", OQSD);
                        if (CustomerData.xiStatus == 0 && CustomerData.oResult != null)
                        {
                            oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - Customer Created Sucessfully";
                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                            var ores = (CResult)CustomerData.oResult;
                            oCustomerI = (XIIBO)ores.oResult;
                        }
                    }
                    if (oCustomerI.Attributes.ContainsKey(oCustomerI.BOD.sPrimaryKey))
                    {
                        iCustomerID = Convert.ToInt32(oCustomerI.Attributes[oCustomerI.BOD.sPrimaryKey].sValue);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|FKiCustomerID}", iCustomerID.ToString(), null, null);
                        List<CNV> oLeadWhrParams = new List<CNV>();
                        oLeadWhrParams.Add(new CNV { sName = "fkiqsinstanceid", sValue = iInstanceID.ToString() });
                        if (oLeadI != null && oLeadI.Attributes.ContainsKey("FKiClientID"))
                        {
                            oLeadI.Attributes["FKiClientID"].sValue = iCustomerID.ToString();
                            oLeadI.Attributes["FKiClientID"].bDirty = true;
                            oLeadI.Save(oLeadI);
                        }
                    }
                    if (oCustomerI.Attributes.ContainsKey("sReference"))
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sClientReference}", oCustomerI.Attributes["sReference"].sValue, null, null);
                    }
                    Info.Add("Customer Insertion done");
                    List<CNV> oAccountNV = new List<CNV>();
                    oAccountNV.Add(new CNV { sName = "FKiClientID", sValue = iCustomerID.ToString() });
                    oAccountNV.Add(new CNV { sName = "iType", sValue = 0.ToString() });
                    var oAccountI = oXII.BOI("ACAccount_T", "", "Create", oAccountNV);
                    if (oAccountI == null)
                    {
                        if (!OQSD.ContainsKey("FKiClientID"))
                        {
                            OQSD.Add("FKiClientID", new CNV { sName = "FKiClientID", sValue = iCustomerID.ToString() });
                        }
                        //OQSD.Add("FKiClientID", new CNV { sName = "FKiClientID", sValue = iCustomerID.ToString() });
                        //OQSD.Add("iStatus", new CNV { sName = "iStatus", sValue = Convert.ToInt32(EnumTransactions.Live).ToString() });
                        OQSD.Add("iType", new CNV { sName = "iType", sValue = "0" });
                        OQSD.Add("iOverrideType", new CNV { sName = "iOverrideType", sValue = "10" });
                        var oAccount = oBII.BuildBoObject("ACAccount_T", "Create", OQSD);
                        if (oAccount.xiStatus == 0 && oAccount.oResult != null)
                        {
                            CResult accc = (CResult)oAccount.oResult;
                            oAccountI = (XIIBO)accc.oResult;
                            oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - personal account Created Sucessfully";
                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                        }
                    }
                    if (oCustomerI.Attributes != null && oCustomerI.Attributes.ContainsKey("FKiACAccountID") && oAccountI.Attributes != null && oAccountI.Attributes.ContainsKey("id"))
                    {
                        oCustomerI.Attributes["FKiACAccountID"].sValue = oAccountI.Attributes["id"].sValue;
                        oCustomerI.Attributes["FKiACAccountID"].bDirty = true;
                        var result = oCustomerI.Save(oCustomerI);
                    }
                    Info.Add("Account Creation done");
                    XILink XiLink = new XILink();
                    //DateTime dtCoverStart=Utility.ConvertToDate(dtInsuranceCoverStartDate);
                    int QuoteID = 0;
                    XIIValue oAttrV = new XIIValue();
                    XIIXI oIXI = new XIIXI();
                    if (!string.IsNullOrEmpty(sStructureName))
                    {
                        var oQSSI = oIXI.BOI("QS Instance", iInstanceID.ToString()).Structure(sStructureName).XILoad();
                        oCache.Set_QsStructureObj(sSessionID, sGUID, "QSInstance_" + iInstanceID + "" + sStructureName + "", oQSSI);
                        var oCacheI = oCache.Get_QsStructureObj(sSessionID, sGUID, "QSInstance_" + iInstanceID + "" + sStructureName + "");
                    }
                    //int iScriptID = 0;
                    Guid gScriptIDXIGUID = Guid.Empty;
                    Guid gMTAScriptIDXIGUID = Guid.Empty;
                    if (TransactionType == "MTA")
                    {
                        Info.Add("Started MTA Execution");
                        if (ProductVersionID != null)
                        {
                            XIInfraScript oScript = new XIInfraScript();
                            XID1Click PV1Click = new XID1Click();
                            var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "MTA Script");
                            oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                            XIDStructure oStructure = new XIDStructure();
                            List<CNV> nParams = new List<CNV>();
                            CNV oNV = new CNV();
                            oNV.sName = "{XIP|ProductVersionID}";
                            oNV.sValue = ProductVersionID.ToString();
                            nParams.Add(oNV);
                            var oQuery = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, nParams);
                            PV1Click.Query = oQuery;
                            PV1Click.Name = "ProductVersion_T";
                            var oOneClick = PV1Click.OneClick_Execute();
                            foreach (var item1 in oOneClick.Values)
                            {
                                var ProductQuery = "select * from product where id = " + item1.Attributes["product"].sValue;
                                PV1Click.Query = ProductQuery;
                                PV1Click.Name = "Product";
                                var oProductClick = PV1Click.OneClick_Execute().FirstOrDefault();
                                var PParams = new Dictionary<string, object>();
                                var sProductName = oProductClick.Value.Attributes["sname"].sValue;
                                var sProductCode = oProductClick.Value.Attributes["sProductcode"].sValue;
                                XIIBO oBO = new XIIBO();
                                oBO.BOD = BOD;
                                oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                                oBO.Attributes["FKiLeadID"] = new XIIAttribute { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true };
                                oBO.Attributes["sInsurer"] = new XIIAttribute { sName = "sInsurer", sValue = sProductName, bDirty = true };
                                oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                                oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "20", bDirty = true };
                                oBO.Attributes["sExternalRefID"] = new XIIAttribute { sName = "sExternalRefID", sValue = oQSI.sExternalRefID, bDirty = true };
                                oBO.Attributes["sTypeOfCover"] = new XIIAttribute { sName = "sTypeOfCover", sValue = oQSI.XIIValues("sTypeOfCoverUpdated"), bDirty = true };
                                oBO.Attributes["ID"] = new XIIAttribute { sName = "ID", bDirty = true };
                                oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sName, bDirty = true };
                                oBO.Attributes["iQSType"] = new XIIAttribute { sName = "iQSType", sValue = iQSType.ToString(), bDirty = true };
                                oBO.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = bIsVisibleUser.ToString(), bDirty = true };
                                oBO.Attributes["sSummaryContent"] = new XIIAttribute { sName = "sSummaryContent", bDirty = true, sValue = Content };
                                oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rGrossPremium"] = new XIIAttribute { sName = "rGrossPremium", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = "0.00", bDirty = true };
                                oBO.Attributes["bIsCoverAbroad"] = new XIIAttribute { sName = "bIsCoverAbroad", sValue = oProductClick.Value.Attributes["biscoverabroad"].sValue, bDirty = true };
                                oBO.Attributes["zDefaultDeposit"] = new XIIAttribute { sName = "zDefaultDeposit", sValue = "0.00", bDirty = true };
                                oBO.Attributes["zDefaultAdmin"] = new XIIAttribute { sName = "zDefaultAdmin", sValue = oProductClick.Value.Attributes["zdefaultadmin"].sValue, bDirty = true };
                                oBO.Attributes["rInsurerCharge"] = new XIIAttribute { sName = "rInsurerCharge", sValue = oProductClick.Value.Attributes["rinsurercharge"].sValue, bDirty = true };
                                oBO.Attributes["rMonthlyPrice"] = new XIIAttribute { sName = "rMonthlyPrice", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rMonthlyTotal"] = new XIIAttribute { sName = "rMonthlyTotal", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rPremiumFinanceAmount"] = new XIIAttribute { sName = "rPremiumFinanceAmount", sValue = "0.00", bDirty = true };
                                oBO.Attributes["CreatedTime"] = new XIIAttribute { sName = "CreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                                var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                                oBO.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                                //string sRef = RandomNumber(7);
                                //oBO.Attributes["sRefID"] = new XIIAttribute { sName = "sRefID", sValue = sPrefix + sRef, bDirty = true };
                                oBO.Attributes["zCommission"] = new XIIAttribute { sName = "zCommission", sValue = oProductClick.Value.Attributes["zCommission"].sValue, bDirty = true };
                                oBO.Attributes["iCommissionType"] = new XIIAttribute { sName = "iCommissionType", sValue = oProductClick.Value.Attributes["iCommissionType"].sValue, bDirty = true };
                                oBO.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iScriptType.ToString(), bDirty = true };
                                oBO.Attributes["FKiClassID"] = new XIIAttribute { sName = "FKiClassID", sValue = sFKiClassID, bDirty = true };
                                oBO.Attributes["FKiUserID"] = new XIIAttribute { sName = "FKiUserID", sValue = iNewUserID.ToString(), bDirty = true };
                                oBO.Attributes["FKiCustomerID"] = new XIIAttribute { sName = "FKiCustomerID", sValue = iCustomerID.ToString(), bDirty = true };
                                var oBOResult = oBO.Save(oBO);
                                if (oBOResult.bOK && oBOResult.oResult != null)
                                {
                                    var oQuoteI = (XIIBO)oBOResult.oResult;
                                    if (Guid.TryParse(item1.Attributes["Script"].sValue, out gScriptIDXIGUID))
                                    {
                                        if (gScriptIDXIGUID != Guid.Empty)
                                        {
                                            oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - script started executing , script id:" + gScriptIDXIGUID.ToString();
                                            oXID.SaveErrortoDB(oCResult, iInstanceID);
                                            int iQuote = 0;
                                            if (oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                            {
                                                string sQuote = oQuoteI.Attributes["id"].sValue;
                                                if (int.TryParse(sQuote, out iQuote))
                                                {
                                                }
                                                //Script Excecution
                                                var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, iInstanceID.ToString(), iNewUserID, sDataBase, iCustomerID, sProductName, item1.Attributes["ID"].sValue, sProductCode, dtOldcoverStart, roldGrossPremium, iQuote, sSessionID);
                                                var sQuoteID = ScriptResults.oCollectionResult.Where(m => m.sName == "QuoteID").Select(m => m.sValue).FirstOrDefault();
                                                if (int.TryParse(sQuoteID, out QuoteID))
                                                { }
                                            }
                                            if (Guid.TryParse(item1.Attributes["MTAScript"].sValue, out gMTAScriptIDXIGUID))
                                            {
                                                oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - MTA script started executing , script id:" + gMTAScriptIDXIGUID.ToString();
                                                oXID.SaveErrortoDB(oCResult, iInstanceID);
                                                //Script Excecution
                                                var ScriptResults = oScript.XIScripting(gMTAScriptIDXIGUID.ToString(), sGUID, iInstanceID.ToString(), iNewUserID, sDataBase, iCustomerID, sProductName, item1.Attributes["ID"].sValue, sProductCode, dtOldcoverStart, roldGrossPremium, QuoteID, sSessionID);
                                                //PolicyMainCal( iInstanceID, dtOldcoverStart, roldGrossPremium, QuoteID.ToString(),sSessionID,sGUID, item1.Attributes["ID"].sValue);
                                            }
                                            //PolicyMainCal(sGUID, oQSInstance.ID, iUserID, iCustomerID, sDatabase, sProductName, item1.Attributes["ID"].sValue, roldGrossPremium, dtOldcoverStart);
                                        }
                                        else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                        {
                                            oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                            oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                            oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                            oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                            oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                            oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                            oQuoteI.Save(oQuoteI);
                                        }
                                    }
                                    else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                    {
                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                        oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                        oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                        oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                        oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                        oQuoteI.Save(oQuoteI);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        Dictionary<string, object> Params = new Dictionary<string, object>();
                        Params["Name"] = "Product";
                        XIInfraScript oScript = new XIInfraScript();
                        //Getting Product table database
                        //Getting Active scripts
                        List<CNV> oCNV = new List<CNV>();
                        oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                        string sQuery = "Active ProductsList";
                        if (iQSType == 20)
                        {
                            sQuery = "Public Active ProductsList";
                        }
                        var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sQuery);
                        oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                        XIDStructure oStructure = new XIDStructure();
                        //oD1Click.Query = o1ClickI.Query;
                        oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, oCNV);
                        oD1Click.Name = "Product";
                        var result = oD1Click.OneClick_Execute();
                        foreach (var item in result.Values)
                        {
                            var ProductID = item.Attributes["ID"].sValue;
                            List<CNV> nParams = new List<CNV>();
                            nParams.Add(new CNV { sName = "{XIP|dPolicyDate}", sValue = dtInsuranceCoverStartDate });
                            nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = ProductID });
                            nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                            //Getting scripts with version
                            var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "ProductVersion Scripts");
                            oD1Click = (XID1Click)oProductVersion1ClickI.Clone(oProductVersion1ClickI);
                            oD1Click.Name = "productversion_t";
                            oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(oProductVersion1ClickI.Query, nParams);
                            var oOneClick = oD1Click.OneClick_Execute(null, oD1Click);
                            foreach (var item1 in oOneClick.Values)
                            {
                                XIIBO oBO = new XIIBO();
                                oBO.BOD = BOD;
                                oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                                oBO.Attributes["sInsurer"] = new XIIAttribute { sName = "sInsurer", sValue = item.Attributes["name"].sValue, bDirty = true };
                                oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                                oBO.Attributes["iQuoteStatus"] = new XIIAttribute { sName = "iQuoteStatus", sValue = "20", bDirty = true };
                                oBO.Attributes["sExternalRefID"] = new XIIAttribute { sName = "sExternalRefID", sValue = oQSI.sExternalRefID, bDirty = true };
                                oBO.Attributes["sTypeOfCover"] = new XIIAttribute { sName = "sTypeOfCover", sValue = oQSI.XIIValues("sTypeofCoverUpdated"), bDirty = true };
                                oBO.Attributes["FKiLeadID"] = new XIIAttribute { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true };
                                double rDefaultPrice = 0;
                                if (item1.Attributes.ContainsKey("default price"))
                                {
                                    double.TryParse(item1.Attributes["default price"].sValue, out rDefaultPrice);
                                }
                                oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = rDefaultPrice.ToString(), bDirty = true };
                                oBO.Attributes["rGrossPremium"] = new XIIAttribute { sName = "rGrossPremium", sValue = rDefaultPrice.ToString(), bDirty = true };
                                oBO.Attributes["rQuotePremium"] = new XIIAttribute { sName = "rQuotePremium", sValue = rDefaultPrice.ToString(), bDirty = true };
                                oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = rDefaultPrice.ToString(), bDirty = true };
                                oBO.Attributes["bIsCoverAbroad"] = new XIIAttribute { sName = "bIsCoverAbroad", sValue = item.Attributes["CoverAbroad"].sValue, bDirty = true };
                                oBO.Attributes["zDefaultDeposit"] = new XIIAttribute { sName = "zDefaultDeposit", sValue = "0.00", bDirty = true };
                                oBO.Attributes["zDefaultAdmin"] = new XIIAttribute { sName = "zDefaultAdmin", sValue = item.Attributes["DefaultAdmin"].sValue, bDirty = true };
                                oBO.Attributes["rMonthlyPrice"] = new XIIAttribute { sName = "rMonthlyPrice", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rMonthlyTotal"] = new XIIAttribute { sName = "rMonthlyTotal", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rPremiumFinanceAmount"] = new XIIAttribute { sName = "rPremiumFinanceAmount", sValue = "0.00", bDirty = true };
                                oBO.Attributes["CreatedTime"] = new XIIAttribute { sName = "CreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                                oBO.Attributes["iQSType"] = new XIIAttribute { sName = "iQSType", sValue = iQSType.ToString(), bDirty = true };
                                oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sName, bDirty = true };
                                var sQuoteGUID = Guid.NewGuid().ToString("N").Substring(0, 10);
                                oBO.Attributes["sGUID"] = new XIIAttribute { sName = "sGUID", sValue = sQuoteGUID, bDirty = true };
                                oBO.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = bIsVisibleUser.ToString(), bDirty = true };
                                oBO.Attributes["ID"] = new XIIAttribute { sName = "ID", bDirty = true };
                                oBO.Attributes["sSummaryContent"] = new XIIAttribute { sName = "sSummaryContent", bDirty = true, sValue = Content };
                                //string sRef = RandomNumber(7);
                                //oBO.Attributes["sRefID"] = new XIIAttribute { sName = "sRefID", sValue = sPrefix + sRef, bDirty = true };
                                oBO.Attributes["rInsurerCharge"] = new XIIAttribute { sName = "rInsurerCharge", sValue = item.Attributes["rinsurercharge"].sValue, bDirty = true };
                                oBO.Attributes["zCommission"] = new XIIAttribute { sName = "zCommission", sValue = item.Attributes["zCommission"].sValue, bDirty = true };
                                oBO.Attributes["iCommissionType"] = new XIIAttribute { sName = "iCommissionType", sValue = item.Attributes["iCommissionType"].sValue, bDirty = true };
                                oBO.Attributes["FKiClassID"] = new XIIAttribute { sName = "FKiClassID", sValue = sFKiClassID, bDirty = true };
                                oBO.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iScriptType.ToString(), bDirty = true };
                                oBO.Attributes["FKiUserID"] = new XIIAttribute { sName = "FKiUserID", sValue = iNewUserID.ToString(), bDirty = true };
                                oBO.Attributes["FKiCustomerID"] = new XIIAttribute { sName = "FKiCustomerID", sValue = iCustomerID.ToString(), bDirty = true };
                                oBO.Attributes["rCompulsoryExcess"] = new XIIAttribute { sName = "rCompulsoryExcess", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rVoluntaryExcess"] = new XIIAttribute { sName = "rVoluntaryExcess", sValue = "0.00", bDirty = true };
                                oBO.Attributes["rTotalExcess"] = new XIIAttribute { sName = "rTotalExcess", sValue = "0.00", bDirty = true };
                                //oBOIList.Add(oBO);
                                var oBOResult = oBO.Save(oBO);
                                if (oBOResult.bOK && oBOResult.oResult != null)
                                {
                                    var oQuoteI = (XIIBO)oBOResult.oResult;
                                    int iQuote = 0;
                                    string sQuoteID = oQuoteI.Attributes["id"].sValue;
                                    if (int.TryParse(sQuoteID, out iQuote))
                                    { }
                                    if (Guid.TryParse(item1.Attributes["Script"].sValue, out gScriptIDXIGUID))
                                    {
                                        if (gScriptIDXIGUID != Guid.Empty && string.IsNullOrEmpty(item1.Attributes["Calculation"].sValue))
                                        {
                                            Info.Add("Started Script execution: " + gScriptIDXIGUID.ToString());
                                            oCResult.sMessage = "Info: [QSInstanceID: " + iInstanceID + "] - script started executing , script id:" + gScriptIDXIGUID.ToString();
                                            oXID.SaveErrortoDB(oCResult);
                                            if (oQuoteI != null && oQuoteI.Attributes != null && oQuoteI.Attributes.ContainsKey("id"))
                                            {
                                                //Script Excecution
                                                //var ScriptResults1 = PolicyMainCal(iInstanceID, iNewUserID, iCustomerID, sDataBase, item.Attributes["Name"].sValue, item.Attributes["ProductCode"].sValue, item1.Attributes["ID"].sValue, sSessionID, sGUID, iQuote);
                                                //var Results = PolicyMainCal(iInstanceID, iNewUserID, iCustomerID, sDataBase, item.Attributes["Name"].sValue, item.Attributes["ProductCode"].sValue, item1.Attributes["ID"].sValue, sSessionID, sGUID, iQuote);
                                                //List<CNV> lParam = new List<CNV>();
                                                //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                                //lParam.Add(new CNV { sName = "iInsatnceID", sValue = iInstanceID.ToString() });
                                                //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                                //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                                //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                                //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                                //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                                //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                                //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                                //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });


                                                //var ScriptResults = PolicyMainCal(lParam);
                                                var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, iInstanceID.ToString(), iNewUserID, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, null, null, iQuote, sSessionID);
                                                oresult = ScriptResults;
                                            }
                                        }
                                        else if (item1.Attributes["Calculation"].iValue == 20)
                                        {
                                            //List<CNV> lParam = new List<CNV>();
                                            //lParam.Add(new CNV { sName = "sUID", sValue = sGUID });
                                            //lParam.Add(new CNV { sName = "iInsatnceID", sValue = iInstanceID.ToString() });
                                            //lParam.Add(new CNV { sName = "iUserID", sValue = iNewUserID.ToString() });
                                            //lParam.Add(new CNV { sName = "iCustomerID", sValue = iCustomerID.ToString() });
                                            //lParam.Add(new CNV { sName = "sDataBase", sValue = sDataBase });
                                            //lParam.Add(new CNV { sName = "ProductName", sValue = item.Attributes["Name"].sValue });
                                            //lParam.Add(new CNV { sName = "Version", sValue = item1.Attributes["ID"].sValue });
                                            //lParam.Add(new CNV { sName = "sSessionID", sValue = sSessionID });
                                            //lParam.Add(new CNV { sName = "ProductCode", sValue = item.Attributes["ProductCode"].sValue });
                                            //lParam.Add(new CNV { sName = "iQuoteID", sValue = iQuote.ToString() });
                                            //lParam.Add(new CNV { sName = "FKiSupplierID", sValue = item.Attributes["SupplierID"].sValue });
                                            //var oQSIO = oCache.Get_QsStructureObj(sSessionID, sGUID, "QSInstance_" + iInstanceID + "NotationStructure");
                                            //var ostructureInstance = oQSIO.oStructureInstance.FirstOrDefault().Value.FirstOrDefault();
                                            //var ScriptResults = PolicyMainCal(lParam);
                                            var ScriptResults = oScript.XIScripting(gScriptIDXIGUID.ToString(), sGUID, iInstanceID.ToString(), iNewUserID, sDataBase, iCustomerID, item.Attributes["Name"].sValue, item1.Attributes["ID"].sValue, item.Attributes["ProductCode"].sValue, null, null, iQuote, sSessionID);
                                            oresult = ScriptResults;
                                        }
                                        else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                        {
                                            oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                            oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                            oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                            oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                            oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                            oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                            oQuoteI.Save(oQuoteI);
                                        }
                                    }
                                    else if (oQuoteI != null && oQuoteI.Attributes.ContainsKey("iQuoteStatus"))
                                    {
                                        oQuoteI.Attributes["iQuoteStatus"].sValue = "30";
                                        oQuoteI.Attributes["iQuoteStatus"].bDirty = true;
                                        oQuoteI.Attributes["FKiUserID"].sValue = iNewUserID.ToString();
                                        oQuoteI.Attributes["FKiUserID"].bDirty = true;
                                        oQuoteI.Attributes["FKiCustomerID"].sValue = iCustomerID.ToString();
                                        oQuoteI.Attributes["FKiCustomerID"].bDirty = true;
                                        oQuoteI.Save(oQuoteI);
                                    }
                                }
                            }
                        }
                    }
                    if (oresult.xiStatus == 00)
                    {
                        //XIIXI oIXI = new XIIXI();
                        QueryEngine oQE = new QueryEngine();
                        oWParams = new List<XIWhereParams>();
                        oWhrParams = new List<CNV>();
                        oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString() });
                        DateTime dtQuoted = DateTime.MinValue;
                        float rBestQuote = 0;
                        List<SqlParameter> oSQLParams = new List<SqlParameter>();
                        oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iInstanceID.ToString() });
                        oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iInstanceID.ToString() });
                        oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "10" });
                        oSQLParams.Add(new SqlParameter { ParameterName = "@iType", Value = "10" });
                        oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                        oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                        oQE.AddBO("Aggregations", "", oWParams);
                        CResult oCresult = oQE.BuildQuery();
                        List<string> OverallStatus = new List<string>();
                        if (oCresult.bOK && oCresult.oResult != null)
                        {
                            var sSql1 = (string)oCresult.oResult;
                            ExecutionEngine oEE = new ExecutionEngine();
                            oEE.XIDataSource = oQE.XIDataSource;
                            oEE.sSQL = sSql1;
                            oEE.SqlParams = oSQLParams;
                            var oQResult = oEE.Execute();
                            if (oQResult.bOK && oQResult.oResult != null)
                            {
                                var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                                oBOIList1.ForEach(x => x.BOD = oBOD1);
                                var RatedQuotes = oBOIList1.ToList().Where(m => m.Attributes["iQuoteStatus"].sValue == "0").ToList();
                                if (RatedQuotes != null && RatedQuotes.Count > 0)
                                {
                                    foreach (var oQuote in RatedQuotes)
                                    {
                                        if (DateTime.TryParse(oQuote.Attributes["CreatedTime"].sValue, out dtQuoted)) { }
                                        var rQuotePrice = string.Empty;
                                        if (rBestQuote == 0)
                                        {
                                            rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                            if (float.TryParse(rQuotePrice, out rBestQuote))
                                            { }
                                        }
                                        else
                                        {
                                            float rPrice = 0;
                                            rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                            if (float.TryParse(rQuotePrice, out rPrice))
                                            {
                                                if (rPrice < rBestQuote && rPrice != 0)
                                                {
                                                    rBestQuote = rPrice;
                                                }
                                            }
                                        }
                                        OverallStatus.Add(oQuote.Attributes["iQuoteStatus"].sValue);
                                    }
                                }
                                else
                                {
                                    foreach (var oQuote in oBOIList1)
                                    {
                                        if (DateTime.TryParse(oQuote.Attributes["CreatedTime"].sValue, out dtQuoted)) { }
                                        var rQuotePrice = string.Empty;
                                        if (rBestQuote == 0)
                                        {
                                            rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                            if (float.TryParse(rQuotePrice, out rBestQuote))
                                            { }
                                        }
                                        else
                                        {
                                            float rPrice = 0;
                                            rQuotePrice = oQuote.Attributes["rFinalQuote"].sValue;
                                            if (float.TryParse(rQuotePrice, out rPrice))
                                            {
                                                if (rPrice < rBestQuote && rPrice != 0)
                                                {
                                                    rBestQuote = rPrice;
                                                }
                                            }
                                        }
                                        if (oQuote.Attributes.ContainsKey("iQuoteStatus"))
                                        {
                                            var iQSValue = oQuote.Attributes["iQuoteStatus"].sValue;
                                            if (iQSValue != "30")
                                            {
                                                OverallStatus.Add(oQuote.Attributes["iQuoteStatus"].sValue);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        var sOverallStatus = string.Empty;
                        if (OverallStatus != null && OverallStatus.Count() > 0)
                        {
                            if (OverallStatus.All(x => x == "0"))
                            {
                                sOverallStatus = "0";
                            }
                            else
                            {
                                sOverallStatus = "20";
                            }
                        }
                        var oBOI = oIXI.BOI("Lead_T", "", "UpdateQuoteDetails", oWhrParams);
                        var sPastLeadStatus = string.Empty;
                        var oSourceI = oXII.BOI("XISource_T", oQSI.QSDefinition.FKiSourceID.ToString());
                        if (oBOI != null)
                        {
                            if (oBOI.Attributes.ContainsKey("iStatus"))
                            {
                                sPastLeadStatus = oBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                if (string.IsNullOrEmpty(sPastLeadStatus) || (sPastLeadStatus.ToLower() != "mta" && sPastLeadStatus.ToLower() != "renewal"))
                                {
                                    if (oSourceI != null && oSourceI.Attributes != null && oSourceI.Attributes.ContainsKey("sName"))
                                    {
                                        var sSrcName = oSourceI.Attributes["sName"].sValue;
                                        if (!string.IsNullOrEmpty(sSrcName))
                                        {
                                            if (sSrcName.ToLower() == "Internal".ToLower() && !string.IsNullOrEmpty(sOverallStatus))
                                            {
                                                if (sOverallStatus == "0")
                                                {
                                                    oBOI.Attributes["iStatus"].sValue = "70";
                                                    oBOI.Attributes["iQuoteStatus"].sValue = "70";
                                                }
                                                else
                                                {
                                                    oBOI.Attributes["iStatus"].sValue = "90";
                                                    oBOI.Attributes["iQuoteStatus"].sValue = "90";
                                                }
                                            }
                                            else
                                            {
                                                if (sOverallStatus == "0")
                                                {
                                                    oBOI.Attributes["iStatus"].sValue = "10";
                                                    oBOI.Attributes["iQuoteStatus"].sValue = "10";
                                                }
                                                else
                                                {
                                                    oBOI.Attributes["iStatus"].sValue = "80";
                                                    oBOI.Attributes["iQuoteStatus"].sValue = "80";
                                                }
                                            }
                                        }
                                    }
                                    //oBOI.Attributes["iStatus"].sValue = "10";
                                    oBOI.Attributes["iStatus"].bDirty = true;
                                    oBOI.Attributes["iQuoteStatus"].bDirty = true;
                                }
                                oBOI.Attributes["rBestQuote"].sValue = rBestQuote.ToString();
                                oBOI.Attributes["rBestQuote"].bDirty = true;
                                oBOI.Attributes["dtQuoteDate"].sValue = dtQuoted.ToString();
                                oBOI.Attributes["dtQuoteDate"].bDirty = true;
                                oBOI.Attributes["dtBestPriceDate"].sValue = dtQuoted.ToString();
                                oBOI.Attributes["dtBestPriceDate"].bDirty = true;
                                oBOI.Attributes[oBOI.BOD.sPrimaryKey].bDirty = true;
                                oBOI.Save(oBOI);
                                //Save into LifeCycle
                                iLeadID = 0;
                                var sLeadID = string.Empty;
                                var sCurrentLeadStatus = oBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                if (oBOI.Attributes.ContainsKey(oBOI.BOD.sPrimaryKey))
                                {
                                    sLeadID = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue;
                                };
                                long.TryParse(sLeadID, out iLeadID);
                                XIIBO oLCBOI = new XIIBO();
                                var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                                if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                                {
                                    oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                                {
                                    oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                                {
                                    oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInstanceID.ToString(), bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                                {
                                    oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Stage", bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                                {
                                    oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sPastLeadStatus, bDirty = true });
                                }
                                if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                                {
                                    oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sCurrentLeadStatus, bDirty = true });
                                }
                                oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                                oLCBOI.BOD = oBOInsatnce.BOD;
                                oLCBOI.Save(oLCBOI);
                            }
                        }
                        if (sSessionID != "API")
                            HTTPRequest(iInstanceID.ToString(), 0, sRoleName, sDataBase, sGUID, sSessionID, 10);
                        //notification insertion for best quote and refer quotes
                        oParams.Add(new CNV { sName = "sXiLink", sValue = "Your Best Quote XiLink" });
                        InsertNotification(oParams);

                        bool bIsRefer = false; bool bIsDecline = false;
                        XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Quotes Status List", "");
                        List<CNV> oNVParams = new List<CNV>();
                        oNVParams.Add(new CNV { sName = "{XIP|iQSInstanceID}", sValue = iInstanceID.ToString() });
                        o1ClickD.ReplaceFKExpressions(oNVParams);
                        Dictionary<string, XIIBO> oRes = o1ClickD.OneClick_Execute();
                        if (oRes.Values.Any(x => x.Attributes.ContainsKey("sMessage")))
                        {
                            if (oRes.Values.Any(x => x.Attributes["sMessage"].sValue == "Refer"))
                            {
                                bIsRefer = true;
                            }
                            if (oRes.Values.Any(x => x.Attributes["sMessage"].sValue == "Decline"))
                            {
                                bIsDecline = true;
                            }
                        }
                        if (bIsRefer)
                        {
                            var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "sXiLink");
                            oParams.Remove(stuffToRemove);
                            oParams.Add(new CNV { sName = "sXiLink", sValue = "Refer Quotes" });
                            InsertNotification(oParams);
                        }
                        if (bIsDecline)
                        {
                            var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "sXiLink");
                            oParams.Remove(stuffToRemove);
                            oParams.Add(new CNV { sName = "sXiLink", sValue = "Failed Quotes" });
                            InsertNotification(oParams);
                        }
                    }
                    //XIIBO xibulk = new XIIBO();
                    //DataTable dtbulk = xibulk.MakeBulkSqlTable(oBOIList);
                    //xibulk.SaveBulk(dtbulk, oBOIList[0].BOD.iDataSource, oBOIList[0].BOD.TableName);
                    //ExeThread(oParams);
                }
            }
            catch (Exception ex)
            {
                string sInfo = "INFO: [QSInstanceID: " + iInstanceID + "] - " + string.Join(",\r\n ", Info);
                oCResult.sMessage = sInfo;
                oXID.SaveErrortoDB(oCResult, iInstanceID);
                oCResult.sMessage = "ERROR: [SignalR_QSInstanceID" + iID + "_ " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }



        #endregion
        public CResult UpdateBOFields(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                XIDBAPI Connection = new XIDBAPI(ConfigurationManager.ConnectionStrings["XIDNADbContext"].ConnectionString);
                XIInfraCache oCache = new XIInfraCache(); int iQSInstanceID = 0;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iID, out iQSInstanceID)) { }
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "sInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUpdatedFields = oParams.Where(m => m.sName.ToLower() == "sUpdatedFields".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> oNVParams = new List<CNV>();
                oNVParams = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                sInstanceID = oNVParams.Where(x => x.sName.ToLower() == sInstanceID.ToLower()).Select(x => x.sValue).FirstOrDefault();
                string sIsUpdate = oNVParams.Where(x => x.sName.ToLower() == "sIsUpdate".ToLower()).Select(x => x.sValue).FirstOrDefault();
                XIIQS oQSInstance = new XIIQS();
                oQSInstance = (XIIQS)oCache.Get_QuestionSetCache("QuestionSetCache", sGUID, iQSInstanceID.ToString());
                var oStepI = oQSInstance.Steps[oQSInstance.sCurrentStepName];


                XIIXI oXII = new XIIXI();
                if (!string.IsNullOrEmpty(sIsUpdate) && sIsUpdate.ToLower() == "true")
                {

                    XIIBO oBOI = new XIIBO();
                    oBOI = oXII.BOI(sBOName, sInstanceID);
                    if (!string.IsNullOrEmpty(sUpdatedFields))
                    {
                        var oUpdatedFields = sUpdatedFields.Split(',');
                        if (oBOI.Attributes != null && oBOI.Attributes.Count() > 0)
                        {
                            foreach (var sUpdatedField in oUpdatedFields)
                            {
                                if (oQSInstance.XIValues.ContainsKey(sUpdatedField))
                                {
                                    oQSInstance.XIValues[sUpdatedField].sValue = "";
                                    Dictionary<string, object> fieldParams = new Dictionary<string, object>();
                                    fieldParams["FKiQSInstanceID"] = oQSInstance.ID;
                                    //fieldParams["FKiQSSectionDefinitionID"] = sec.Value.FKiStepSectionDefinitionID;
                                    fieldParams["FKiFieldOriginID"] = oQSInstance.XIValues[sUpdatedField].FKiFieldOriginID;
                                    var oFIns = Connection.Select<XIIValue>("XIFieldInstance_T", fieldParams).FirstOrDefault();


                                    oFIns.sValue = "";
                                    oFIns.dValue = DateTime.Now;
                                    //oQSInstance.XIValues[nv.sName].FKiQSInstanceID = oQSInstance.ID;
                                    oFIns = Connection.Update<XIIValue>(oFIns, "XIFieldInstance_T", "ID");
                                    var oStep = oQSInstance.Steps.Values.Where(m => m.FKiQSStepDefinitionID == oFIns.FKiQSStepDefinitionID).ToList();
                                    //foreach (var oStepI in oStep)
                                    //{
                                    var oSec = oStepI.Sections.Where(m => m.Value.FKiStepSectionDefinitionID == oFIns.FKiQSSectionDefinitionID).ToList();
                                    foreach (var oSecI in oSec)
                                    {
                                        if (oSecI.Value.XIValues.ContainsKey(sUpdatedField))
                                        {
                                            oSecI.Value.XIValues[sUpdatedField].sValue = "";
                                        }
                                    }
                                    // }
                                }
                                if (oBOI.Attributes.ContainsKey(sUpdatedField))
                                {
                                    oBOI.AttributeI(sUpdatedField).sValue = "";
                                    oBOI.AttributeI(sUpdatedField).bDirty = true;
                                }
                            }
                        }
                    }
                    var oResult = oBOI.Save(oBOI, false);
                    oCache.Set_QuestionSetCache("QuestionSetCache", sGUID, oQSInstance.XIGUID.ToString(), oQSInstance);
                }

            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While UpdateBOFields" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }


        //Update QS Instance Updated date in Aggregations
        public CResult UpdateQSInstanceDate(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSIID = 0;
            try
            {
                var sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sQSDID = oParams.Where(m => m.sName.ToLower() == "iQSDID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sRole = oParams.Where(m => m.sName.ToLower() == "srolename".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int.TryParse(sQSInstanceID, out iQSIID);
                Guid iQSIIDGuid = Guid.Empty;
                Guid.TryParse(sQSInstanceID, out iQSIIDGuid);
                int iQSDID = 0;
                int.TryParse(sQSDID, out iQSDID);
                Guid QSDGUID = Guid.Empty;
                Guid.TryParse(sQSDID, out QSDGUID);
                if (iQSIID > 0 || iQSIIDGuid != Guid.Empty)
                {
                    //Get All Quotes with this QSIID
                    XID1Click o1ClickD = new XID1Click();
                    o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "UpdateQSQuotesDate");
                    XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, null, o1ClickD.BOID.ToString());
                    XID1Click o1Click = new XID1Click();
                    o1Click = (XID1Click)o1ClickD.Clone(o1ClickD);

                    if (!string.IsNullOrEmpty(sRole) && sRole.ToLower() != xiEnumSystem.EnumRoles.WebUsers.ToString().ToLower())
                    {
                        XIIXI oIXI = new XIIXI();
                        var oQSI = oIXI.BOI("QS Instance", sQSInstanceID);
                        if (oQSI != null)
                        {
                            if (oQSI.Attributes.ContainsKey("bAdminTakeOver"))
                            {
                                oQSI.Attributes["bAdminTakeOver"].sValue = "true";
                                oQSI.Attributes["bAdminTakeOver"].bDirty = true;
                            }
                            if (oQSI.Attributes.ContainsKey("FKiQSDefinitionID") && iQSDID != 0)
                            {
                                oQSI.Attributes["FKiQSDefinitionID"].sValue = iQSDID.ToString();
                                oQSI.Attributes["FKiQSDefinitionID"].bDirty = true;
                            }
                            if (oQSI.Attributes.ContainsKey("FKiQSDefinitionIDXIGUID") && (QSDGUID != null && QSDGUID != Guid.Empty))
                            {
                                oQSI.Attributes["FKiQSDefinitionIDXIGUID"].sValue = QSDGUID.ToString();
                                oQSI.Attributes["FKiQSDefinitionIDXIGUID"].bDirty = true;
                            }
                        }
                        XIIBO oBOI = new XIIBO();
                        oBOI.Save(oQSI);
                    }

                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> nParams = new List<CNV>();
                    CNV oNV = new CNV();
                    if (iQSIID > 0)
                    {
                        oNV.sName = "{XIP|FKiQSInstanceID}";
                        oNV.sValue = iQSIID.ToString();
                        nParams.Add(oNV);
                    }
                    if (QSDGUID != Guid.Empty)
                    {
                        oNV.sName = "{XIP|FKiQSInstanceIDXIGUID}";
                        oNV.sValue = QSDGUID.ToString();
                        nParams.Add(oNV);
                    }
                    var Query = oStructure.ReplaceExpressionWithCacheValue(o1Click.Query, nParams);
                    o1Click.Query = Query;
                    var result = o1Click.OneClick_Run(false);
                    foreach (var oBOI in result.Values)
                    {
                        oBOI.BOD = oBOD;
                        //if (oBOI.Attributes.ContainsKey(XIConstant.Key_XIDeleted.ToLower()))
                        //{
                        //    oBOI.Attributes[XIConstant.Key_XIDeleted.ToLower()].sValue = "1";
                        //    oBOI.Attributes[XIConstant.Key_XIDeleted.ToLower()].bDirty = true;
                        //}
                        if (oBOI.Attributes.ContainsKey("dtqsupdateddate"))
                        {
                            oBOI.Attributes["dtqsupdateddate"].sValue = DateTime.Now.ToString();
                            oBOI.Attributes["dtqsupdateddate"].bDirty = true;
                        }
                        XIIBO oBO = new XIIBO();
                        oCR = oBO.Save(oBOI);
                        if (oCR.bOK && oCR.oResult != null)
                        {

                        }
                        else
                        {
                            oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - Error While updating " + XIConstant.Key_XIDeleted + " in Aggregations BO";
                            oXID.SaveErrortoDB(oCResult, iQSIID);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating date to Quotes on QS Reload" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSIID);
            }
            return oCResult;
        }

        public CResult SendQuotestoLead(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iInstanceID = 0;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTemplateName = oParams.Where(m => m.sName.ToLower() == "sTemplateName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserID = oParams.Where(x => x.sName.ToLower() == "iUserID".ToLower()).Select(x => x.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sOrgName = oParams.Where(m => m.sName.ToLower() == "sOrgName".ToLower()).Select(m => m.sValue).FirstOrDefault();


                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> nParms = new List<CNV>();
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();

                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iQSInstanceID = Convert.ToInt32(iID);
                //}
                if (int.TryParse(iID, out iQSInstanceID))
                { }
                XIIXI oXII = new XIIXI(); XIIBO oBOI = new XIIBO(); XIInfraEmail oEmail = new XIInfraEmail();
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(0, iQSInstanceID);
                List<Attachment> oAttachments = new List<Attachment>();
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });
                XIBOInstance oBOIInstance = new XIBOInstance();
                oBOIInstance.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                List<XIIBO> oBOIList = new List<XIIBO>();
                oBOI.XIIValues = oQSI.XIValues;
                oBOIList.Add(oBOI);
                oBOIInstance.oStructureInstance["QS Instance"] = oBOIList;
                string sEmail = oGUIDParams.NMyInstance.Where(m => m.Key == "{XIP|sEmail}").Select(m => m.Value.sValue).FirstOrDefault();
                string sLeadID = oGUIDParams.NMyInstance.Where(m => m.Key == "{XIP|Lead_T.id}").Select(m => m.Value.sValue).FirstOrDefault();
                int iLeadID = 0;
                List<string> sAttachementPath = new List<string>();
                if (int.TryParse(sLeadID, out iLeadID))
                {
                }
                XIIXI oXI = new XIIXI(); string sSubject = string.Empty;
                Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                string sDocIDs = string.Empty;
                List<string> Docs = new List<string>();
                if (!string.IsNullOrEmpty(sTemplateName))
                {
                    var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sTemplateName, "0");
                    if (oContentDef != null && oContentDef.Count() > 0)
                    {
                        XIContentEditors oContent = oContentDef.FirstOrDefault();
                        XIContentEditors oContentC = oContent.GetCopy();
                        if (oContentC.bIsHavingAttachments)
                        {
                            var oAttachmnetContentDef = oContentDef.Where(x => x.ID != oContentC.ID).ToList();
                            XIInfraDocs oXIDocs = new XIInfraDocs();
                            foreach (var oAttachement in oAttachmnetContentDef)
                            {
                                oXIDocs.sOrgName = sOrgName;
                                oXIDocs.iOrgID = iOrgID;
                                string sCopyDocumentName = oAttachement.Name;
                                string sCopyDocumentPath = string.Empty;
                                string physicalPath = System.Web.Hosting.HostingEnvironment.MapPath("~");
                                string sPath = physicalPath.Substring(0, physicalPath.Length) + "\\Content\\ProductNonMergedDocuments\\" + oQSI.XIValues["sInsurer"].sDerivedValue + "_" + oQSI.XIValues["sProductType"].sResolvedValue + "";
                                string[] filePaths = Directory.GetFiles(@"" + sPath + "");
                                string sFileNameC = string.Empty;
                                foreach (var item in filePaths)
                                {
                                    int ipos = item.LastIndexOf("\\") + 1;
                                    string sFileName = item.Substring(ipos, item.Length - ipos);
                                    if (sCopyDocumentName == sFileName.Split('.')[0])
                                    {
                                        sFileNameC = sFileName;
                                        sCopyDocumentPath = item;
                                    }
                                }
                                //var oAttachementC = new Attachment(sCopyDocumentPath);
                                using (MemoryStream ms = new MemoryStream())
                                using (FileStream file = new FileStream(sCopyDocumentPath, FileMode.Open, FileAccess.Read))
                                {
                                    byte[] bytes = new byte[file.Length];
                                    file.Read(bytes, 0, (int)file.Length);
                                    ms.Write(bytes, 0, (int)file.Length);
                                    var oResponse = oXIDocs.SaveDocuments(ms, sFileNameC);
                                    if (oResponse.bOK && oResponse.oResult != null)
                                    {
                                        int iDocID = 0;
                                        string sDocID = (string)oResponse.oResult;
                                        if (int.TryParse(sDocID, out iDocID))
                                        {
                                        }
                                        Docs.Add(iDocID.ToString());
                                    }
                                }

                                //int pos = sCopyDocumentPath.LastIndexOf("\\") + 1;
                                //string sCopyDocFileName = sCopyDocumentPath.Substring(pos, sCopyDocumentPath.Length - pos);
                                //if(sCopyDocFileName!="" && File.Exists(sCopyDocumentPath))
                                //if (!string.IsNullOrEmpty(sCopyDocFileName))
                                //{

                                if (System.IO.File.Exists(sCopyDocumentPath))
                                {
                                    //    FileStream fs = new FileStream(sCopyDocumentPath, FileMode.Open, FileAccess.Read);
                                    //    byte[] tmpBytes = new byte[fs.Length];
                                    //    fs.Read(tmpBytes, 0, Convert.ToInt32(fs.Length));
                                    //    MemoryStream mystream = new MemoryStream(tmpBytes);
                                    //    oAttachments.Add(new Attachment(new MemoryStream(mystream.ToArray()), oAttachement.Name + ".pdf"));
                                    sAttachementPath.Add(sCopyDocumentPath);
                                }
                            }
                        }
                        sDocIDs = string.Join(",", Docs);
                        if (oContentC.Category == 10)
                        {
                            var oResult = oContentC.MergeContentTemplate(oContentC, oBOIInstance);
                            if (oResult.bOK && oResult.oResult != null)
                            {
                                oEmail.EmailID = sEmail;
                                if (!string.IsNullOrEmpty(oContentC.sSubject))
                                {
                                    oEmail.sSubject = oContentC.sSubject;
                                }
                                else
                                {
                                    oEmail.sSubject = oContentC.Name;
                                }
                                oEmail.Bcc = oContentC.sBCC;
                                oEmail.cc = oContentC.sCC;
                                oEmail.From = oContentC.sFrom;
                                oEmail.iServerID = oContentC.FkiServerID;
                                var oMailResult = oEmail.Sendmail(iOrgID, (string)oResult.oResult, oAttachments, 0, XIConstant.Email_SendQuotesToLead, iLeadID, sAttachementPath, 0, oContent.bIsBCCOnly, false, "", sDocIDs);//send mail with attachment
                                if (oMailResult.bOK && oMailResult.oResult != null)
                                {
                                    dictmsg.Add("Success:UserName", "Mail Sent successfully");
                                }
                            }
                        }
                    }
                }
                oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "-iUserID", sUserID, null, null);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing SendQuotestoLead" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public CResult GenerateTemporaryEDIFile(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            XIInstanceBase oXIIB = new XIInstanceBase();
            XIIXI oIXI = new XIIXI();
            XIContentEditors oXIContent = new XIContentEditors();
            XIInfraCache oCache = new XIInfraCache();
            int iPolicyID = 0;
            try
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Generate temporary EDI", sValue = "GenerateTemporaryEDI method Started" });
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructure = oParams.Where(m => m.sName.ToLower() == "sStructure".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTransType = oParams.Where(m => m.sName.ToLower() == "iTransType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPolicyVersion = oParams.Where(m => m.sName.ToLower() == "iPolicyVersion".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(sInstanceID, out iPolicyID))
                { }
                var oPolicyI = oIXI.BOI("ACPolicy_T", sInstanceID, "Create");
                QueryEngine oQE = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> oSQLParams = new List<SqlParameter>();
                oWParams.Add(new XIWhereParams { sField = "FKiProductID", sOperator = "=", sValue = oPolicyI.Attributes["FkiProductID"].sValue });
                oSQLParams.Add(new SqlParameter { ParameterName = "@FKiProductID", Value = oPolicyI.Attributes["FkiProductID"].sValue });
                oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "0" });
                oSQLParams.Add(new SqlParameter { ParameterName = "@iType", Value = "0" });
                oWParams.Add(new XIWhereParams { sField = "iTransactionType", sOperator = "=", sValue = sTransType });
                oSQLParams.Add(new SqlParameter { ParameterName = "@iTransactionType", Value = sTransType });
                oWParams.Add(new XIWhereParams { sField = "sWhenGenerate", sOperator = "=", sValue = "D" });
                oSQLParams.Add(new SqlParameter { ParameterName = "@sWhenGenerate", Value = "D" });
                oQE.AddBO("DocumentTemplate", "", oWParams);
                CResult oCresult1 = oQE.BuildQuery();
                if (oCresult1.bOK && oCresult1.oResult != null)
                {
                    var sSql1 = (string)oCresult1.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE.XIDataSource;
                    oEE.sSQL = sSql1;
                    oEE.SqlParams = oSQLParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                        oBOIList1.ForEach(x => x.BOD = oBOD1);
                        if (oBOIList1 != null && oBOIList1.Count > 0)
                        {
                            foreach (var oBOI in oBOIList1)
                            {
                                var templateID = oBOI.Attributes["FkiTemplateID"].sValue;
                                XIContentEditors oContentDef = new XIContentEditors();
                                List<XIContentEditors> oContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", templateID);
                                if (oContent != null && oContent.Count() > 0)
                                {
                                    oContentDef = oContent.FirstOrDefault();
                                }
                                var oLIst = oIXI.BOI(sBOName, sInstanceID).Structure(sStructure).XILoad();
                                var oPolicyVersion = oLIst.oSubStructureI("Policy Version").oBOIList.Where(x => x.AttributeI("id").sValue == sPolicyVersion).ToList();
                                oLIst.oStructureInstance.Values.First().First().SubChildI = (Dictionary<string, List<XIIBO>>)oLIst.oParent;
                                //oLIst.oStructureInstance.Values.First().First().SubChildI.Add("Policy Version", oPolicyVersion);
                                if (oContentDef != null && oLIst != null && oLIst.oStructureInstance != null)
                                {
                                    XIContentEditors oDocumentContent = oContentDef;
                                    oXIContent.sSessionID = "";
                                    var sStructureresult = oXIContent.MergeContentTemplate(oDocumentContent, oLIst);
                                    if (sStructureresult.bOK && sStructureresult.oResult != null)
                                    {
                                        string sContent = (string)sStructureresult.oResult;
                                        List<CNV> oNV = new List<CNV>();
                                        oNV.Add(new CNV { sName = "iInstanceID", sValue = sInstanceID });
                                        XIIBO oEDIBOI = oIXI.BOI("EDI_Transaction", "", "", oNV);
                                        if (oEDIBOI == null)
                                        {
                                            XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "EDI_Transaction"); //oXID.Get_BODefinition("EDI_Transaction").oResult;
                                            oBOI.BOD = oBOD;
                                            oBOI.Attributes["ID"] = new XIIAttribute { sName = "ID", sValue = null, bDirty = true };
                                            oBOI.Attributes["sMergedText"] = new XIIAttribute { sName = "sMergedText", sValue = sContent.Replace("'", "''"), bDirty = true };
                                            oBOI.Attributes["FkiBOID"] = new XIIAttribute { sName = "FkiBOID", sValue = oLIst.BOI.BOD.BOID.ToString(), bDirty = true };
                                            oBOI.Attributes["FkiTemplateID"] = new XIIAttribute { sName = "FkiTemplateID", sValue = oDocumentContent.ID.ToString(), bDirty = true };
                                            oBOI.Attributes["iStatus"] = new XIIAttribute { sName = "iStatus", sValue = "0", bDirty = true };
                                            oBOI.Attributes["iInstanceID"] = new XIIAttribute { sName = "iInstanceID", sValue = sInstanceID, bDirty = true };
                                            oBOI.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = oDocumentContent.Category.ToString(), bDirty = true };
                                            oBOI.Attributes["FKiProductID"] = new XIIAttribute { sName = "FKiProductID", sValue = oPolicyI.Attributes["FkiProductID"].sValue, bDirty = true };
                                            if (!string.IsNullOrEmpty(oDocumentContent.sTemplateHeader))
                                            {
                                                oBOI.Attributes["sMergedTextHeader"] = new XIIAttribute { sName = "sMergedTextHeader", sValue = oDocumentContent.sTemplateHeader, bDirty = true };
                                            }
                                            var response = oBOI.Save(oBOI);
                                        }
                                        else
                                        {
                                            oEDIBOI.Attributes["sMergedText"].sValue = sContent.Replace("'", "''");
                                            oEDIBOI.Attributes["sMergedText"].bDirty = true;
                                            var response = oBOI.Save(oEDIBOI);
                                        }
                                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                                        oCResult.oTraceStack.Add(new CNV { sName = "GenarateCSV", sValue = "Success:CSV Generated Successfully" });
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.oTraceStack.Add(new CNV { sName = "GenarateCSV", sValue = "Error: Generate CSV Method" + oCResult.sMessage });
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oResult = "Error";
                oXIIB.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }

        public CResult CancelAddon(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string PolicyID = oParams.Where(m => m.sName.ToLower() == "iPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string AddonID = oParams.Where(m => m.sName.ToLower() == "iAddonID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sPolicyNo = oParams.Where(m => m.sName.ToLower() == "sPolicyNo".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTransactionType = oParams.Where(m => m.sName.ToLower() == "sTransactionType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(PolicyID, out iPolicyID))
                { }
                if (int.TryParse(iQSIID, out iQSInstanceID))
                { }
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> nParms = new List<CNV>();
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                PolicyID = nParms.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                oResult.sMessage = "Info: [PolicyID :" + PolicyID + "_AddonID: " + AddonID;
                oXID.SaveErrortoDB(oResult, iQSInstanceID, iPolicyID);
                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>(StringComparer.CurrentCultureIgnoreCase);
                int iInsatnceID = 0;
                if (int.TryParse(iQSIID, out iInsatnceID))
                { }
                XIIQS oQsInstance = oIXI.GetQSXIValuesByQSIID(iInsatnceID.ToString());
                var Premium = oQsInstance.XIIValues("rAddonPremium");
                if (!OQSD.ContainsKey("dDate"))
                {
                    OQSD["dDate"] = new CNV { sName = "dDate", sValue = DateTime.Now.ToString() };
                }
                if (!OQSD.ContainsKey("dInsurerCallDate"))
                {
                    OQSD["dInsurerCallDate"] = new CNV { sName = "dInsurerCallDate", sValue = DateTime.Now.ToString() };
                }
                if (!OQSD.ContainsKey("FKiACPolicyID"))
                {
                    OQSD["FKiACPolicyID"] = new CNV { sName = "FKiACPolicyID", sValue = PolicyID };
                }
                if (!OQSD.ContainsKey("FKiAddonID"))
                {
                    OQSD["FKiAddonID"] = new CNV { sName = "FKiAddonID", sValue = AddonID };
                }
                if (!OQSD.ContainsKey("rCancelRate"))
                {
                    OQSD["rCancelRate"] = new CNV { sName = "rCancelRate", sValue = String.Format("{0:0.00}", Premium) };
                }
                if (!OQSD.ContainsKey("rCancellationFee"))
                {
                    OQSD["rCancellationFee"] = new CNV { sName = "rCancellationFee", sValue = "0" };
                }
                if (!OQSD.ContainsKey("rCancelRateManual"))
                {
                    OQSD["rCancelRateManual"] = new CNV { sName = "rCancelRateManual", sValue = String.Format("{0:0.00}", Premium) };
                }
                if (!OQSD.ContainsKey("FKsPolicyNo"))
                {
                    OQSD["FKsPolicyNo"] = new CNV { sName = "FKsPolicyNo", sValue = sPolicyNo };
                }
                var sCancelPolicyID = "";
                List<CNV> oCancelNV = new List<CNV>();
                oCancelNV.Add(new CNV { sName = "FKiAddonID", sValue = AddonID });
                var oCancelPI = oIXI.BOI("CancelPolicy_T", "", "Create", oCancelNV);
                if (oCancelPI != null)
                {
                    sCancelPolicyID = oCancelPI.Attributes[oCancelPI.BOD.sPrimaryKey].sValue;
                }
                // Create Cancel policy
                var CancelPolicyData = oBO.BuildBoObject("CancelPolicy_T", "Create", OQSD, sCancelPolicyID);
                if (CancelPolicyData.xiStatus == 0 && CancelPolicyData.oResult != null)
                {
                    List<CNV> oNVParams = new List<CNV>();
                    oParams.Add(new CNV { sName = "sBOName", sValue = sBOName });
                    oParams.Add(new CNV { sName = "sStructureName", sValue = sStructureName });
                    oParams.Add(new CNV { sName = "sTransactionType", sValue = sTransactionType });
                    GenerateAddonMTA(oParams);

                }
                var oAddonI = oIXI.BOI("ACPurchase_T", AddonID, "Create");
                if (oAddonI.Attributes.ContainsKey("iStatus"))
                {
                    oAddonI.Attributes["iStatus"].sValue = oAddonI.BOD.Attributes["istatus"].OptionList.Where(m => m.sOptionName == "Cancelled").Select(m => m.sValues).FirstOrDefault();
                    oAddonI.Attributes["iStatus"].bDirty = true;
                    // Change Addon Status to Cancelled
                    var UpdatedAddonData = oBO.Save(oAddonI);
                    if (UpdatedAddonData.bOK && UpdatedAddonData.oResult != null)
                    {
                        oResult.sMessage = "Info: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + "] - Changed Addon Status to Cancelled For this AddonID:" + AddonID;
                        oXID.SaveErrortoDB(oResult, iQSInstanceID, iPolicyID);
                    }
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQSInstanceID, iPolicyID);
            }
            return oResult;
        }
        public CResult GenerateAddonMTA(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sTransactionType = oParams.Where(m => m.sName.ToLower() == "sTransactionType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (oParams != null && oParams.Count() > 0)
                {
                    oParams.Add(new CNV { sName = "Object", sValue = sBOName });
                }
                XICacheInstance oGUIDParams = oCache.GetAllParamsUnderGUID(sSessionID, sGUID, null);
                List<CNV> nParms = new List<CNV>();
                nParms = oGUIDParams.NMyInstance.Select(m => new CNV { sName = m.Key, sValue = m.Value.sValue, sType = m.Value.sType }).ToList();
                string iACPolicyID = nParms.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                //string sProductID = nParms.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sProductAddOnID = nParms.Where(m => m.sName.ToLower() == "{XIP|iInstanceID}".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIDStructure oXIDStructure = new XIDStructure();
                XIIXI oIXI = new XIIXI();
                var oLIst = oIXI.BOI(sBOName, iACPolicyID.ToString());
                if (oLIst != null && oLIst.Attributes.ContainsKey("FKiClassID"))
                {
                    var sclassID = oLIst.Attributes["FKiClassID"].sValue;
                    nParms.Add(new CNV { sName = "{xi.p|-iClassID}", sValue = sclassID });
                }
                var oInstance = oLIst.Structure(sStructureName).XILoad();
                string sOneClickName = "ProductAddon Document template";
                XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sOneClickName, null);
                XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                nParms.Add(new CNV { sName = "{XIP|iTransactionType}", sValue = sTransactionType });
                o1ClickC.ReplaceFKExpressions(nParms);
                o1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, nParms);
                Dictionary<string, XIIBO> oRes = o1ClickC.OneClick_Run(false);
                if (oRes != null && oRes.Count() > 0)
                {
                    var oBOIList = oRes.Values.ToList();
                    foreach (var template in oBOIList)
                    {
                        string sDocumentID = string.Empty; string sWhenGenerate = string.Empty;
                        if (template.Attributes.ContainsKey("sWhenGenerate"))
                        {
                            sWhenGenerate = template.AttributeI("sWhenGenerate").sValue;
                        }
                        if (template.Attributes.ContainsKey("FKiTemplateID"))
                        {
                            sDocumentID = template.AttributeI("FKiTemplateID").sValue;
                        }
                        int iDocumentID = 0;
                        if (!string.IsNullOrEmpty(sDocumentID))
                        {
                            iDocumentID = Convert.ToInt32(sDocumentID);
                        }
                        if (iDocumentID != 0)
                        {
                            string sAddonID = string.Empty;
                            if (template.Attributes.ContainsKey("FKiProductAddonID"))
                            {
                                sAddonID = template.AttributeI("FKiProductAddonID").sValue;
                            }
                            int iAddonID = 0;
                            if (!string.IsNullOrEmpty(sAddonID))
                            {
                                iAddonID = Convert.ToInt32(sAddonID);
                            }
                            string sSubject = string.Empty;
                            if (template.Attributes.ContainsKey("sDefaultSubject"))
                            {
                                sSubject = template.AttributeI("sDefaultSubject").sValue;
                            }
                            if (oParams != null && oParams.Count() > 0)
                            {
                                //var stuffToRemove = oParams.SingleOrDefault(s => s.sName == "DocumentID");
                                //oParams.Remove(stuffToRemove);
                                //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "Subject");
                                //oParams.Remove(stuffToRemove);
                                //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "iAddonID");
                                //oParams.Remove(stuffToRemove);
                                //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "iInstanceID");
                                //oParams.Remove(stuffToRemove);
                                //stuffToRemove = oParams.SingleOrDefault(s => s.sName == "sWhenGenerate");
                                //oParams.Remove(stuffToRemove);
                                //CNV oNV = new CNV();
                                //oNV = new CNV();
                                //oNV.sName = "DocumentID";
                                //oNV.sValue = iDocumentID.ToString();
                                //oParams.Add(oNV);
                                //oNV = new CNV();
                                //oNV.sName = "Subject";
                                //oNV.sValue = sSubject;
                                //oParams.Add(oNV);
                                //oNV = new CNV();
                                //oNV.sName = "iAddonID";
                                //oNV.sValue = iAddonID.ToString();
                                //oParams.Add(oNV);
                                //oNV = new CNV();
                                //oNV.sName = "iInstanceID";
                                //oNV.sValue = iACPolicyID.ToString();
                                //oParams.Add(oNV);

                                if (oParams.Where(s => s.sName == "DocumentID").FirstOrDefault() != null)
                                {
                                    oParams.Where(s => s.sName == "DocumentID").FirstOrDefault().sValue = iDocumentID.ToString();
                                }
                                else
                                {
                                    oParams.Add(new CNV { sName = "DocumentID", sValue = iDocumentID.ToString() });
                                }
                                if (oParams.Where(s => s.sName == "Subject").FirstOrDefault() != null)
                                {
                                    oParams.Where(s => s.sName == "Subject").FirstOrDefault().sValue = sSubject.ToString();
                                }
                                else
                                {
                                    oParams.Add(new CNV { sName = "Subject", sValue = sSubject });
                                }
                                if (oParams.Where(s => s.sName == "iAddonID").FirstOrDefault() != null)
                                {
                                    oParams.Where(s => s.sName == "iAddonID").FirstOrDefault().sValue = iAddonID.ToString();
                                }
                                else
                                {
                                    oParams.Add(new CNV { sName = "iAddonID", sValue = iAddonID.ToString() });
                                }
                                if (oParams.Where(s => s.sName == "iInstanceID").FirstOrDefault() != null)
                                {
                                    oParams.Where(s => s.sName == "iInstanceID").FirstOrDefault().sValue = iACPolicyID.ToString();
                                }
                                else
                                {
                                    oParams.Add(new CNV { sName = "iInstanceID", sValue = iACPolicyID.ToString() });
                                }
                                if (oParams.Where(s => s.sName == "sWhenGenerate").FirstOrDefault() != null)
                                {
                                    oParams.Where(s => s.sName == "sWhenGenerate").FirstOrDefault().sValue = sWhenGenerate.ToString();
                                }
                                else
                                {
                                    oParams.Add(new CNV { sName = "sWhenGenerate", sValue = sWhenGenerate });
                                }
                            }
                            XIInfraDocumentComponent oDocumentComp = new XIInfraDocumentComponent();
                            oDocumentComp.oXIBOInstance = oInstance;
                            oDocumentComp.XILoad(oParams);

                        }
                    }
                    oCResult.oTraceStack.Add(new CNV { sName = "Policy Documents", sValue = "Success : Policy Documents generated successfully for MTA Addon" });
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MTAAddon" });
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }

        public CResult CalculateAgedDebt(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                var sPolicyID = oParams.Where(m => m.sName.ToLower() == "policyid").FirstOrDefault();
                if (sPolicyID != null)
                {
                    int.TryParse(sPolicyID.sValue, out iPolicyID);
                }
                int iCustomerID = 0;
                var sCustomerID = oParams.Where(m => m.sName.ToLower() == "customerid").FirstOrDefault();
                if (sCustomerID != null)
                {
                    int.TryParse(sCustomerID.sValue, out iCustomerID);
                }
                Dictionary<string, XIIValue> XIIValues = new Dictionary<string, XIIValue>();
                XIIValues["dAsOfDate"] = new XIIValue() { sValue = DateTime.Now.ToString() };
                XIIValues["oSelect"] = new XIIValue() { sValue = 0.ToString() };
                TrailBalance oTBal = new TrailBalance();
                var Result = oTBal.iBO_getAttrAGEDebtACT(iPolicyID, iCustomerID, "_rshort", XIIValues);
                //var Result = new { sName = "rAgedDebt", sValue = "125.00" };
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oResult = Result;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MTAAddon" });
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }

        public CResult GetPolicyAlertInfo(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                var sPolicyID = oParams.Where(m => m.sName.ToLower() == "policyid").FirstOrDefault();
                if (sPolicyID != null)
                {
                    int.TryParse(sPolicyID.sValue, out iPolicyID);
                }
                Dictionary<string, string> info = new Dictionary<string, string>();
                XIIBO oBOI = new XIIBO();
                if (iPolicyID > 0)
                {
                    XIIXI oXI = new XIIXI();
                    oBOI = oXI.BOI("ACPolicy_T", iPolicyID.ToString());
                    if (oBOI.Attributes.ContainsKey("snotes"))
                    {
                        info["AlertInfo"] = oBOI.Attributes["snotes"].sValue;
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oResult = info;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MTAAddon" });
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }
        public CResult GetLeadAlertInfo(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            int iLeadID = 0;
            try
            {
                oTrace.oTrace.Add(oCR.oTrace);
                var sLeadID = oParams.Where(m => m.sName.ToLower() == "leadid").FirstOrDefault();
                if (sLeadID != null)
                {
                    int.TryParse(sLeadID.sValue, out iLeadID);
                }
                Dictionary<string, string> info = new Dictionary<string, string>();
                XIIBO oBOI = new XIIBO();
                if (iLeadID > 0)
                {
                    XIIXI oXI = new XIIXI();
                    oBOI = oXI.BOI("Lead_T", iLeadID.ToString());
                    if (oBOI.Attributes.ContainsKey("snotes"))
                    {
                        info["AlertInfo"] = oBOI.Attributes["snotes"].sValue;
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oResult = info;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Loading Lead notes" });
                oCResult.sMessage = "ERROR: [LeadID: " + iLeadID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, 0);
            }
            return oCResult;
        }
        public CResult Audit_Policy(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                var iInstanceID = 0;
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iLeadID = oParams.Where(m => m.sName.ToLower() == "iLeadID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                if (!string.IsNullOrEmpty(iACPolicyID) && int.TryParse(iACPolicyID, out iPolicyID))
                { }
                else if (!string.IsNullOrEmpty(iLeadID) && int.TryParse(iLeadID, out iPolicyID))
                { }
                string iInsID = oParams.Where(m => m.sName.ToLower() == "iAuditID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInfo = oParams.Where(m => m.sName.ToLower() == "sAuditInfo".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (string.IsNullOrEmpty(sInfo))
                {
                    sInfo = oParams.Where(m => m.sName.ToLower() == "sAuditInfo1".ToLower()).Select(m => m.sValue).FirstOrDefault();
                }
                string sPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iBODID = oParams.Where(m => m.sName.ToLower() == "iBODID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIBO oBOI = new XIIBO();
                oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO_All, "Audit_T", null);
                //oBOICopy.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, oBOInstance.BOD.sAuditBOName);
                if (iInsID != null)
                {
                    int.TryParse(iInsID, out iInstanceID);
                }
                oBOI.SetAttribute(oBOI.BOD.sPrimaryKey, iInstanceID.ToString());
                if (!string.IsNullOrEmpty(iBODID)) { oBOI.SetAttribute("FKiBOID", iBODID); }
                else
                {
                    oBOI.SetAttribute("FKiBOID", "17");
                }
                if (!string.IsNullOrEmpty(sBOName))
                {
                    //from Algorithmlines doesn't support "_" symbol
                    if (sBOName.ToLower() == "lead")
                    {
                        sBOName = "Lead_T";
                    }
                    oBOI.SetAttribute("sBOName", sBOName);
                }
                else
                {
                    oBOI.SetAttribute("sBOName", "ACPolicy_T");
                }
                oBOI.SetAttribute("sData", sInfo);
                oBOI.SetAttribute("sOldData", sInfo);
                //oAuditBOI.SetAttribute("XICreatedBy", "");
                //oAuditBOI.SetAttribute("XICreatedWhen", DateTime.Now.ToString());
                oBOI.SetAttribute("sType", "Info");
                oBOI.SetAttribute("sActivity", "Info");
                oBOI.SetAttribute("FKiInstanceID", iPolicyID.ToString());
                oBOI.SetAttribute("FKiPolicyVersionID", sPolicyVersionID);
                oBOI.SetAttribute("iHandler", HttpContext.Current.Session["UserID"].ToString());
                var oAuditBOResponse = oBOI.Save(oBOI);
                if (oAuditBOResponse.bOK && oAuditBOResponse.oResult != null)
                {
                    var oRes = (XIIBO)oAuditBOResponse.oResult;
                    var iID = oRes.Attributes.Values.Where(m => m.sName.ToLower() == oBOI.BOD.sPrimaryKey.ToLower()).FirstOrDefault();
                    if (iID != null)
                    {
                        int.TryParse(iID.sValue, out iInstanceID);
                    }
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                    oCResult.oResult = iInstanceID;
                }
                else
                {
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MTAAddon" });
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }
        public CResult SendChaseRequirementNotification(List<CNV> oParams, XIIBO oBOI)
        {
            CResult oCResult = new CResult();
            try
            {
                string sOrgID = oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sXiLink = oParams.Where(m => m.sName.ToLower() == "sXiLink".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var oXiLink = (XILink)oCache.GetObjectFromCache(XIConstant.CacheXILink, sXiLink, "");
                string sTemplate = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sTemplate".ToLower()).Select(m => m.Value).FirstOrDefault();
                XIContentEditors oContent = new XIContentEditors();
                List<XIIBO> nBOI = new List<XIIBO>();
                Policy oPolicy = new Policy();
                //List<CNV> oParams = new List<CNV>();
                CNV oCNV = new CNV();
                XIBOInstance oBOIns = new XIBOInstance();
                oBOIns.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                nBOI.Add(oBOI);
                if (oBOI.BOD != null)
                {
                    oBOIns.oStructureInstance[oBOI.BOD.Name] = nBOI;
                }
                var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sTemplate, "0");
                if (oContentDef != null && oContentDef.Count() > 0)
                {
                    oContent = oContentDef.FirstOrDefault();
                }
                var Result = oContent.MergeContentTemplate(oContent, oBOIns);
                if (Result.bOK && Result.oResult != null)
                {
                    XIInfraNotifications oNotifications = new XIInfraNotifications();
                    string sUserID = string.Empty; string sInstanceID = string.Empty; string sDocumentID = string.Empty;
                    if (oBOI.Attributes.ContainsKey("FKiUserID"))
                    {
                        sUserID = oBOI.AttributeI("FKiUserID").sValue;
                    }
                    if (oBOI.Attributes.ContainsKey("FKiPolicyID"))
                    {
                        sInstanceID = oBOI.AttributeI("FKiPolicyID").sValue;
                    }
                    if (oBOI.Attributes.ContainsKey("FKizXDoc"))
                    {
                        sDocumentID = oBOI.AttributeI("FKizXDoc").sValue;
                    }
                    oNotifications.iStatus = 10;
                    oNotifications.Create(sUserID, oContent.Name, sDocumentID, oContent.sSubject, (string)Result.oResult, sInstanceID, sOrgID);
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                    oCResult.oResult = Result;
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing ChaseRequirementNotification" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        #region XIAPI

        public CResult SaveQSAPI(XIIQS oQSInstance)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            string sFieldOrigin = string.Empty;
            try
            {
                // TO DO - return type should be an object

                // TO DO - this method means, there is a full object model in memory with steps and maybe sections
                // and this code needs to persist this into the DB
                XIIQS oQSIns = null;
                Dictionary<string, object> Params = new Dictionary<string, object>();
                //Params["FKiQSDefinitionID"] = oQSInstance.FKiQSDefinitionID;
                oQSIns = new XIIQS();
                oQSIns.sQSName = oQSInstance.QSDefinition.sName;
                oQSIns.iCurrentStepIDXIGUID = oQSInstance.iCurrentStepIDXIGUID;
                oQSIns.FKiQSDefinitionID = oQSInstance.FKiQSDefinitionID;
                oQSIns.FKiQSDefinitionIDXIGUID = oQSInstance.FKiQSDefinitionIDXIGUID;
                oQSIns.FKiBODID = oQSInstance.FKiBODID;
                oQSIns.iBOIID = oQSInstance.iBOIID;
                oQSIns.FKiClassID = oQSInstance.QSDefinition.FKiClassID;
                oQSIns.CreatedTime = DateTime.Now;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Info API: Connection Started" });
                XIDBAPI Connection = new XIDBAPI(ConfigurationManager.ConnectionStrings["XIDNADbContext"].ConnectionString);
                oQSIns = Connection.Insert<XIIQS>(oQSIns, "XIQSInstance_T", "ID");
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Info API: Insert QS Completed" });
                oQSInstance.ID = oQSIns.ID;
                XIInfraCache oCache = new XIInfraCache();
                XIIBO BulkInsert = new XIIBO();
                List<XIIBO> oBulkBO = new List<XIIBO>();
                XIIValue oFIns = new XIIValue();
                oFIns = new XIIValue();
                XIIXI oXII = new XIIXI();
                List<XIDFieldOrigin> oOrigin = new List<XIDFieldOrigin>();
                // Get all field origins get type api from cache
                foreach (var items in oQSInstance.XIValues)
                {
                    sFieldOrigin = items.Key;
                    if (items.Value.FKiFieldOriginID == 0) continue;
                    XIIBO oxiibo = new XIIBO();
                    var FieldOrigin = oQSInstance.QSDefinition.XIDFieldOrigin.Values.Where(m => m.ID == items.Value.FKiFieldOriginID).FirstOrDefault();
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Info API: Field Origin " + FieldOrigin.sName });
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Info API: Field Origin ID" + FieldOrigin.ID });
                    if (FieldOrigin.DataType.sBaseDataType.ToLower() == "int")
                    {
                        int ival;
                        if (int.TryParse(items.Value.sValue, out ival))
                        {
                            oFIns.iValue = ival;
                        }
                        else
                        {
                            oFIns.iValue = 0;
                        }
                    }
                    else if (FieldOrigin.DataType.sBaseDataType.ToLower() == "datetime")
                    {
                        //if (!string.IsNullOrEmpty(items.Value.sValue))
                        //{
                        //    oFIns.dValue = Convert.ToDateTime(items.Value.sValue);
                        //}
                    }
                    else if (FieldOrigin.DataType.sBaseDataType.ToLower() == "decimal")
                    {
                        decimal rval;
                        if (decimal.TryParse(items.Value.sValue, out rval))
                        {
                            oFIns.rValue = rval;
                        }
                        else
                        {
                            oFIns.rValue = 0;
                        }
                    }
                    else if (FieldOrigin.DataType.sBaseDataType.ToLower() == "boolean")
                    {
                        if (items.Value.sValue == "on")
                        {
                            oFIns.bValue = true;
                        }
                        else
                        {
                            oFIns.bValue = false;
                        }

                    }
                    oxiibo.SetAttribute("rValue", oFIns.rValue.ToString());
                    oxiibo.SetAttribute("bValue", oFIns.bValue.ToString());
                    oxiibo.SetAttribute("iValue", oFIns.iValue.ToString());
                    //if (oFIns.dValue.ToString() == "1/1/0001 12:00:00 AM")
                    //{
                    //    oFIns.dValue = Convert.ToDateTime("1/1/1900 12:00:00 AM");
                    //}

                    oxiibo.SetAttribute("sDerivedValue", items.Value.sDerivedValue);
                    oxiibo.SetAttribute("sValue", items.Value.sValue);
                    oxiibo.SetAttribute("FKiQSInstanceID", oQSIns.ID.ToString());
                    oxiibo.SetAttribute("FKiFieldOriginID", FieldOrigin.ID.ToString());
                    oxiibo.SetAttribute("dValue", DateTime.Now.ToString());

                    oFIns.sDerivedValue = items.Value.sDerivedValue;
                    oFIns.sValue = items.Value.sValue;
                    if (string.IsNullOrEmpty(oFIns.sDerivedValue))
                    {
                        if (FieldOrigin.DataType.sBaseDataType.ToLower() == "boolean")
                        {
                            oFIns.sDerivedValue = items.Key;
                            oxiibo.SetAttribute("sDerivedValue", items.Key);
                        }
                        else
                        {
                            oFIns.sDerivedValue = items.Value.sValue;
                            oxiibo.SetAttribute("sDerivedValue", items.Value.sValue);
                        }
                    }

                    oFIns.FKiQSInstanceID = oQSIns.ID;
                    oFIns.FKiFieldDefinitionID = items.Value.FKiFieldDefinitionID;
                    oFIns.FKiFieldOriginID = FieldOrigin.ID;
                    oFIns.dValue = DateTime.Now;
                    //oFIns = Connection.Insert<XIIValue>(oFIns, "XIFieldInstance_T", "ID");
                    oBulkBO.Add(oxiibo);
                }
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Info API: Bulk object building completed" });
                if (oBulkBO != null && oBulkBO.Count() > 0)
                {
                    var BoD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XIFieldInstance_T", null);
                    oBulkBO.ForEach(f => f.BOD = BoD);
                    var MakeDatatble = BulkInsert.MakeBulkSqlTable(oBulkBO);
                    BulkInsert.SaveBulk(MakeDatatble, BoD.iDataSourceXIGUID.ToString(), "XIFieldInstance_T");
                }
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Info API: Insert XIValues Completed" });
                Dictionary<string, CNV> XIValues = new Dictionary<string, CNV>();
                XIValues = oQSInstance.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });
                //Save Main Driver Details
                //List<CNV> oParams = new List<CNV>();
                //oParams.Add(new CNV() { sName = "iQSInstanceID", sValue = oQSInstance.ID.ToString() });
                //oParams.Add(new CNV() { sName = "sGUID", sValue = string.Empty });
                //oParams.Add(new CNV() { sName = "sMainDriver", sValue = "true" });
                //oParams.Add(new CNV() { sName = "bIsAPI", sValue = "yes" });

                //oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Driver is Started" });
                //oCR = InsertDriver(oParams);
                //if (oCR.bOK && oCR.oResult != null)
                //{
                //    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Driver is Failed" });
                //}
                //else
                //{
                //    oCResult.oTraceStack.AddRange(oCR.oTraceStack);
                //}

                XIIBO oBOI = new XIIBO();
                //Save Main Driver Claim Details
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Claim is Started" });
                var oClaim = oBOI.BuildBoObject("Claim_T", "Create", XIValues);
                if (!oClaim.bOK)
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Claim is Failed" });
                }
                else
                {
                    oCResult.oTraceStack.AddRange(oCR.oTraceStack);
                }
                //Save Main Driver Conviction Details
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Conviction is Started" });
                var oConviction = oBOI.BuildBoObject("Conviction_T", "Create", XIValues);
                if (!oConviction.bOK)
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Conviction is Failed" });
                }
                else
                {
                    oCResult.oTraceStack.AddRange(oCR.oTraceStack);
                }
                //Save Main Driver Medical Condition Details
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Medical Condiction is Started" });
                var oMedCond = oBOI.BuildBoObject("MedicalCondition_T", "Create", XIValues);
                if (!oMedCond.bOK)
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Medical Condiction is Failed" });
                }
                else
                {
                    oCResult.oTraceStack.AddRange(oCR.oTraceStack);
                }
                //Save Vehicle Details
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Vehicle is Started" });
                var oVehicle = oBOI.BuildBoObject("Vehicle_T", "Create", XIValues);
                if (!oMedCond.bOK)
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Vehicle is Failed" });
                }
                else
                {
                    oCResult.oTraceStack.AddRange(oCR.oTraceStack);
                }

                //Save Lead
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Lead is Started" });
                var oLead = oBOI.BuildBoObject("Lead_T", "Create", XIValues);
                if (!oMedCond.bOK)
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving Lead is Failed" });
                }
                else
                {
                    oCResult.oTraceStack.AddRange(oCR.oTraceStack);
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Saving QS Instance is Failed" });
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Field Origin Failed " + sFieldOrigin });
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error API: Execption " + ex.ToString() });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            oCResult.oResult = oQSInstance;
            return oCResult;
        }
        #endregion XIAPI

        public CResult InsertCall(List<CNV> Params)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                string sGUID = Params.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = Params.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOGroupName = Params.Where(m => m.sName.ToLower() == "sBOGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBO = Params.Where(m => m.sName.ToLower() == "sBO".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iInstanceID = Params.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //var oNVList = Params.Where(m => m.sType.ToLower() == "attribute").ToList();
                XIIXI oXII = new XIIXI();
                var oBOI = oXII.BOI(sBO, iInstanceID);
                if (oBOI != null)
                {
                    if (oBOI.Attributes.ContainsKey("fkiacpolicyid"))
                    {
                        if (int.TryParse(oBOI.Attributes["fkiacpolicyid"].sValue, out iPolicyID))
                        { }
                    }
                    XIIBO oCallI = new XIIBO();
                    XIInfraCache oCache = new XIInfraCache();
                    XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Call_T", null);
                    oCallI.BOD = oBOD;
                    oCallI.LoadBOI(sBOGroupName);
                    if (oCallI.Attributes.ContainsKey("fkiacpolicyid") && oBOI.Attributes.ContainsKey("fkiacpolicyid"))
                    {
                        oCallI.Attributes["fkiacpolicyid"].sValue = oBOI.Attributes["fkiacpolicyid"].sValue;
                    }
                    if (oCallI.Attributes.ContainsKey("sname") && oBOI.Attributes.ContainsKey("sname"))
                    {
                        oCallI.Attributes["sname"].sValue = oBOI.Attributes["sname"].sValue;
                    }
                    if (oCallI.Attributes.ContainsKey("snotes") && oBOI.Attributes.ContainsKey("snotes"))
                    {
                        oCallI.Attributes["snotes"].sValue = oBOI.Attributes["snotes"].sValue;
                    }
                    if (oCallI.Attributes.ContainsKey("istatus"))
                    {
                        oCallI.Attributes["istatus"].sValue = "10";
                    }
                    oCResult = oCallI.Save(oCallI, false);
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }
        public CResult SignalRInsertCall(List<CNV> Params)
        {
            // XIDBAPI Connection = new XIDBAPI(ConfigurationManager.ConnectionStrings["XIDNADbContext"].ConnectionString);
            SqlConnection ConnA = new SqlConnection(ConfigurationManager.ConnectionStrings["XIDNADbContext"].ConnectionString);
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                string sGUID = Params.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = Params.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOGroupName = Params.Where(m => m.sName.ToLower() == "sBOGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBO = Params.Where(m => m.sName.ToLower() == "sBO".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iInstanceID = Params.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //var oNVList = Params.Where(m => m.sType.ToLower() == "attribute").ToList();
                XIIXI oXII = new XIIXI();
                XIIBO oBOI = new XIIBO();
                if (sBO == "XI1Click")
                {
                    oBOI = oXII.BOI(sBO, iInstanceID);
                }
                else
                {
                    oBOI = oXII.BOI(sBO, iInstanceID);
                }
                XIIBO oCallI = new XIIBO();
                XIInfraCache oCache = new XIInfraCache();
                XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "SignalRDependencyMasterTable", null);
                oCallI.BOD = oBOD;
                oCallI.LoadBOI(sBOGroupName);
                var PresentTableID = "";
                if (sBO == "XI1Click")
                {
                    PresentTableID = oBOI.Attributes["BOID"].sValue;
                }
                else
                {
                    PresentTableID = oBOI.Attributes["iNotificationBO"].sValue;
                }

                XIDBO oBOD2 = new XIDBO();
                XIInfraCache oCache2 = new XIInfraCache();
                oBOD2 = (XIDBO)oCache2.GetObjectFromCache(XIConstant.CacheBO_All, null, PresentTableID);
                var Findtablenames = oBOD2.TableName;
                string sOneClickName = "XISignalR Dependency Master Table";
                XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sOneClickName, null);
                XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                List<CNV> nParms = new List<CNV>();
                CNV oCNV = new CNV();
                oCNV.sName = "{XIP|PresentTableID}";
                oCNV.sValue = PresentTableID;
                nParms.Add(oCNV);
                o1ClickC.ReplaceFKExpressions(nParms);
                var Result = o1ClickC.GetList();
                List<XIIBO> oListQuotes = new List<XIIBO>();
                if (Result.bOK || Result.oResult != null)
                {
                    string TableID = "";
                    oListQuotes = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                    foreach (var item in oListQuotes)
                    {
                        TableID = item.Attributes["itableid"].sValue;
                        var PreviousSelectedFields = item.Attributes["sSelectedFields"].sValue;
                        PreviousSelectedFields = PreviousSelectedFields.Replace(", ", ",");
                        if (TableID == PresentTableID)
                        {
                            var presentSelectedFields = "";
                            var EntireSFields = "";
                            if (sBO == "XI1Click")
                            {
                                presentSelectedFields = oBOI.Attributes["SelectFields"].sValue;
                            }
                            else
                            {
                                presentSelectedFields = oBOI.Attributes["sBOSelectedFields"].sValue;
                                //var BOAttributeID = oBOI.Attributes["sBOSelectedFields"].sValue;
                                ////XIDBO oBOD1 = new XIDBO();
                                ////XIInfraCache oCache1 = new XIInfraCache();
                                ////oBOD1 = (XIDBO)oCache1.GetObjectFromCache(XIConstant.CacheBO_All, null, PresentTableID);
                                //var SelectedItem = oBOD2.Attributes.ToList();
                                //presentSelectedFields = SelectedItem.Where(r => BOAttributeID.Contains(r.Value.ID.ToString())).Select(t => t.Value.Name).FirstOrDefault();
                            }
                            string stableName = presentSelectedFields + "," + PreviousSelectedFields;
                            string[] FieldsSplitting = stableName.Split(',');
                            foreach (var items in FieldsSplitting)
                            {
                                var commaSeperated = items.Replace(Findtablenames, "");
                                commaSeperated = commaSeperated.Replace(".", "").Trim();
                                commaSeperated = commaSeperated.Replace("[", "").Trim();
                                commaSeperated = commaSeperated.Replace("]", "").Trim();
                                EntireSFields += commaSeperated + ",";
                            }
                            EntireSFields = EntireSFields.TrimEnd(',');
                            EntireSFields = string.Join(",", EntireSFields.Split(',').Distinct().ToArray());
                            EntireSFields = EntireSFields.Replace(",", ", ");
                            string sFieldsQuery = "UPDATE XISignalRDependencyMaster_T SET sselectedfields='" + EntireSFields + "' WHERE iTableID=" + PresentTableID;
                            ConnA.Open();
                            //ConnA.ChangeDatabase(sDatabase);
                            SqlCommand cmd1 = new SqlCommand(sFieldsQuery, ConnA);
                            cmd1.ExecuteNonQuery();
                            ConnA.Close();
                        }

                    }
                    if (TableID != PresentTableID && PresentTableID != "0")
                    {
                        var EntireSFields = "";
                        if (sBO == "XI1Click")
                        {
                            if (oCallI.Attributes.ContainsKey("itableid") && oBOI.Attributes.ContainsKey("BOID"))
                            {
                                oCallI.Attributes["itableid"].sValue = oBOI.Attributes["BOID"].sValue;
                            }
                            if (oCallI.Attributes.ContainsKey("sselectedfields") && oBOI.Attributes.ContainsKey("SelectFields"))
                            {
                                var stableName = oBOI.Attributes["SelectFields"].sValue;
                                string[] TableColumnNames = stableName.Split(',');
                                foreach (var items in TableColumnNames)
                                {
                                    var commaSeperated = items.Replace(Findtablenames, "");
                                    commaSeperated = commaSeperated.Replace(".", "").Trim();
                                    commaSeperated = commaSeperated.Replace("[", "").Trim();
                                    commaSeperated = commaSeperated.Replace("]", "").Trim();
                                    EntireSFields += commaSeperated + ",";
                                }
                                EntireSFields = EntireSFields.TrimEnd(',');
                                //EntireSFields=PreviousSelectedFields+','+EntireSFields;
                                EntireSFields = string.Join(",", EntireSFields.Split(',').Distinct().ToArray());
                                oCallI.Attributes["sselectedfields"].sValue = EntireSFields;
                            }
                        }
                        else
                        {
                            if (oCallI.Attributes.ContainsKey("itableid") && oBOI.Attributes.ContainsKey("iNotificationBO"))
                            {
                                oCallI.Attributes["itableid"].sValue = oBOI.Attributes["iNotificationBO"].sValue;
                            }
                            if (oCallI.Attributes.ContainsKey("sselectedfields") && oBOI.Attributes.ContainsKey("sBOSelectedFields"))
                            {
                                oCallI.Attributes["sselectedfields"].sValue = oBOI.Attributes["sBOSelectedFields"].sValue;
                                //var AttrName = oBOI.Attributes["sBOSelectedFields"].sValue;
                                //var SelectedItem = oBOD2.Attributes.ToList();
                                //EntireSFields = SelectedItem.Where(r => AttrName.Contains(r.Value.ID.ToString())).Select(t => t.Value.Name).FirstOrDefault();
                                //var stableName = EntireSFields;//+ ',' + PreviousSelectedFields;
                                //stableName = stableName.TrimEnd(',');
                                //string[] abcsd = stableName.Split(',');
                                //foreach (var items in abcsd)
                                //{
                                //    var commaSeperated = items.Replace(Findtablenames, "");
                                //    commaSeperated = commaSeperated.Replace(".", "").Trim();
                                //    commaSeperated = commaSeperated.Replace("[", "").Trim();
                                //    commaSeperated = commaSeperated.Replace("]", "").Trim();
                                //    EntireSFields += commaSeperated + ',';
                                //}
                                //EntireSFields = EntireSFields.TrimEnd(',');
                                //EntireSFields = string.Join(",", EntireSFields.Split(',').Distinct().ToArray());
                                oCallI.Attributes["sselectedfields"].sValue = EntireSFields;
                            }
                        }
                        oCResult = oCallI.Save(oCallI, false);
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating or Inserting in SignalRInsertCall" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //throw ex;
            }
            return oCResult;
        }
        public CResult UpdatePolicyVersion(int iID, string sField, string sValue)
        {
            CResult oCResult = new CResult();
            try
            {
                XIIXI oXII = new XIIXI();
                if (iID > 0)
                {
                    var oBOI = oXII.BOI("ACPolicyVersion_T", iID.ToString());
                    if (oBOI != null && oBOI.Attributes.ContainsKey(sField))
                    {
                        oBOI.Attributes[sField].sValue = sValue;
                        oBOI.Attributes[sField].bDirty = true;
                        oBOI.Save(oBOI);
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating PolicyVersion" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public CResult UpdateRenewalUser(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            try
            {
                int iQSInstanceID = 0;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                XIIXI oIXI = new XIIXI();
                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                var Actions = oCache.Get_ParamVal(sSessionID, sGUID, null, "Actions");
                var Action1ClickBO = oCache.Get_ParamVal(sSessionID, sGUID, null, "Action1ClickBO");
                XIIBO oBOI = new XIIBO();
                var oActionBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "", Action1ClickBO);
                List<string> sValues = new List<string>();
                if (Actions.Contains(','))
                    sValues = Actions.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();
                else
                    sValues.Add(Actions);
                foreach (var item in sValues)
                {
                    oBOI = new XIIBO();
                    oBOI = oIXI.BOI(oActionBOD.Name, item);
                    oBOI.BOD = oActionBOD;
                    oBOI.SetAttribute("sRenewalUser", oQSInstance.XIValues.Where(x => x.Key.ToLower() == "posteduser").FirstOrDefault().Value.sDerivedValue);
                    oBOI.SetAttribute("FKsRenewalUserID", oQSInstance.XIValues.Where(x => x.Key.ToLower() == "posteduser").FirstOrDefault().Value.sValue);
                    oCResult = oBOI.Save(oBOI);
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating Renewal User" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        public CResult PostFinanceTransaction(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            try
            {
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string ACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                List<XIIBO> oBOIList = new List<XIIBO>();
                string sQuery = "select * from ACTransaction_T where FKiACPolicyID=" + ACPolicyID + " and " + XIConstant.Key_XIDeleted + " = 1";
                XID1Click oXI1Click = new XID1Click();
                oXI1Click.Query = sQuery;
                oXI1Click.Name = "ACTransaction_T";
                var Result = oXI1Click.GetList();
                if (Result.bOK || Result.oResult != null)
                {
                    oBOIList = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                }
                XIIBO oBOI = new XIIBO();
                var oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "ACTransaction_T");
                foreach (var item in oBOIList)
                {
                    item.BOD = oBOD;
                    item.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    oCResult = item.Save(item);
                }
                JournalTransactions oJTransactions = new JournalTransactions();
                oJTransactions.Update_PolicyBalance(Convert.ToInt32(ACPolicyID), 10);
                oJTransactions.Update_PolicyBalance(Convert.ToInt32(ACPolicyID), 10, 10);
                var oPolicy = oIXI.BOI("ACPolicy_T", ACPolicyID);
                if (oPolicy.AttributeI("iStatus").sValue == "5" && (oPolicy.AttributeI("iPFStatus").sValue != "" || oPolicy.AttributeI("iPFStatus").sValue != "0") && (oPolicy.AttributeI("FKiPFApplicationID").sValue != "" || oPolicy.AttributeI("FKiPFApplicationID").sValue != "0"))
                {
                    if (oPolicy.AttributeI("FKiPFApplicationID").sValue != "" && oPolicy.AttributeI("FKiPFApplicationID").sValue != "0")
                    {
                        oPolicy.SetAttribute("iPFStatus", "10");
                    }
                    oPolicy.SetAttribute("iStatus", "10");
                    var oProductI = oIXI.BOI("Product", oParams.Where(x => x.sName == "iProductID").Select(t => t.sValue).FirstOrDefault());
                    string sPolicyNo = null;
                    var Res = PolicyNoGeneration(oProductI);
                    if (Res.bOK && Res.oResult != null)
                    {
                        sPolicyNo = (string)Res.oResult;
                    }
                    oPolicy.SetAttribute("sPolicyNo", sPolicyNo);
                    oCResult = oPolicy.Save(oPolicy);
                    XIDScript oXIDScript = new XIDScript();
                    oXIDScript.sScript = oParams.Where(x => x.sName == "sTranstype").Select(t => t.sValue).FirstOrDefault();
                    var value = oXIDScript.Execute_Script(sGUID, sSessionID);
                    oParams.Where(x => x.sName == "sTranstype").ToList().ForEach(t => t.sValue = value.oResult.ToString());
                    oXIDScript = new XIDScript();
                    oXIDScript.sScript = oParams.Where(x => x.sName == "sStructureName").Select(t => t.sValue).FirstOrDefault();
                    value = oXIDScript.Execute_Script(sGUID, sSessionID);
                    oParams.Where(x => x.sName == "sStructureName").ToList().ForEach(t => t.sValue = value.oResult.ToString());
                    oXIDScript = new XIDScript();
                    oXIDScript.sScript = oParams.Where(x => x.sName == "sPolicyDocs_sStructure").Select(t => t.sValue).FirstOrDefault();
                    value = oXIDScript.Execute_Script(sGUID, sSessionID);
                    oParams.Where(x => x.sName == "sPolicyDocs_sStructure").ToList().ForEach(t => t.sValue = value.oResult.ToString());
                    oParams.Add(new CNV { sName = "sPolicyNo", sValue = sPolicyNo });
                    oParams.Add(new CNV { sName = "iQSInstanceID", sValue = oIXI.BOI("ACPolicyVersion_T", oParams.Where(x => x.sName == "iVersionNo").Select(t => t.sValue).FirstOrDefault()).AttributeI("FKiQSInstanceID").sValue });
                    oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = oParams.Where(x => x.sName == "iVersionNo").Select(t => t.sValue).FirstOrDefault() });
                    oParams.Add(new CNV { sName = "iQuoteID", sValue = oPolicy.AttributeI("FKiQuoteID").sValue });
                    Thread threadObj = new Thread(new ThreadStart(() => { ThreadRunMethods(oParams); }));
                    threadObj.Start();
                }
                else if (oPolicy.AttributeI("iPFStatus").sValue != "10")
                {
                    oPolicy.SetAttribute("iPFStatus", "10");
                    oCResult = oPolicy.Save(oPolicy);
                }

                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While posting Finance transaction." });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public CResult UpdatePolicyOwner(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                string PolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string PolicyVersionID = oParams.Where(m => m.sName.ToLower() == "iACPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(PolicyID, out iPolicyID))
                { }
                XIIXI oXII = new XIIXI();
                XIInfraUsers oUser = new XIInfraUsers();
                var oBOI = oXII.BOI("Aggregations", QuoteID);
                if (int.TryParse(oBOI.AttributeI("FKiQSInstanceID").sValue, out iQSInstanceID))
                { }
                oTrace.oParams.Add(new CNV { sName = "PolicyID", sValue = iPolicyID.ToString() });
                oTrace.oParams.Add(new CNV { sName = "QSInstanceID", sValue = iQSInstanceID.ToString() });
                if (iPolicyID > 0 && iQSInstanceID > 0)
                {
                    XIIQS oQsInstance = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                    var oPolicyI = oXII.BOI("ACPolicy_T", iPolicyID.ToString());
                    if (oPolicyI != null)
                    {
                        if (oQsInstance != null && oQsInstance.XIValues.ContainsKey("FKiPostUserID"))
                        {
                            var sOwner = oQsInstance.XIValues["FKiPostUserID"].sValue;
                            int iOwner = 0;
                            if (int.TryParse(sOwner, out iOwner))
                            {
                                var oOwner = (XIInfraUsers)oUser.Get_UserDetails(sDataBase, iOwner).oResult;
                                if (oOwner != null)
                                {
                                    if (oPolicyI.Attributes.ContainsKey("FKsPostUserID"))
                                    {
                                        oPolicyI.Attributes["FKsPostUserID"].sValue = oOwner.sFirstName + " " + oOwner.sLastName;
                                        oPolicyI.Attributes["FKsPostUserID"].bDirty = true;
                                    }
                                    if (oPolicyI.Attributes.ContainsKey("FKsUserID"))
                                    {
                                        oPolicyI.Attributes["FKsUserID"].sValue = oOwner.sFirstName + " " + oOwner.sLastName;
                                        oPolicyI.Attributes["FKsUserID"].bDirty = true;
                                    }
                                    oPolicyI.Attributes["id"].bDirty = true;
                                    var oPolicyUI = oPolicyI.Save(oPolicyI);
                                    if (oPolicyUI.bOK && oPolicyUI.oResult != null)
                                    {
                                        if (!string.IsNullOrEmpty(PolicyVersionID))
                                        {
                                            var oVersionI = oXII.BOI("ACPolicyVersion_T", PolicyVersionID);
                                            if (oVersionI.Attributes.ContainsKey("FKsUserID"))
                                            {
                                                oVersionI.Attributes["FKsUserID"].sValue = oOwner.sFirstName + " " + oOwner.sLastName;
                                                oVersionI.Attributes["FKsUserID"].bDirty = true;
                                            }
                                            oVersionI.Attributes["id"].bDirty = true;
                                            var oPolicyVersionResult = oPolicyI.Save(oVersionI);
                                            if (oPolicyVersionResult.bOK && oPolicyVersionResult.oResult != null)
                                            {
                                                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiSuccess;
                                                oCResult.oResult = "Success";
                                            }
                                        }
                                        else
                                        {
                                            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                                            oTrace.sMessage = "Mandatory Param: PolicyversionID is missing";
                                        }
                                    }
                                }
                            }

                        }
                        else
                        {
                            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                            oTrace.sMessage = "Mandatory Attributes: FKsPostUserID attribute is missing";
                        }

                    }
                    else
                    {
                        oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                        oTrace.sMessage = "Error: Error while loading policy instance " + iPolicyID;
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                    oTrace.sMessage = "Mandatory Param: PolicyID and QSIID  is missing";
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating PolicyVersion" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oXID.SaveErrortoDB(oCResult);
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return oCResult;
        }

        //Update Rank to Quotes in Aggregations
        public CResult UpdateQuoteRank(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSIID = 0;
            try
            {
                var sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int.TryParse(sQSInstanceID, out iQSIID);
                if (iQSIID > 0)
                {
                    //Get All Quotes with this QSIID
                    XID1Click o1ClickD = new XID1Click();
                    o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "UpdateQSRank");
                    XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, null, o1ClickD.BOID.ToString());
                    XID1Click o1Click = new XID1Click();
                    o1Click = (XID1Click)o1ClickD.Clone(o1ClickD);
                    XIDStructure oStructure = new XIDStructure();
                    List<CNV> nParams = new List<CNV>();
                    CNV oNV = new CNV();
                    oNV.sName = "{XIP|FKiQSInstanceID}";
                    oNV.sValue = iQSIID.ToString();
                    nParams.Add(oNV);
                    var Query = oStructure.ReplaceExpressionWithCacheValue(o1Click.Query, nParams);
                    o1Click.Query = Query;
                    var result = o1Click.OneClick_Run(false);
                    List<XIIAttribute> QuotePrice = new List<XIIAttribute>();
                    List<string> OverallStatus = new List<string>();
                    foreach (var oBOI in result.Values)
                    {
                        if (oBOI.Attributes.ContainsKey("rprice"))
                        {
                            decimal rQtAmt = 0;
                            decimal.TryParse(oBOI.Attributes["rprice"].sValue, out rQtAmt);
                            QuotePrice.Add(new XIIAttribute { sName = oBOI.Attributes["id"].sValue, rValue = rQtAmt });
                        }
                        var iQuotestatus = string.Empty;
                        if (oBOI.Attributes.ContainsKey("iQuoteStatus"))
                        {
                            var iQSValue = oBOI.Attributes["iQuoteStatus"].sValue;
                            if (iQSValue != "30")
                            {
                                OverallStatus.Add(oBOI.Attributes["iQuoteStatus"].sValue);
                            }
                        }
                    }
                    var sOverallStatus = string.Empty;
                    if (OverallStatus != null && OverallStatus.Count() > 0)
                    {
                        if (OverallStatus.All(x => x == "0"))
                        {
                            sOverallStatus = "0";
                        }
                        else
                        {
                            sOverallStatus = "20";
                        }
                    }
                    int iRank = 1;
                    foreach (var item in QuotePrice.OrderBy(m => m.rValue))
                    {
                        item.iValue = iRank;
                        iRank++;
                    }

                    foreach (var oBOI in result.Values)
                    {
                        var iID = oBOI.Attributes["id"].sValue;
                        var Rank = QuotePrice.Where(m => m.sName == iID).FirstOrDefault().iValue;
                        oBOI.BOD = oBOD;
                        if (oBOI.Attributes.ContainsKey("irank"))
                        {
                            oBOI.Attributes["irank"].sValue = Rank.ToString();
                            oBOI.Attributes["irank"].bDirty = true;
                        }
                        if (oBOI.Attributes.ContainsKey("iOverallStatus"))
                        {
                            oBOI.Attributes["iOverallStatus"].sValue = sOverallStatus.ToString();
                            oBOI.Attributes["iOverallStatus"].bDirty = true;
                        }
                        XIIBO oBO = new XIIBO();
                        oCR = oBO.Save(oBOI);
                        if (oCR.bOK && oCR.oResult != null)
                        {

                        }
                        else
                        {
                            oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - Error While updating rank in Aggregations BO";
                            oXID.SaveErrortoDB(oCResult, iQSIID);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Updating rank to Quotes" });
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSIID);
            }
            return oCResult;
        }
        public CResult SendClientEmails(List<CNV> Params)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                string sGUID = Params.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = Params.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOGroupName = Params.Where(m => m.sName.ToLower() == "sBOGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBO = Params.Where(m => m.sName.ToLower() == "sBO".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iInstanceID = Params.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sDataBase = Convert.ToString(HttpContext.Current.Session["CoreDatabase"]);
                long iCustomerID = 0;
                if (long.TryParse(iInstanceID, out iCustomerID))
                { }
                int iUserID = 0;
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                XIInfraEmail oEmail = new XIInfraEmail();
                XIContentEditors oConent = new XIContentEditors();
                string sWelComeTempFunction = "xi.s|{xi.a|'XIConfig_T','ClientWelcomeTemplate','sValue','','sName'}";
                XIDScript oXIScript = new XIDScript();
                oXIScript.sScript = sWelComeTempFunction.ToString();
                oCR = oXIScript.Execute_Script("", "");
                var oWelcomeTemplate = oCR.oResult.ToString();
                var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, oWelcomeTemplate);
                var oCustomerI = oXII.BOI("Customer_T", iInstanceID, "Create");
                //long iCustomerID = 0;
                if (oCustomerI != null && oCustomerI.Attributes.ContainsKey("FKiUserID"))
                {
                    //if (oCustomerI != null && oCustomerI.BOD != null)
                    //{
                    //    if (oCustomerI.Attributes.ContainsKey(oCustomerI.BOD.sPrimaryKey))
                    //    {
                    //        var cusID = oCustomerI.Attributes[oCustomerI.BOD.sPrimaryKey].sValue;
                    //        long.TryParse(cusID, out iCustomerID);
                    //    }
                    //}
                    var UserID = oCustomerI.Attributes["FKiUserID"].sValue;
                    if (int.TryParse(UserID, out iUserID))
                    { }
                    XIInfraUsers oUserD = new XIInfraUsers();
                    oUserD.UserID = iUserID;
                    var UserDetails = oUserD.Get_UserDetails(sDataBase);
                    if (UserDetails.xiStatus == 0 && UserDetails.oResult != null)
                    {
                        oUserD = (XIInfraUsers)UserDetails.oResult;
                    }
                    if (oContentDef != null && oContentDef.Count() > 0 && oUserD != null)
                    {
                        XIIBO oBOI = new XIIBO();
                        string sBOName = "XIAPPUsers";
                        if (sBOName != null)
                        {
                            oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName, null);
                        }
                        XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                        var DecryptedPwd = xifEncrypt.DecryptData(oUserD.sPasswordHash, true, oUserD.UserID.ToString());
                        XIBOInstance oBOIInstance = new XIBOInstance();
                        oBOIInstance.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                        oBOI.SetAttribute("sUserName", oUserD.sFirstName + " " + oUserD.sLastName);
                        oBOI.SetAttribute("sEmail", oUserD.sEmail);
                        oBOI.SetAttribute("sPasswordHash", DecryptedPwd);
                        List<XIIBO> oBOIList = new List<XIIBO>();
                        oBOI.XIIValues = oBOI.Attributes.ToDictionary(x => x.Value.sName.ToLower(), x => new XIIValue { sValue = x.Value.sValue });
                        oBOIList.Add(oBOI);
                        oBOIInstance.oStructureInstance["User"] = oBOIList;
                        var oDocumentContent = oContentDef.FirstOrDefault();
                        oConent.sSessionID = "";
                        var oRes = oConent.MergeContentTemplate(oDocumentContent, oBOIInstance);
                        if (oRes.bOK)
                        {
                            string sContent = (string)oRes.oResult;
                            oEmail.EmailID = oUserD.sEmail;
                            oEmail.Bcc = oDocumentContent.sBCC;
                            oEmail.cc = oDocumentContent.sCC;
                            oEmail.From = oDocumentContent.sFrom;
                            oEmail.iServerID = oDocumentContent.FkiServerID;
                            oEmail.sSubject = oDocumentContent.sSubject;
                            var oMailResult = oEmail.Sendmail(oUserD.FKiOrgID, sContent, null, iCustomerID, XIConstant.Email_Welcome_InternalManual, 0, null, 0, oDocumentContent.bIsBCCOnly);//send mail with attachment
                            if (oMailResult.bOK && oMailResult.oResult != null)
                            {
                                oCResult.oResult = "Success";
                            }
                            else
                            {
                                oCResult.oResult = "Failed";
                            }
                        }
                    }
                    //QueryEngine oQEE = new QueryEngine();
                    //List<XIWhereParams> oWhereParams = new List<XIWhereParams>();
                    ////string sStructure = "New Policy";
                    //oWhereParams.Add(new XIWhereParams { sField = "FKiUserID", sOperator = "=", sValue = iUserID.ToString() });
                    //oWhereParams.Add(new XIWhereParams { sField = "iStatus", sOperator = "=", sValue = "10" });
                    //oQEE.AddBO("ACPolicy_t", "", oWhereParams);
                    //CResult oresult = oQEE.BuildQuery();
                    //if (oresult.bOK && oresult.oResult != null)
                    //{
                    //    var sSql = (string)oresult.oResult;
                    //    ExecutionEngine oEE = new ExecutionEngine();
                    //    oEE.XIDataSource = oQEE.XIDataSource;
                    //    oEE.sSQL = sSql;
                    //    var oQResult = oEE.Execute();
                    //    if (oQResult.bOK && oQResult.oResult != null)
                    //    {
                    //        var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    //        var oBOD = oQEE.QParams.FirstOrDefault().BOD;
                    //        oBOIList.ForEach(x => x.BOD = oBOD);
                    //        if (oBOIList.Count() > 0)
                    //        {
                    //            foreach (var oBOInstance in oBOIList)
                    //            {
                    //                if (oBOInstance != null && oBOInstance.BOD != null && oBOInstance.Attributes.ContainsKey(oBOInstance.BOD.sPrimaryKey))
                    //                {
                    //                    List<CNV> oPolicyEmailNv = new List<CNV>();
                    //                    oPolicyEmailNv.Add(new CNV { sName = "iInstanceID", sValue = oBOInstance.Attributes[oBOInstance.BOD.sPrimaryKey].sValue });
                    //                    oPolicyEmailNv.Add(new CNV { sName = "sEmailConfig", sValue = XIConstant.Email_OnCover_Manual_Lead });
                    //                    SendPolicyOncoverEmail(oPolicyEmailNv);
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    if (oCustomerI.Attributes.ContainsKey("bISMailSended"))
                    {
                        oCustomerI.Attributes["bISMailSended"].sValue = "True";
                        oCustomerI.Attributes["bISMailSended"].bDirty = true;
                        oCustomerI.Save(oCustomerI);
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public CResult SendPolicyOncoverEmail(List<CNV> Params)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            XIIXI oXII = new XIIXI();
            XIInfraCache oCache = new XIInfraCache();
            XIInfraEmail oEmail = new XIInfraEmail();
            XIContentEditors oConent = new XIContentEditors();
            int iACPolicyID = 0;
            try
            {
                string iInstanceID = Params.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sEmailConfig = Params.Where(m => m.sName.ToLower() == "sEmailConfig".ToLower()).Select(m => m.sValue).FirstOrDefault();
                long iCustomerID = 0;
                int iOrgID = 0;
                int iLeadID = 0;
                string sStructure = "New Policy";
                long iPolicyID = 0;
                if (long.TryParse(iInstanceID, out iPolicyID))
                { }
                if (int.TryParse(iInstanceID, out iACPolicyID))
                { }
                var oLIst = oXII.BOI("ACPolicy_T", iInstanceID);
                var oInstance = oLIst.Structure(sStructure).XILoad();
                var oQsIns = oInstance.oSubStructureI("QS Instance");
                if (oQsIns != null && oQsIns.oBOIList.Count > 0)
                {
                    var oQsInstance = oQsIns.oBOIList.FirstOrDefault();
                    if (oQsInstance != null && oQsInstance.Attributes.ContainsKey(oQsInstance.BOD.sPrimaryKey))
                    {
                        List<CNV> oNV = new List<CNV>();
                        oNV.Add(new CNV { sName = "FKiQSInstanceID", sValue = oQsInstance.Attributes[oQsInstance.BOD.sPrimaryKey].sValue });
                        var oLeadI = oXII.BOI("Lead_T", "", "", oNV);
                        if (oLeadI != null && oLeadI.Attributes.ContainsKey(oLeadI.BOD.sPrimaryKey))
                        {
                            if (int.TryParse(oLeadI.Attributes[oLeadI.BOD.sPrimaryKey].sValue, out iLeadID))
                            { }
                        }
                    }
                }

                if (long.TryParse(oLIst.Attributes["FKiCustomerID"].sValue, out iCustomerID))
                { }
                if (int.TryParse(oLIst.Attributes["FKiOrgID"].sValue, out iOrgID))
                {
                }
                //string sFunction = "xi.s|{xi.a|'XIConfig_T','PolicyOnCoverTemplate','sValue','','sName'}";
                //XIDScript oXIScript = new XIDScript();
                //oXIScript.sScript = sFunction.ToString();
                //oCR = oXIScript.Execute_Script("", "");
                //var oTemplateList = oCR.oResult.ToString().Split('_');
                string sOneClickName = "Prod OnCover template";
                XID1Click o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sOneClickName, null);
                XID1Click o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                List<CNV> nParms = new List<CNV>();
                CNV oCNV = new CNV();
                oCNV.sName = "{XIP|ProductID}";
                oCNV.sValue = oLIst.Attributes["FKiProductID"].sValue;
                nParms.Add(oCNV);
                nParms.Add(new CNV { sName = "{XIP|iTransactionType}", sValue = "10" });
                o1ClickC.ReplaceFKExpressions(nParms);
                XIDStructure oXIDStructure = new XIDStructure();
                o1ClickC.Query = oXIDStructure.ReplaceExpressionWithCacheValue(o1ClickC.Query, nParms);
                Dictionary<string, XIIBO> oRes = o1ClickC.OneClick_Run(false);
                if (oRes != null && oRes.Count() > 0)
                {
                    var oResList = oRes.Values.ToList();
                    foreach (var template in oResList)
                    {
                        if (template != null && template.Attributes.ContainsKey("FKiTemplateID"))
                        {
                            //if (oTemplateList.Contains(template.Attributes["FKiTemplateID"].sValue))
                            //{
                            var oResultContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, template.Attributes["FKiTemplateID"].sValue);
                            if (oResultContent != null && oResultContent.Count > 0)
                            {
                                var oTemplateContent = oResultContent.FirstOrDefault();
                                var oMergResult = oConent.MergeContentTemplate(oTemplateContent, oInstance);
                                if (oMergResult.bOK)
                                {
                                    string sContent = (string)oMergResult.oResult;
                                    oEmail.EmailID = oLIst.Attributes["sEmail"].sValue;
                                    oEmail.Bcc = oTemplateContent.sBCC;
                                    oEmail.cc = oTemplateContent.sCC;
                                    oEmail.From = oTemplateContent.sFrom;
                                    oEmail.iServerID = oTemplateContent.FkiServerID;
                                    if (!string.IsNullOrEmpty(oTemplateContent.sSubject))
                                    {
                                        oEmail.sSubject = oTemplateContent.sSubject;
                                    }
                                    else if (template.Attributes.ContainsKey("sDefaultSubject"))
                                    {
                                        oEmail.sSubject = template.Attributes["sDefaultSubject"].sValue;
                                    }
                                    var oMailResult = oEmail.Sendmail(iOrgID, sContent, null, iCustomerID, sEmailConfig, iLeadID, null, iPolicyID, oTemplateContent.bIsBCCOnly);//send mail with attachment
                                    if (oMailResult.bOK && oMailResult.oResult != null)
                                    {
                                        oCResult.oResult = "Success";
                                    }
                                    else
                                    {
                                        oCResult.oResult = "Failed";
                                    }
                                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                                    oCResult.sMessage = "Info: [PolicyID: " + iACPolicyID + "] - Mail send successfully";
                                    oXID.SaveErrortoDB(oCResult, 0, iACPolicyID);
                                }
                            }
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [PolicyID: " + iACPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iACPolicyID);
            }
            return oCResult;
        }
        public CResult AddAddonsonPolicy(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            int iPolicyID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var oPolicy = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                var PolicyID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}");
                var sPolicyVersionID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyVersionID}");
                string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                var oQSInstance = oCache.Get_QuestionSetCache("QuestionSetCache", sGUID, iQSInstanceID);
                List<CNV> nParams = new List<CNV>();
                nParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = iQSInstanceID });
                var oBOI = oIXI.BOI("Aggregations", null, "*", nParams);
                List<XIIBO> oListQuotes = new List<XIIBO>();
                string sQuery = "select * from Aggregations_T where FKiQSInstanceID=" + oBOI.AttributeI("FKiQSInstanceID").sValue;
                XID1Click oXI1Click = new XID1Click();
                oXI1Click.Query = sQuery;
                oXI1Click.Name = "Aggregations";
                var Result = oXI1Click.GetList();

                if (Result.bOK || Result.oResult != null)
                {
                    oListQuotes = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                }
                var bIsWithOutPayment = oQSInstance.XIIValues("bAcceptWithOutPayment");

                List<XIIBO> oPolicyExist = new List<XIIBO>();

                sQuery = "select * from ACPolicy_T where id =" + PolicyID;
                oXI1Click = new XID1Click();
                oXI1Click.Query = sQuery;
                oXI1Click.Name = "ACPolicy_T";
                Result = oXI1Click.GetList();
                if (Result.bOK || Result.oResult != null)
                {
                    oPolicyExist = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                }
                var sQSType = oBOI.AttributeI("iQSType").sValue;
                var sPaymentMethodType = oBOI.AttributeI("iPaymentType").sValue;
                var PolicySequenceNumber = oBOI.AttributeI("FKsPolicyNo").sValue;
                var iPaymentType = "30";
                oParams.Add(new CNV { sName = "iACPolicyID", sValue = PolicyID });
                oParams.Add(new CNV { sName = "sPolicyNo", sValue = PolicySequenceNumber });
                oParams.Add(new CNV { sName = "iPaymentMethodType", sValue = sPaymentMethodType });
                oParams.Add(new CNV { sName = "iQSType", sValue = sQSType });
                oParams.Add(new CNV { sName = "FKiPolicyVersionID", sValue = sPolicyVersionID });
                oParams.Add(new CNV { sName = "bOverride", sValue = "false" });
                oParams.Add(new CNV { sName = "IsAddon", sValue = "true" });
                oParams.Add(new CNV { sName = "sTranstype", sValue = sTranstype });
                oParams.Add(new CNV { sName = "bIsWithOutPayment", sValue = bIsWithOutPayment });
                Thread threaInsertdObj = new Thread(new ThreadStart(() =>
                {
                    ThreadInsertTransactions(oParams, Convert.ToInt32(sPaymentMethodType), string.IsNullOrEmpty(iPaymentType) ? 10 : Convert.ToInt32(iPaymentType));
                }));
                threaInsertdObj.Start();
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [PolicyID:" + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }
        public CResult InsertAddonTransaction(List<CNV> oParams)
        {
            TXinitial.sTXBeginAt = "POLICY";
            CResult oCResult = new CResult();
            var iAuditID = 0;
            int iQSInstanceID = 0;
            int iPolicyID = 0;
            try
            {
                oCResult.sMessage = "InsertAddonTransaction method started";
                oXID.SaveErrortoDB(oCResult);
                if (oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault() != null)
                {
                    oParams.Where(m => m.sName == "sAuditInfo").FirstOrDefault().sValue = "Transactions adding in-process";
                }
                else
                {
                    oParams.Add(new CNV() { sName = "sAuditInfo", sValue = "Transactions adding in-process" });
                }
                oParams.Add(new CNV() { sName = "iAuditID", sValue = "" });
                var oARes = Audit_Policy(oParams);
                var iAuditInsID = oARes.oResult;
                int.TryParse(iAuditInsID.ToString(), out iAuditID);

                oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Insert Transaction Method Started" + oCResult.sMessage });
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iACPolicyID, out iPolicyID))
                { }
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string bIsWithOutPayment = oParams.Where(m => m.sName.ToLower() == "bIsWithOutPayment".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iPolicyVersionID = 0;
                if (int.TryParse(sACPolicyVersionID, out iPolicyVersionID))
                {
                }
                XIIXI oIXI = new XIIXI();
                var oBOI = oIXI.BOI("ACPolicy_T", iACPolicyID);
                var sAddons = oBOI.AttributeI("sAddonID").sValue;
                JournalTransactions oJTransactions = new JournalTransactions(TXinitial);
                XIIBO oTransaction = new XIIBO();
                oTransaction.SetAttribute("FKiACPolicyID", oBOI.AttributeI("id").sValue);
                oTransaction.SetAttribute("FKiSupplierID", oBOI.AttributeI("FKiSupplierID").sValue);
                oTransaction.SetAttribute("refAccountCategory", oBOI.AttributeI("refAccountCategory").sValue);
                oTransaction.SetAttribute("FKsWhoID", sUserID);
                oTransaction.SetAttribute("dWhen", DateTime.Now.ToString(XIConstant.Date_Format));
                oTransaction.SetAttribute("iPaymentType", "30");
                string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = sQSInstanceID });
                Dictionary<string, XIIBO> oXIBOI = new Dictionary<string, XIIBO>();
                QueryEngine oQE = new QueryEngine();
                string sWhereCondition = "FKiACPolicyID =" + oBOI.AttributeI("id").sValue;
                var AddonIDs = oBOI.AttributeI("sAddonID").sValue;
                oXIBOI = new Dictionary<string, XIIBO>();
                oQE = new QueryEngine();
                sWhereCondition = "FKiQSInstanceID =" + sQSInstanceID + ", iStatus = 10, " + XIConstant.Key_XIDeleted + " = 0";
                var oQResult = oQE.Execute_QueryEngine("ACPurchase_T", "*", sWhereCondition);
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    oXIBOI = (Dictionary<string, XIIBO>)oQResult.oResult;
                }
                var rCost = from Temp in oXIBOI.Values
                            group Temp by 1 into groups
                            select new
                            {
                                Admin = groups.Sum(x => Convert.ToDecimal(x.AttributeI("rAdmin").sValue)),
                                Premium = groups.Sum(x => Convert.ToDecimal(x.AttributeI("rPremiumOverride").sValue))
                            };
                oTransaction.SetAttribute("sTransCode", "CREC");
                oTransaction.SetAttribute("iSystemType", "100");
                oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                oTransaction.SetAttribute("zBaseValue", bIsWithOutPayment == "true" ? "0" : (rCost.FirstOrDefault().Admin + rCost.FirstOrDefault().Premium).ToString());
                var CRECTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : CREC Transaction Created Successfully" });
                foreach (var item in oXIBOI)
                {
                    oTransaction.SetAttribute("sTransCode", "ADDON");
                    oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rPremiumOverride").doValue == 0 ? item.Value.AttributeI("rCost").doValue.ToString() : item.Value.AttributeI("rPremiumOverride").doValue.ToString());
                    oTransaction.SetAttribute("FKiProductAddOnID", item.Value.AttributeI("FKiProductAddonID").doValue.ToString());
                    oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                    var ADDONTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                    if (item.Value.AttributeI("rAdmin").doValue != 0)
                    {
                        oTransaction.SetAttribute("sTransCode", "ADMIN");
                        oTransaction.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        oTransaction.SetAttribute("zBaseValue", item.Value.AttributeI("rAdmin").doValue.ToString());
                        oTransaction.SetAttribute("FKiSupplierID", item.Value.AttributeI("fkisupplierid").sValue);
                        oTransaction.SetAttribute("rPremium", item.Value.AttributeI("rAdmin").doValue < 0 ? item.Value.AttributeI("rAdmin").doValue.ToString() : "0");
                        oTransaction.SetAttribute("iSystemType", "200");
                        var ADDONAdminTransaction = oJTransactions.PostTransaction(oTransaction, oParams.Where(t => t.sName == "sDataBase").Select(f => f.sValue).FirstOrDefault(), null, null, false);
                    }
                    sAddons = sAddons + "|||" + item.Value.AttributeI("refAddOn").iValue.ToString();
                }
                oBOI.SetAttribute("sAddonID", sAddons);
                var res = oBOI.Save(oBOI);
                oCResult.oTraceStack.Add(new CNV { sName = "Transactions", sValue = "Success : ADDON Transaction Created Successfully" });
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            if (TXinitial.sTXBeginAt == "POLICY")
                TXinitial.TXCommitRollback(oCResult);
            return oCResult;
        }
        public CResult SetCacheXIIValues(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            try
            {
                oCResult.sClassName = oCResult.Get_Class();
                oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
                XIInfraCache oCache = new XIInfraCache();
                string sSessionID = oParams.Where(t => t.sName == "sSessionID").Select(f => f.sValue).FirstOrDefault();
                string sCurrentGUID = oParams.Where(t => t.sName == "sGUID").Select(f => f.sValue).FirstOrDefault();
                var iQSIID = oParams.Where(t => t.sName == "iQSInstanceID").Select(f => f.sValue).FirstOrDefault();
                var oQSInstance = oCache.Get_QuestionSetCache("QuestionSetCache", sCurrentGUID, iQSIID.ToString());
                if (oQSInstance.XIValues.Count() > 0)
                {
                    foreach (var item in oQSInstance.XIValues)
                    {
                        oCache.Set_ParamVal(sSessionID, sCurrentGUID, null, "{XIP|" + item.Key + "}", item.Value.sValue, null, null);
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                XIInstanceBase oIB = new XIInstanceBase();
                oCResult.sMessage = "ERROR: " + ex.Message.ToString();
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        #region LeadTraceMatrix

        public CResult UpdateTraceMatrix(List<CNV> Params)
        {
            CResult oCResult = new CResult();
            int iLeadID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Lead_T");
                var oCloneBOD = (XIDBO)oBOD.Clone(oBOD);
                oCloneBOD.Attributes = oCloneBOD.Attributes.ToDictionary(dic => dic.Key, dic => dic.Value);
                oCloneBOD.Scripts = new Dictionary<string, XIDScript>();

                int FkiValidTraceID = 0, FKiLeadQualityID = 0, iCount = 0, FkiOutComesID = 0;
                string sInvalid = "INVALID";
                int.TryParse(Params.Where(t => t.sName == "iInstanceID").Select(f => f.sValue).FirstOrDefault(), out iLeadID);
                if (iLeadID > 0)
                {
                    var sReplace = string.Empty;
                    XIIXI oXII = new XIIXI();
                    //Lead_T Table data based on iLeadID
                    var oLeadI = oXII.BOI("Lead_T", iLeadID.ToString(), "iStatus,sTraceStage,iOrigin");
                    int iStatus = oLeadI.AttributeI("iStatus").iValue;
                    int iOrigin = oLeadI.AttributeI("iOrigin").iValue;
                    string sExistingTraceStage = oLeadI.AttributeI("sTraceStage").sValue;
                    //refValidTrace_T data for replace string
                    List<CNV> oParams = new List<CNV>();
                    oParams.Add(new CNV { sName = "sName", sValue = sExistingTraceStage });
                    var oRefReplaceValidTraceI = oXII.BOI("refValidTrace_T", "", "", oParams);
                    if (oRefReplaceValidTraceI != null)
                    {
                        if (oRefReplaceValidTraceI.Attributes.ContainsKey("sReplace"))
                        {
                            sReplace = oRefReplaceValidTraceI.Attributes["sReplace"].sValue;
                            if (!string.IsNullOrEmpty(sReplace))
                            {

                            }
                        }
                    }

                    //refTraceStage_T data based on iStatus
                    oParams = new List<CNV>();
                    oParams.Add(new CNV { sName = "iStatusValue1", sValue = iStatus.ToString() });
                    oParams.Add(new CNV { sName = "sStatusName1", sValue = "iStatus" });
                    var oRefTraceI = oXII.BOI("RefTraceStage", "", "", oParams);
                    if (oRefTraceI != null)
                    {
                        int iHighStageID = oRefTraceI.AttributeI("ID").iValue;
                        string sNewTraceCode = oRefTraceI.AttributeI("sName").sValue;

                        string sTraceStage = sNewTraceCode;
                        //check is NEW from internal QS  then Append PickedUP to New 
                        if (sNewTraceCode == "NE" && iOrigin == 1 && string.IsNullOrEmpty(sExistingTraceStage))
                            sTraceStage = sNewTraceCode + "_PU";

                        if (!string.IsNullOrEmpty(sExistingTraceStage))
                            if (!sExistingTraceStage.Contains(sNewTraceCode))
                            {
                                if (sReplace == sTraceStage)
                                {
                                    int index_ = sExistingTraceStage.LastIndexOf('_');
                                    string SubString = sExistingTraceStage.Substring(index_ + 1, sExistingTraceStage.Length - (index_ + 1));
                                    sTraceStage = sExistingTraceStage.Replace(SubString, sNewTraceCode);
                                }
                                else if ((sExistingTraceStage.LastIndexOf("IFQ") > 0 && sNewTraceCode == "IQ") || (sExistingTraceStage.LastIndexOf("IQ") > 0 && sNewTraceCode == "IFQ"))
                                {
                                    int index_ = sExistingTraceStage.LastIndexOf('_');
                                    string SubString = sExistingTraceStage.Substring(index_ + 1, sExistingTraceStage.Length - (index_ + 1));
                                    sTraceStage = sExistingTraceStage.Replace(SubString, sNewTraceCode);
                                }
                                else
                                {
                                    sTraceStage = sExistingTraceStage + "_" + sNewTraceCode;
                                }
                            }
                            else
                                sTraceStage = sExistingTraceStage;


                        //refValidTrace_T data based on sTraceStage
                        oParams = new List<CNV>();
                        oParams.Add(new CNV { sName = "sName", sValue = sTraceStage });
                        var oRefValidTraceI = oXII.BOI("refValidTrace_T", "", "", oParams);
                        if (oRefValidTraceI != null)
                        {
                            if (oRefValidTraceI.Attributes.ContainsKey("ID"))
                                FkiValidTraceID = oRefValidTraceI.AttributeI("ID").iValue;
                            if (oRefValidTraceI.Attributes.ContainsKey("FKiLeadQualityID"))
                                FKiLeadQualityID = oRefValidTraceI.AttributeI("FKiLeadQualityID").iValue;
                            if (oRefValidTraceI.Attributes.ContainsKey("FkiOutComesID"))
                                FkiOutComesID = oRefValidTraceI.AttributeI("FkiOutComesID").iValue;
                        }

                        //find Invalid Quote
                        if (FkiValidTraceID == 0)
                        {
                            oParams = new List<CNV>();
                            oParams.Add(new CNV { sName = "sName", sValue = sInvalid });
                            var oRefValidTraceI1 = oXII.BOI("refValidTrace_T", "", "", oParams);
                            if (oRefValidTraceI1 != null)
                            {
                                if (oRefValidTraceI1.Attributes.ContainsKey("ID"))
                                    FkiValidTraceID = oRefValidTraceI1.AttributeI("ID").iValue;
                                if (oRefValidTraceI1.Attributes.ContainsKey("FKiLeadQualityID"))
                                    FKiLeadQualityID = oRefValidTraceI1.AttributeI("FKiLeadQualityID").iValue;
                                if (oRefValidTraceI1.Attributes.ContainsKey("FkiOutComesID"))
                                    FkiOutComesID = oRefValidTraceI1.AttributeI("FkiOutComesID").iValue;
                            }
                        }

                        //Count for FkiStageID and dtStage update
                        if (!string.IsNullOrEmpty(sTraceStage))
                            iCount = sTraceStage.Split('_').Count();


                        //Update in Lead_T
                        oLeadI.SetAttribute("ID", iLeadID.ToString());
                        if (iCount > 0 && iCount <= 10)
                        {
                            oLeadI.SetAttribute("FKiStage" + iCount + "ID", iHighStageID.ToString());
                            oLeadI.SetAttribute("dtStage" + iCount, DateTime.Now.ToString());
                        }

                        oLeadI.SetAttribute("sTraceStage", sTraceStage);
                        oLeadI.SetAttribute("FkiValidTraceID", FkiValidTraceID.ToString());
                        oLeadI.SetAttribute("FKiLeadQualityID", FKiLeadQualityID.ToString());
                        oLeadI.SetAttribute("FKiOutComesID", FkiOutComesID.ToString());
                        oLeadI.SetAttribute("iHighStageID", iHighStageID.ToString());
                        oLeadI.BOD = oCloneBOD;
                        oLeadI.Save(oLeadI);
                        oCResult.oResult = "Success";
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                    }
                }
            }
            catch (Exception ex)
            {
                XIInstanceBase oIB = new XIInstanceBase();
                oCResult.sMessage = "ERROR: [LeadID:" + iLeadID + "" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] " + ex.Message.ToString() + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public void UpdateRecursiveTrace(List<CNV> Params)
        {
            CResult oCResult = new CResult();
            int iLeadID = 0;
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                var oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Lead_T");
                var oCloneBOD = (XIDBO)oBOD.Clone(oBOD);
                oCloneBOD.Attributes = oCloneBOD.Attributes.ToDictionary(dic => dic.Key, dic => dic.Value);
                oCloneBOD.Scripts = new Dictionary<string, XIDScript>();

                int.TryParse(Params.Where(t => t.sName == "iInstanceID").Select(f => f.sValue).FirstOrDefault(), out iLeadID);
                if (iLeadID > 0)
                {
                    XIIXI oXII = new XIIXI();
                    //Lead_T Table data based on iLeadID
                    var oLeadI = oXII.BOI("Lead_T", iLeadID.ToString(), "iStatus,sRecurrsiveTraceStage");
                    int iStatus = oLeadI.AttributeI("iStatus").iValue;
                    string sExistingsRecurrsiveTraceStage = oLeadI.AttributeI("sRecurrsiveTraceStage").sValue;

                    //refTraceStage_T data based on iStatus
                    List<CNV> oParams = new List<CNV>();
                    oParams.Add(new CNV { sName = "iStatusValue1", sValue = iStatus.ToString() });
                    oParams.Add(new CNV { sName = "sStatusName1", sValue = "iStatus" });
                    var oRefTraceI = oXII.BOI("RefTraceStage", "", "", oParams);
                    if (oRefTraceI != null)
                    {
                        string sNewTraceCode = oRefTraceI.AttributeI("sName").sValue;
                        string sRecurrsiveTraceStage = sNewTraceCode;
                        if (!string.IsNullOrEmpty(sExistingsRecurrsiveTraceStage))
                            sRecurrsiveTraceStage = sExistingsRecurrsiveTraceStage + "_" + sNewTraceCode;

                        //Update in Lead_T
                        if (sRecurrsiveTraceStage.Contains("PU") || string.IsNullOrEmpty(sExistingsRecurrsiveTraceStage))
                        {
                            oLeadI.SetAttribute("ID", iLeadID.ToString());
                            oLeadI.SetAttribute("sRecurrsiveTraceStage", sRecurrsiveTraceStage);
                            if (iStatus == 50)
                            {
                                oLeadI.SetAttribute("dtJunkDate", DateTime.Now.ToString());
                            }
                            oLeadI.BOD = oCloneBOD;
                            oLeadI.Save(oLeadI);
                        }
                        else if (iStatus == 50)
                        {
                            oLeadI.SetAttribute("ID", iLeadID.ToString());
                            oLeadI.SetAttribute("dtJunkDate", DateTime.Now.ToString());
                            oLeadI.BOD = oCloneBOD;
                            oLeadI.Save(oLeadI);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                XIInstanceBase oIB = new XIInstanceBase();
                oCResult.sMessage = "ERROR: [LeadID:" + iLeadID + "" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] " + ex.Message.ToString() + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
        }

        //Insert and update Trace information
        public CResult UpdateTraceTransaction(List<CNV> Params)
        {
            CResult oCResult = new CResult();
            int iInstanceID = 0, iBOID = 0, iAttrID = 0;
            string sBOName = string.Empty;

            try
            {
                string sAttributeName = string.Empty;
                var sGUID = Params.Where(m => m.sName == "sGUID").Select(m => m.sValue).FirstOrDefault();
                XIInfraCache oCache = new XIInfraCache();
                int.TryParse(oCache.Get_ParamVal("", sGUID, "", "-iAttrID"), out iAttrID);

                var oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "TraceTransactions");
                var oCloneBOD = (XIDBO)oBOD.Clone(oBOD);

                oCloneBOD.Attributes = oCloneBOD.Attributes.ToDictionary(dic => dic.Key, dic => dic.Value);
                oCloneBOD.Scripts = new Dictionary<string, XIDScript>();
                int.TryParse(Params.Where(t => t.sName == "iInstanceID").Select(f => f.sValue).FirstOrDefault(), out iInstanceID);
                sBOName = Params.Where(t => t.sName == "sBO").Select(f => f.sValue).FirstOrDefault();
                var oDynamicBO = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName);
                if (iAttrID > 0 && oDynamicBO?.BOID > 0 && oDynamicBO?.Attributes?.Count > 0)
                {
                    iBOID = oDynamicBO.BOID;
                    sAttributeName = oDynamicBO.Attributes.Values.Where(m => m.ID == iAttrID && m.bIsTrace)?.Select(m => m.Name).FirstOrDefault();
                }
                int iStatus = -1;
                //get status attribute on the table
                XIIXI oXII = new XIIXI();

                var oResultI = oXII.BOI(sBOName, iInstanceID.ToString());
                if (!string.IsNullOrEmpty(sAttributeName) && oResultI != null)
                    iStatus = oResultI.AttributeI(sAttributeName).iValue;
                if (oResultI != null && oResultI.BOD != null && oResultI.BOD.iDataSource > 0)
                {
                    oCloneBOD.iDataSource = oResultI.BOD.iDataSource;
                }

                //Get iStatus from the Inserted table

                if (iInstanceID > 0 && iBOID > 0 && iStatus > -1)
                {
                    var oParams = new List<CNV>();
                    if (oResultI.BOD != null && oResultI.BOD.iDataSource > 0)
                    {
                        oXII.iSwitchDataSrcID = oResultI.BOD.iDataSource;
                    }
                    oParams.Add(new CNV { sName = "FKiBOID", sValue = iBOID.ToString() });
                    oParams.Add(new CNV { sName = "iInstanceID", sValue = iInstanceID.ToString() });
                    oParams.Add(new CNV { sName = "FKiAttrID", sValue = iAttrID.ToString() });
                    var oResult = oXII.BOI("TraceTransactions", "", "", oParams);

                    //refTraceStage_T data based on iStatus
                    oParams = new List<CNV>();
                    oParams.Add(new CNV { sName = "iStatusValue1", sValue = iStatus.ToString() });
                    //oParams.Add(new CNV { sName = "sStatusName1", sValue = "iStatus" });
                    oParams.Add(new CNV { sName = "FKiAttrID", sValue = iAttrID.ToString() });
                    oParams.Add(new CNV { sName = "FKiBOID", sValue = iBOID.ToString() });
                    var oRefTraceI = oXII.BOI("RefTraceStage", "", "", oParams);
                    int iHighStageID = 0;
                    int iValidTraceID = 0;
                    string sTraceStage = string.Empty;
                    if (oRefTraceI?.Attributes?.Count() > 0)
                    {
                        iHighStageID = oRefTraceI.AttributeI("ID").iValue;
                        sTraceStage = oRefTraceI.AttributeI("sName").sValue;
                        oParams = new List<CNV>();
                        oParams.Add(new CNV { sName = "sName", sValue = sTraceStage });
                        var oTraceI = oXII.BOI("refValidTrace_T", "", "", oParams);
                        if (oTraceI != null && oTraceI.Attributes.Count() > 0)
                        {
                            iValidTraceID = oTraceI.AttributeI("ID").iValue;
                        }
                    }
                    if (string.IsNullOrEmpty(sTraceStage))
                    {
                        oParams = new List<CNV>
                            {
                            new CNV { sName = "BOID", sValue = iBOID.ToString() },
                            new CNV { sName = "BOFieldID", sValue = iAttrID.ToString() },
                            new CNV { sName = "sValues", sValue = iStatus.ToString() }
                            };
                        var oAttrOptI = oXII.BOI("XIBOOptionList", "", "", oParams);
                        if (oAttrOptI?.Attributes?.Count > 0)
                        {
                            sTraceStage = oAttrOptI.Attributes["sOptionName"].sValue;
                            var oRefBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "RefTraceStage");
                            var oRefBOI = new XIIBO();
                            oRefBOI.SetAttribute("sName", sTraceStage);
                            oRefBOI.SetAttribute("sDescription", sTraceStage);
                            oRefBOI.SetAttribute("iStatus", "10");
                            oRefBOI.SetAttribute("sStatusName1", oAttrOptI.Attributes["sOptionName"].sName);
                            oRefBOI.SetAttribute("iStatusValue1", iStatus.ToString());
                            oRefBOI.SetAttribute("FKiBOID", iBOID.ToString());
                            oRefBOI.SetAttribute("FKiAttrID", iAttrID.ToString());
                            oRefBOI.BOD = oRefBOD;
                            oRefBOI.Save(oRefBOI);
                            iHighStageID = oRefBOI.Attributes["id"].iValue;
                        }

                    }
                    if (!string.IsNullOrEmpty(sTraceStage))
                        if (oResult?.Attributes?.Count > 0)
                        {

                            string sExistingTraceStage = oResult.AttributeI("sTraceStage").sValue;
                            if (!string.IsNullOrEmpty(sExistingTraceStage))
                                sTraceStage = sExistingTraceStage + "_" + iStatus;
                            else
                                sTraceStage = sExistingTraceStage;

                            int iCount = 0;
                            //Count for FkiStageID and dtStage update
                            if (!string.IsNullOrEmpty(sTraceStage))
                                iCount = sTraceStage.Split('_').Count();

                            //Update Trace Information
                            if (iCount > 0 && iCount <= 10)
                            {
                                oResult.SetAttribute("FKiStage" + iCount + "ID", iHighStageID.ToString());
                                oResult.SetAttribute("dtStage" + iCount, DateTime.Now.ToString());
                            }

                            oResult.SetAttribute("sTraceStage", sTraceStage);
                            oResult.SetAttribute("FkiValidTraceID", iValidTraceID.ToString());
                            //oResult.SetAttribute("FKiLeadQualityID", FKiLeadQualityID.ToString());
                            //oResult.SetAttribute("FKiOutComesID", FkiOutComesID.ToString());
                            oResult.SetAttribute("iHighStageID", iHighStageID.ToString());
                            oResult.BOD = oCloneBOD;
                            oResult.Save(oResult);
                            //InsertValidTrace(iBOID, iAttrID, sTraceStage);
                        }
                        else
                        {
                            //Insert TraceTransactions
                            oResult = new XIIBO();
                            oResult.SetAttribute("FKiAttrID", iAttrID.ToString());
                            oResult.SetAttribute("FKiBOID", iBOID.ToString());
                            oResult.SetAttribute("FkiValidTraceID", iValidTraceID.ToString());
                            oResult.SetAttribute("iInstanceID", iInstanceID.ToString());
                            oResult.SetAttribute("sTraceStage", iStatus.ToString());
                            oResult.SetAttribute("FKiStage1ID", iHighStageID.ToString());
                            oResult.SetAttribute("dtStage1", DateTime.Now.ToString());
                            oResult.SetAttribute("iHighStageID", iHighStageID.ToString());
                            oResult.BOD = oCloneBOD;
                            oResult.Save(oResult);
                            //InsertValidTrace(iBOID, iAttrID, iStatus.ToString());
                        }


                }
            }
            catch (Exception ex)
            {
                XIInstanceBase oIB = new XIInstanceBase();
                oCResult.sMessage = "ERROR: [" + sBOName + ":" + iInstanceID + "" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] " + ex.Message.ToString() + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        private void InsertValidTrace(int iBOID, int iAttrID, string sTrace)
        {
            CResult oCResult = new CResult();
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                XIIXI oXIIXI = new XIIXI();
                var oValidTraceBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "refValidTrace_T");
                var oParams = new List<CNV> {
                    new CNV{sName="FKiBOID", sValue=iBOID.ToString() },
                    new CNV{sName="FKiAttrID", sValue= iAttrID.ToString()},
                    new CNV{ sName="sName", sValue= sTrace }
                };
                var oValidTraceBOI = oXIIXI.BOI("refValidTrace_T", "", "", oParams);
                if (!(oValidTraceBOI?.Attributes?.Count > 0))
                {
                    XIIBO oXIIBO = new XIIBO();
                    oXIIBO.SetAttribute("sName", sTrace);
                    oXIIBO.SetAttribute("FKiBOID", iBOID.ToString());
                    oXIIBO.SetAttribute("FkiAttrID", iAttrID.ToString());
                    oXIIBO.SetAttribute("sUniqueID", sTrace);
                    oXIIBO.SetAttribute("sDescription", sTrace);
                    oXIIBO.BOD = oValidTraceBOD;
                    oXIIBO.Save(oXIIBO);
                }

            }
            catch (Exception ex)
            {
                XIInstanceBase oIB = new XIInstanceBase();
                oCResult.sMessage = "ERROR: [" + sTrace + ":" + iBOID + "" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] " + ex.Message.ToString() + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oIB.SaveErrortoDB(oCResult);
            }
        }
        #endregion
        #region CopyQs
        public CResult CopyQS(List<CNV> oParams)
        {
            XIInfraCache oCache = new XIInfraCache();
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            List<string> Info = new List<string>();
            try
            {
                Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                XIIXI oIXI = new XIIXI();
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iInstanceID = 0;
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sType = oParams.Where(m => m.sName.ToLower() == "sType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sNextStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "sFailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "sSuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string IsReload = oParams.Where(m => m.sName.ToLower() == "IsReload".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string LeadType = oParams.Where(m => m.sName.ToLower() == "LeadType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iQSInstanceID = 0;
                Guid sQSInstanceIDGUID = Guid.Empty;
                int.TryParse(sQSInstanceID, out iQSInstanceID);
                Guid.TryParse(sQSInstanceID, out sQSInstanceIDGUID);
                XIIQS oQSI = new XIIQS();
                if (sQSInstanceIDGUID != Guid.Empty)
                {
                    oQSI = oIXI.GetQSXIValuesByQSIID(sQSInstanceIDGUID.ToString());
                }
                else
                {
                    oQSI = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                    iID = oQSI.XIGUID.ToString();
                }
                string sSource = string.Empty;
                if (oQSI != null && oQSI.XIValues.ContainsKey("iSource"))
                {
                    sSource = oQSI.XIValues["iSource"].sValue;
                }
                //if (!string.IsNullOrEmpty(iID) && iID != "0")
                //{
                //    iInstanceID = Convert.ToInt32(iID);
                //}
                if (!string.IsNullOrEmpty(sBOName) && !string.IsNullOrEmpty(iID))
                {
                    var oBOIList = oIXI.BOI(sBOName, iID, null, null, true);
                    if (oBOIList != null && oBOIList.Attributes.ContainsKey("FkiQSInstanceIDXIGUID"))
                    {
                        var sQSIID = oBOIList.Attributes["FkiQsInstanceIDXIGUID"].sValue;
                        // Copy Entire Structure Object
                        XIDStructure oStructure = new XIDStructure();
                        List<CNV> CopyParams = new List<CNV>();
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "id", sValue = "S" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiQSDefinitionID", sValue = "S" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "istatus", sValue = "0", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "iCurrentStepID", sValue = "0", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "iStage", sValue = "10", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "rBestQuote", sValue = "0", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "sSourceReferenceID", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "sRefrenceID", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "iStage", sValue = "10", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "sTraceStage", sValue = "NE_PU", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "FKsSource", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "sQSStage", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "sQSMaxStage", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "dtBestPriceDate", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "dtQuoteDate", sValue = "", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "dtQSCreatedDate", sValue = DateTime.Now.ToString(), sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Lead_T", sName = "iSentMail", sValue = "0", sContext = "Save" });
                        CopyParams.AddRange(oParams);
                        if (!string.IsNullOrEmpty(sSource))
                        {
                            CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiSourceID", sValue = sSource, sContext = "Save" });
                            CopyParams.Add(new CNV { sType = "Lead_T", sName = "FKiSourceID", sValue = "", sContext = sSource });
                        }
                        var oList = oStructure.StructureCopy("QS Instance", sQSIID, sStructureName, CopyParams, true);
                        //debug.print (oStructure.totext(), olist.oresult.oList.oResult.ToString())
                        //debug level
                        Info.Add("StructureCopy done");
                        var sNewInsID = oList.oResult.ToString();
                        int iNewInsID = 0;
                        var oData = oStructure.xiCopyParams;
                        if (int.TryParse(sNewInsID, out iNewInsID))
                        {
                            dictmsg.Add("Success:UserName", "QS Copied successfully");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iInstanceID}", oData.Where(d => d.sBOName == "Lead_T").Select(t => t.AttributeI("id").sValue).FirstOrDefault(), null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sBOName}", "Lead_T", null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                            XIIBO oCallBOI = new XIIBO();
                            var oBOInsatnce = oCallBOI.Get_BOInstance("Call_T", null);

                            if (oBOInsatnce.Attributes.ContainsKey("sNotes"))
                            {
                                oCallBOI.Attributes.Add("sNotes", new XIIAttribute() { sName = "sNotes", sValue = "Copied from Lead ID:" + iID, bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("FkiLeadID"))
                            {
                                oCallBOI.Attributes.Add("FkiLeadID", new XIIAttribute() { sName = "FkiLeadID", sValue = oData.Where(d => d.sBOName == "Lead_T").Select(t => t.AttributeI("id").sValue).FirstOrDefault(), bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("iType"))
                            {
                                oCallBOI.Attributes.Add("iType", new XIIAttribute() { sName = "iType", sValue = "0", bDirty = true });
                            }
                            if (oBOInsatnce.Attributes.ContainsKey("iStatus"))
                            {
                                oCallBOI.Attributes.Add("iStatus", new XIIAttribute() { sName = "iStatus", sValue = "10", bDirty = true });
                            }
                            oCallBOI.BOD = oBOInsatnce.BOD;
                            oCallBOI.Save(oCallBOI);
                        }
                        else
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            dictmsg.Add("Error:UserName", "QS Copy failed");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                        }
                    }
                    if (sBOName.ToLower() == "qs instance" && !string.IsNullOrEmpty(iID))
                    {
                        //var sQSIID = iInstanceID.ToString();
                        // Copy Entire Structure Object
                        XIDStructure oStructure = new XIDStructure();
                        List<CNV> CopyParams = new List<CNV>();
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "id", sValue = "S" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiQSDefinitionID", sValue = "S" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiQSDefinitionIDXIGUID", sValue = "S" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "iCurrentStepID", sValue = "0", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "iCurrentStepIDXIGUID", sValue = "00000000-0000-0000-0000-000000000000", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "iStage", sValue = "10", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "QS Instance", sName = "bIsDisable", sValue = "0", sContext = "Save" });
                        CopyParams.AddRange(oParams);
                        if (!string.IsNullOrEmpty(sSource))
                        {
                            CopyParams.Add(new CNV { sType = "QS Instance", sName = "FKiSourceID", sValue = sSource, sContext = "Save" });
                        }
                        var oList = oStructure.StructureCopy("QS Instance", iID, sStructureName, CopyParams, true);
                        //debug.print (oStructure.totext(), olist.oresult.oList.oResult.ToString())
                        //debug level
                        Info.Add("StructureCopy done");
                        var sNewInsID = oList.oResult.ToString();
                        int iNewInsID = 0;
                        var oData = oStructure.xiCopyParams;
                        if (!string.IsNullOrEmpty(sNewInsID)/*int.TryParse(sNewInsID, out iNewInsID)*/)
                        {
                            dictmsg.Add("Success:UserName", "QS Copied successfully");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iInstanceID}", oData.Where(d => d.sBOName == "QS Instance").Select(t => t.AttributeI("id").sValue).FirstOrDefault(), null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sBOName}", sBOName, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                            if (!string.IsNullOrEmpty(IsReload) && IsReload.ToLower() == "yes")
                            {
                                if (!string.IsNullOrEmpty(sType) && sType.ToLower() == "renewal")
                                {
                                    sType = "Internal";
                                }
                                var oQSInstance = ReLoadQs(sNewInsID, sGUID, "0", sType, "Internal", null, null, iOrgID);
                                // oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|"+ sBOName + ".id}", oQSInstance.XIGUID.ToString(), null, null);
                                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                                oCResult.oResult = oQSInstance;
                            }
                            List<CNV> oWhereParams = new List<CNV>();
                            oWhereParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = sNewInsID.ToString() });
                            var oBOI = oIXI.BOI("Lead_T", null, null, oWhereParams);
                            if (oBOI != null)
                            {
                                var LeadTypeId = "";
                                if (LeadType == "Renewal")
                                {
                                    oBOI.SetAttribute("FKiRefLeadTypeID", "4");
                                }
                                oBOI.SetAttribute("iStatus", "0");
                                oBOI.Save(oBOI);
                                LeadTypeId = oBOI.Attributes["FKiRefLeadTypeID".ToLower()].sValue;
                                oCache.Set_ParamVal(sSessionID, sGUID, null, "-LeadTypeID", LeadTypeId.ToString(), null, null);
                            }
                        }
                        else
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            dictmsg.Add("Error:UserName", "QS Copy failed");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While coping Questionset against Lead" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        #endregion
        public CResult InsertStaticLead(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStaticLeadFirstName = oParams.Where(m => m.sName.ToLower() == "sStaticLeadFirstName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStaticLeadLastName = oParams.Where(m => m.sName.ToLower() == "sStaticLeadLastName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStaticLeadEmail = oParams.Where(m => m.sName.ToLower() == "sStaticLeadEmail".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iQSInstanceID = Convert.ToInt32(iID);
                }
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                int iQSDID = 0;
                string sQSDID = (string)oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                string sCustomerID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|FKiCustomerID}");
                string sTranstype = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                if (int.TryParse(sQSDID, out iQSDID)) { }
                //XIIQS oQSI = oXII.GetQuestionSetInstanceByID(iQSDID, iQSInstanceID, null, 0, 0, null);
                XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                oQSI.ID = iQSInstanceID;
                var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());//oDXI.GetQuestionSetDefinitionByID(null, iQSID.ToString());
                if (oQSDefinition != null)
                {
                    oQSI.QSDefinition = oQSDefinition;
                }

                Dictionary<string, CNV> OQSD = new Dictionary<string, CNV>();
                OQSD = oQSI.XIValues.ToDictionary(x => x.Key, x => new CNV { sName = x.Key, sValue = x.Value.sValue });

                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = iQSInstanceID.ToString() });
                XIIBO oBOI = new XIIBO();
                oBOI = oXII.BOI("Lead_T", null, null, oWhrParams);
                var iInstanceID = "";
                int iQSMaxStage = 0;
                string sCurrentStep = string.Empty;
                string sQSMaxStage = string.Empty;
                string iFromID = string.Empty; string iToID = string.Empty;
                string sFrom = string.Empty; string sTo = string.Empty;
                string dtFrom = string.Empty; string dtTo = string.Empty;
                string sPastStatus = string.Empty; string sCurrentStatus = string.Empty;
                if (oBOI == null)
                {
                    oBOI = new XIIBO();
                    XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Lead_T", null);
                    oBOI.BOD = oBOD;
                    oBOI.LoadBOI("create");
                    XIIAttribute oAttrI = new XIIAttribute();
                    oAttrI.sName = "fkiqsinstanceid";
                    oAttrI.sValue = iQSInstanceID.ToString();
                    oAttrI.bDirty = true;
                    oBOI.Attributes["fkiqsinstanceid"] = oAttrI;
                    if (oQSI.XIValues.ContainsKey("sFirstName"))
                    {
                        oBOI.Attributes["sfirstname"].sValue = oQSI.XIValues["sFirstName"].sValue;
                    }
                    else
                    {
                        oBOI.Attributes["sfirstname"].sValue = sStaticLeadFirstName;
                    }
                    if (oQSI.XIValues.ContainsKey("sLastName"))
                    {
                        oBOI.Attributes["slastname"].sValue = oQSI.XIValues["sLastName"].sValue;
                    }
                    else
                    {
                        oBOI.Attributes["slastname"].sValue = sStaticLeadLastName;
                    }
                    oBOI.Attributes["sname"].sValue = oBOI.Attributes["sfirstname"].sValue + " " + oBOI.Attributes["slastname"].sValue;
                    if (oQSI.XIValues.ContainsKey("sEmail"))
                    {
                        oBOI.Attributes["semail"].sValue = oQSI.XIValues["sEmail"].sValue;
                    }
                    else
                    {
                        oBOI.Attributes["semail"].sValue = sStaticLeadEmail;
                    }
                }
                oBOI.Attributes["iqsstage"].sValue = oQSI.iCurrentStepIDXIGUID.ToString();
                oBOI.Attributes["dpolicystart"].sValue = OQSD["dCoverStart"].sValue;
                oBOI.Attributes["iqsmaxstage"].sValue = iQSMaxStage.ToString();
                oBOI.Attributes["sqsmaxstage"].sValue = sQSMaxStage;
                oBOI.Attributes["sqsstage"].sValue = sCurrentStep;
                oBOI.Attributes["dtqscreateddate"].sValue = oQSI.CreatedTime.ToString();
                oBOI.Attributes["fkisourceid"].sValue = oQSI.FKiSourceID.ToString();
                XIDSource oSourceD = (XIDSource)oCache.GetObjectFromCache(XIConstant.CacheSource, null, oQSI.FKiSourceID.ToString());
                if (oQSI.FKiSourceID > 0)
                {
                    oBOI.Attributes["fkssource"].sValue = oSourceD.sName;
                }
                if (oBOI.Attributes.ContainsKey("sexternalrefid"))
                {
                    oBOI.Attributes["sexternalrefid"].sValue = oQSI.sExternalRefID;
                }
                if (oBOI.Attributes.ContainsKey("srefrenceid"))
                {
                    string sReference = RandomString(7);
                    oBOI.Attributes["srefrenceid"].sValue = sReference/*random.Next(1, 100000000).ToString(new String('0', 7))*/ ;
                }
                if (oBOI.Attributes.ContainsKey("fkiclientid") && !string.IsNullOrEmpty(sCustomerID))
                {
                    oBOI.Attributes["fkiclientid"].sValue = sCustomerID;
                }
                if (oBOI.Attributes.ContainsKey("fkiclassid"))
                {
                    oBOI.Attributes["fkiclassid"].sValue = oQSI.FKiClassID.ToString();
                }
                if (oQSI.FKiClassID > 0)
                {
                    XIDClass oClassD = (XIDClass)oCache.GetObjectFromCache(XIConstant.CacheClass, null, oQSI.FKiClassID.ToString());
                    if (oBOI.Attributes.ContainsKey("fksclass"))
                    {
                        oBOI.Attributes["fksclass"].sValue = oClassD.sName;
                    }
                }
                if (oBOI.Attributes.ContainsKey("ssourcereferenceid"))
                {
                    string sPrefixCode = oSourceD.sPrefixCode;
                    var sReference = sPrefixCode + RandomNumber(6);
                    oBOI.Attributes["ssourcereferenceid"].sValue = sReference;
                }
                if (oBOI.Attributes.ContainsKey("iorigin"))
                {
                    oBOI.Attributes["iorigin"].sValue = oSourceD.FKiOriginID.ToString();
                }
                if (oBOI.Attributes.ContainsKey("istage"))
                {
                    oBOI.Attributes["istage"].sValue = oQSI.iStage.ToString();
                }
                if (oBOI.Attributes.ContainsKey("imaxstage"))
                {
                    oBOI.Attributes["imaxstage"].sValue = oQSDefinition.iMaxStage.ToString();
                }
                if (oBOI.Attributes.ContainsKey("istatus"))
                {
                    oBOI.Attributes["istatus"].sValue = "0";
                }
                oBOI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                var LeadData = oBOI.Save(oBOI, false);
                if (LeadData.xiStatus == 0 && LeadData.oResult != null)
                {
                    long iLeadID = 0;
                    var LeadBOI = (XIIBO)LeadData.oResult;
                    var sLeadID = string.Empty;
                    if (LeadBOI.Attributes.ContainsKey(LeadBOI.BOD.sPrimaryKey))
                    {
                        sLeadID = LeadBOI.Attributes[LeadBOI.BOD.sPrimaryKey].sValue;
                    };
                    long.TryParse(sLeadID, out iLeadID);
                    if (iLeadID > 0)
                    {
                        List<CNV> oNv = new List<CNV>();
                        oNv.Add(new CNV { sName = "iInstanceID", sValue = iLeadID.ToString() });
                        UpdateTraceMatrix(oNv);
                        oCache.Set_ParamVal(sSessionID, sGUID, "", "-iLeadInstanceID", iLeadID.ToString(), null, null);
                        if (string.IsNullOrEmpty(iInstanceID))
                        {
                            oCResult.sMessage = "Info: [ QSInstanceID: " + iQSInstanceID + " ] - Lead inserted Successfully";
                            oXID.SaveErrortoDB(oCResult, iQSInstanceID);
                        }
                        //Save to Life Cycle
                        XIIBO oLCBOI = new XIIBO();
                        var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                        if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                        {
                            oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("iFromID"))
                        {
                            oLCBOI.Attributes.Add("iFromID", new XIIAttribute() { sName = "iFromID", sValue = iFromID.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("iToID"))
                        {
                            oLCBOI.Attributes.Add("iToID", new XIIAttribute() { sName = "iToID", sValue = iToID.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                        {
                            oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sFrom.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                        {
                            oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sTo.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                        {
                            oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                        {
                            oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iQSInstanceID.ToString(), bDirty = true });
                        }
                        if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                        {
                            oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Step", bDirty = true });
                        }
                        oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                        oLCBOI.BOD = oBOInsatnce.BOD;
                        oLCBOI.Save(oLCBOI);
                    }
                }
                else
                {
                    oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " ] - Lead insertion failed";
                    oXID.SaveErrortoDB(oCResult, iQSInstanceID);
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }
        public CResult UpdateQsInstance(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            XIDefinitionBase oXID = new XIDefinitionBase();
            try
            {
                XIIBO oBOI = new XIIBO();
                XIDBO oBODs = new XIDBO();
                oBODs = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XI1Click");
                string QSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string OneClickID = oParams.Where(m => m.sName.ToLower() == "1ClickID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                oBOI.BOD = oBODs;
                oBOI.Attributes["FKiQSInstanceID".ToLower()] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = QSInstanceID, bDirty = true };
                oBOI.Attributes["ID".ToLower()] = new XIIAttribute { sName = "ID", sValue = OneClickID, bDirty = true };
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sSessionID = HttpContext.Current.Session.SessionID;
                oCResult = oBOI.Save(oBOI);
                oCache.Set_ParamVal(sSessionID, sGUID, "", "{XIP|1ClickID}", OneClickID, "", null);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }

            return oCResult;
        }
        public CResult SendGITEmails(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then Send
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sNextStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessMsg1 = oParams.Where(m => m.sName.ToLower() == "sSuccessMsg1".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessMsg2 = oParams.Where(m => m.sName.ToLower() == "sSuccessMsg2".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessMsg3 = oParams.Where(m => m.sName.ToLower() == "sSuccessMsg3".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sClientTemplateName = oParams.Where(m => m.sName.ToLower() == "sClientTemplateName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBrokerTemplateName = oParams.Where(m => m.sName.ToLower() == "sBrokerTemplateName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iQSDID = 0;
                XIInfraCache oCache = new XIInfraCache();
                string sLeadID = (string)oCache.Get_ParamVal(sSessionID, sGUID, null, "-iLeadInstanceID");
                string sQSDID = (string)oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}");
                int.TryParse(sQSDID, out iQSDID);
                int iLeadID = 0;
                int.TryParse(sLeadID, out iLeadID);
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iQSInstanceID = Convert.ToInt32(iID);
                }
                XIIXI oXII = new XIIXI();

                XIInfraEmail oEmail = new XIInfraEmail();
                XIContentEditors oConent = new XIContentEditors();
                var oQSI = oXII.BOI("QS Instance", iQSInstanceID.ToString());
                if (oQSI != null)
                {
                    var oQSDefinition = (XIDQS)oCache.GetObjectFromCache(XIConstant.CacheQuestionSet, null, iQSDID.ToString());
                    XIBOInstance oBOIInstance = new XIBOInstance();
                    oBOIInstance.oStructureInstance = new Dictionary<string, List<XIIBO>>();
                    List<XIIBO> oBOIList = new List<XIIBO>();
                    oBOIList.Add(oQSI);
                    oBOIInstance.oStructureInstance["QS Instance"] = oBOIList;
                    if (!string.IsNullOrEmpty(sClientTemplateName))
                    {
                        var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sClientTemplateName, "0");
                        var oDocumentContent = oContentDef.FirstOrDefault();
                        oConent.sSessionID = "";
                        var oRes = oConent.MergeContentTemplate(oDocumentContent, oBOIInstance);
                        if (oRes.bOK)
                        {
                            string sContent = (string)oRes.oResult;
                            oEmail.EmailID = oQSI.XIIValues["sEmail"].sValue;
                            oEmail.Bcc = oDocumentContent.sBCC;
                            oEmail.cc = oDocumentContent.sCC;
                            oEmail.From = oDocumentContent.sFrom;
                            oEmail.iServerID = oDocumentContent.FkiServerID;
                            oEmail.sSubject = oDocumentContent.sSubject;
                            var oMailResult = oEmail.Sendmail(oQSDefinition.FKiOrgID, sContent, null, 0, XIConstant.Email_Welcome_Online, iLeadID, null, 0, oDocumentContent.bIsBCCOnly);//send mail with attachment
                            if (oMailResult.bOK && oMailResult.oResult != null)
                            {
                                oCResult.oResult = "Success";
                            }
                            else
                            {
                                oCResult.oResult = "Failed";
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(sBrokerTemplateName))
                    {
                        var oContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sBrokerTemplateName, "0");
                        var oDocumentContent1 = oContent.FirstOrDefault();
                        var oRes1 = oConent.MergeContentTemplate(oDocumentContent1, oBOIInstance);
                        if (oRes1.bOK)
                        {
                            string sContent = (string)oRes1.oResult;
                            oEmail.EmailID = oQSI.XIIValues["sEmail"].sValue;
                            oEmail.Bcc = oDocumentContent1.sBCC;
                            oEmail.cc = oDocumentContent1.sCC;
                            oEmail.From = oDocumentContent1.sFrom;
                            oEmail.iServerID = oDocumentContent1.FkiServerID;
                            oEmail.sSubject = oDocumentContent1.sSubject;
                            var oMailResult = oEmail.Sendmail(oQSDefinition.FKiOrgID, sContent, null, 0, XIConstant.Email_Welcome_Online, iLeadID, null, 0, oDocumentContent1.bIsBCCOnly);//send mail with attachment
                            if (oMailResult.bOK && oMailResult.oResult != null)
                            {
                                oCResult.oResult = "Success";
                            }
                            else
                            {
                                oCResult.oResult = "Failed";
                            }
                        }
                    }
                    Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                    if (!string.IsNullOrEmpty(sSuccessMsg1))
                    {
                        dictmsg.Add("Success:Msg1", sSuccessMsg1);
                    }
                    if (!string.IsNullOrEmpty(sSuccessMsg2))
                    {
                        dictmsg.Add("Success:Msg2", sSuccessMsg2);
                    }
                    if (!string.IsNullOrEmpty(sSuccessMsg3))
                    {
                        dictmsg.Add("Success:Msg3", sSuccessMsg3);
                    }
                    //dictmsg.Add("Success:UserName", "Thank you for your quote request.<br>We’re already comparing quotes for you.We’ll be in contact with you shortly with a quote for your Goods in Transit insurance.<br>We’ll be calling from 01227 285540 and will just need to go over a few more details to make sure we get you the best quote we can.");
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sNextStep, null, null);
                    oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }
        public CResult UpdatePFAmount(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string ProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iQuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iID, out iInstanceID))
                {
                }
                int iProductID = 0;
                if (int.TryParse(ProductID, out iProductID))
                {
                }
                if (iInstanceID > 0)
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    XIIBO oBO = new XIIBO();
                    var oBOI = oIXI.BOI("Aggregations", iQuoteID, "Create");
                    float rAddonTotal = 0;
                    float rAddonAdminTotal = 0;
                    float rTotal = 0;
                    float rAdmin = 0;
                    float rDefaultDeposit = 0;
                    float rPaymentCharge = 0;
                    float rInsurerCharge = 0;
                    float rFinalQuote = 0;
                    if (float.TryParse(oBOI.Attributes["zDefaultAdmin"].sValue, out rAdmin))
                    {
                    }
                    if (float.TryParse(oBOI.Attributes["rAddonAdmin"].sValue, out rAddonAdminTotal))
                    {
                    }
                    if (float.TryParse(oBOI.Attributes["rAddonPrice"].sValue, out rAddonTotal))
                    {
                    }
                    if (float.TryParse(oBOI.Attributes["rPrice"].sValue, out rFinalQuote))
                    {
                    }
                    double rTotalAdmin = rAdmin + rAddonAdminTotal;
                    if (float.TryParse(oBOI.Attributes["rPaymentCharge"].sValue, out rPaymentCharge))
                    {
                    }
                    if (float.TryParse(oBOI.Attributes["rInsurerCharge"].sValue, out rInsurerCharge))
                    {
                    }
                    rFinalQuote += rAdmin + rPaymentCharge + rInsurerCharge;
                    rTotal += rFinalQuote + rAddonTotal + rAddonAdminTotal;
                    XIAPI oXIAPI = new XIAPI();
                    if (float.TryParse(oBOI.Attributes["zDefaultDeposit"].sValue, out rDefaultDeposit))
                    { }
                    var PFSchemeID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}");
                    int iPFSchemeID = 0;
                    if (int.TryParse(PFSchemeID, out iPFSchemeID))
                    { }
                    var MonthlyAmount = oXIAPI.GetMonthlyPremiumAmount(rFinalQuote, rDefaultDeposit, iProductID, rAddonAdminTotal, rAddonTotal, iPFSchemeID);
                    double rMonthlyTotal = (MonthlyAmount * 10) + rDefaultDeposit;
                    if (oBOI.Attributes.ContainsKey("rMonthlyPrice"))
                    {
                        oBOI.Attributes["rMonthlyPrice"].sValue = String.Format("{0:0.00}", MonthlyAmount);
                    }
                    if (oBOI.Attributes.ContainsKey("rMonthlyTotal"))
                    {
                        oBOI.Attributes["rMonthlyTotal"].sValue = String.Format("{0:0.00}", rMonthlyTotal);
                    }
                    oBOI.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                    var oQuoteI = oBO.Save(oBOI);
                    oCResult.oResult = null;
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult InsertProductVersion(List<CNV> Params)
        {
            List<string> Info = new List<string>();
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iPolicyID = 0;
            try
            {
                string sGUID = Params.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSessionID = Params.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOGroupName = Params.Where(m => m.sName.ToLower() == "sBOGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBO = Params.Where(m => m.sName.ToLower() == "sBO".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iInstanceID = Params.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                Info.Add("BO Name: " + sBO); Info.Add("Product ID: " + iInstanceID); Info.Add("Group name: " + sBOGroupName);
                //var oNVList = Params.Where(m => m.sType.ToLower() == "attribute").ToList();
                XIIXI oXII = new XIIXI();
                var oBOI = oXII.BOI(sBO, iInstanceID);
                //if (oBOI.Attributes.ContainsKey("fkiacpolicyid"))
                //{
                //    if (int.TryParse(oBOI.Attributes["fkiacpolicyid"].sValue, out iPolicyID))
                //    { }
                //}
                if (oBOI != null && oBOI.Attributes.ContainsKey(oBOI.BOD.sPrimaryKey))
                {
                    Info.Add("BO Attr Count : " + oBOI.Attributes.Count);
                    List<CNV> oNV = new List<CNV>();
                    oNV.Add(new CNV { sName = "fkiproductid", sValue = oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue });
                    Info.Add("fkiproductid : " + oBOI.Attributes[oBOI.BOD.sPrimaryKey].sValue);
                    var oProductVersionI = oXII.BOI("ProductVersion_T", "", "", oNV);
                    Info.Add("ProductVersion_T bo: " + oProductVersionI);
                    if (oProductVersionI == null)
                    {
                        XIIBO oVersionI = new XIIBO();
                        XIInfraCache oCache = new XIInfraCache();
                        XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "ProductVersion_T", null);
                        oVersionI.BOD = oBOD;
                        oVersionI.LoadBOI(sBOGroupName);
                        if (oVersionI.Attributes.ContainsKey("fkiproductid") && oBOI.Attributes.ContainsKey("id"))
                        {
                            oVersionI.Attributes["fkiproductid"].sValue = oBOI.Attributes["id"].sValue;
                        }
                        if (oVersionI.Attributes.ContainsKey("sname") && oBOI.Attributes.ContainsKey("sname"))
                        {
                            oVersionI.Attributes["sname"].sValue = oBOI.Attributes["sname"].sValue + " v1";
                        }
                        if (oVersionI.Attributes.ContainsKey("sdescription") && oBOI.Attributes.ContainsKey("sdescription"))
                        {
                            oVersionI.Attributes["sdescription"].sValue = oBOI.Attributes["sname"].sValue + " v1";
                        }
                        if (oVersionI.Attributes.ContainsKey("istatus"))
                        {
                            oVersionI.Attributes["istatus"].sValue = "10";
                        }
                        if (oVersionI.Attributes.ContainsKey("dactivefrom"))
                        {
                            oVersionI.Attributes["dactivefrom"].sValue = DateTime.Now.Date.ToString();
                        }
                        if (oVersionI.Attributes.ContainsKey("dactiveto"))
                        {
                            oVersionI.Attributes["dactiveto"].sValue = DateTime.Now.Date.AddYears(5).ToString();
                        }
                        if (oVersionI.Attributes.ContainsKey("fkiclassid") && oBOI.Attributes.ContainsKey("fkiclassid"))
                        {
                            oVersionI.Attributes["fkiclassid"].sValue = oBOI.Attributes["fkiclassid"].sValue;
                        }
                        Info.Add("ProductVersion_T bo FkiorgID: " + oBOI.Attributes["fkiorgid"].sValue);
                        oVersionI.Attributes["fkiorgid"].sValue = oBOI.Attributes["fkiorgid"].sValue;
                        oCResult = oVersionI.Save(oVersionI, false);
                        string sInfo = "Execution Process: " + string.Join(",\r\n ", Info);
                        oCResult.sMessage = sInfo;
                        oXID.SaveErrortoDB(oCResult);
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                string sInfo = "Error: InsertProductVersion method info " + string.Join(",\r\n ", Info);
                oCResult.sMessage = sInfo;
                //oCResult.sMessage = "ERROR: [PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }
        public CResult UpdateRenewalQuotes(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iInstanceID = 0;
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                string iMainQSinstanceID = oParams.Where(m => m.sName.ToLower() == "iMainQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (int.TryParse(iMainQSinstanceID, out iInstanceID))
                {
                }
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(iMainQSinstanceID, out QSIGUID);

                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    XIInfraUsers oUserD = new XIInfraUsers();
                    XIInfraCache oCache = new XIInfraCache();
                    XIIXI oIXI = new XIIXI();
                    //XIInfraEncryption xifEncrypt = new XIInfraEncryption();
                    //var oQSInstance = oIXI.GetQuestionSetInstanceByID(0, iInstanceID, null, 0, 0, null);
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    //XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iInstanceID);
                    //var iPaymentType = oQSInstance.XIIValues("iClientPayment");
                    QueryEngine oQE1 = new QueryEngine();
                    List<XIWhereParams> oWParams1 = new List<XIWhereParams>();
                    List<SqlParameter> SQLParams = new List<SqlParameter>();
                    //List<CNV> oWhrParams = new List<CNV>();
                    //XIIBO oBO = new XIIBO();
                    //oWhrParams.Add(new CNV { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString() });
                    oWParams1.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = QSIGUID.ToString() });
                    SQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = QSIGUID.ToString() });
                    oWParams1.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                    SQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                    //oWParams1.Add(new XIWhereParams { sField = "iBuyStatus", sOperator = "=", sValue = "10" });
                    oQE1.AddBO("Aggregations", "", oWParams1);
                    CResult oCresult1 = oQE1.BuildQuery();
                    if (oCresult1.bOK && oCresult1.oResult != null)
                    {
                        var sSql1 = (string)oCresult1.oResult;
                        ExecutionEngine oEE = new ExecutionEngine();
                        oEE.XIDataSource = oQE1.XIDataSource;
                        oEE.sSQL = sSql1;
                        oEE.SqlParams = SQLParams;
                        var oQResult = oEE.Execute();
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            var oBOD1 = oQE1.QParams.FirstOrDefault().BOD;
                            oBOIList1.ForEach(x => x.BOD = oBOD1);
                            foreach (var oQuote in oBOIList1)
                            {
                                int iProductID = 0;
                                string FKiProductVersionID = oQuote.Attributes["FKiProductVersionID"].sValue;
                                if (!string.IsNullOrEmpty(FKiProductVersionID))
                                {
                                    var oProductVersionI = oIXI.BOI("Productversion_T", FKiProductVersionID);
                                    if (oProductVersionI != null && oProductVersionI.Attributes.ContainsKey("FKiProductID"))
                                    {
                                        if (int.TryParse(oProductVersionI.Attributes["FKiProductID"].sValue, out iProductID))
                                        {
                                        }
                                    }
                                }
                                var oBOI = oIXI.BOI("Aggregations", oQuote.Attributes["id"].sValue, "Create");
                                var oProductI = oIXI.BOI("Product", iProductID.ToString());
                                float rAddonTotal = 0;
                                float rAddonAdminTotal = 0;
                                float rTotal = 0;

                                float rAdmin = 0;
                                float rDefaultDeposit = 0;
                                float rPFAmount = 0;
                                float rPaymentCharge = 0;
                                float rInsurerCharge = 0;
                                float rFinalQuote = 0;
                                // float rQuotePremium = 0;
                                if (float.TryParse(oQuote.Attributes["zDefaultAdmin"].sValue, out rAdmin))
                                {
                                }
                                if (float.TryParse(oQuote.Attributes["rPrice"].sValue, out rFinalQuote))
                                {
                                }
                                double rTotalAdmin = rAdmin + rAddonAdminTotal;
                                if (float.TryParse(oProductI.Attributes["rPaymentCharge"].sValue, out rPaymentCharge))
                                {
                                }
                                if (float.TryParse(oProductI.Attributes["rInsurerCharge"].sValue, out rInsurerCharge))
                                {
                                }
                                rFinalQuote += rAdmin + rPaymentCharge + rInsurerCharge;
                                rTotal += rFinalQuote + rAddonTotal + rAddonAdminTotal;
                                XIAPI oXIAPI = new XIAPI();
                                var obj = oXIAPI.GetMinimumDepostAmount(rPaymentCharge, rInsurerCharge, rFinalQuote, rAdmin, sGUID, iMainQSinstanceID, iProductID, rAddonAdminTotal, rAddonTotal);
                                if (float.TryParse(obj, out rDefaultDeposit))
                                { }
                                var PFSchemeID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iPFSchemeID}");
                                int iPFSchemeID = 0;
                                if (int.TryParse(PFSchemeID, out iPFSchemeID))
                                { }
                                var MonthlyAmount = oXIAPI.GetMonthlyPremiumAmount(rFinalQuote, rDefaultDeposit, iProductID, rAddonAdminTotal, rAddonTotal, iPFSchemeID);
                                double rMonthlyTotal = (MonthlyAmount * 10) + rDefaultDeposit;
                                if (oQuote.Attributes.ContainsKey("rMonthlyPrice"))
                                {
                                    oQuote.Attributes["rMonthlyPrice"].sValue = String.Format("{0:0.00}", MonthlyAmount);
                                }
                                if (oQuote.Attributes.ContainsKey("rMonthlyTotal"))
                                {
                                    oQuote.Attributes["rMonthlyTotal"].sValue = String.Format("{0:0.00}", rMonthlyTotal);
                                }
                                if (oQuote.Attributes.ContainsKey("rAddonAdmin"))
                                {
                                    oQuote.Attributes["rAddonAdmin"].sValue = String.Format("{0:0.00}", rAddonAdminTotal);
                                }
                                if (oQuote.Attributes.ContainsKey("rPaymentCharge"))
                                {
                                    oQuote.Attributes["rPaymentCharge"].sValue = String.Format("{0:0.00}", rPaymentCharge);
                                }
                                if (oQuote.Attributes.ContainsKey("rInsurerCharge"))
                                {
                                    oQuote.Attributes["rInsurerCharge"].sValue = String.Format("{0:0.00}", rInsurerCharge);
                                }
                                if (oQuote.Attributes.ContainsKey("rTotalAdmin"))
                                {
                                    oQuote.Attributes["rTotalAdmin"].sValue = String.Format("{0:0.00}", rTotalAdmin);
                                }
                                if (oQuote.Attributes.ContainsKey("zDefaultDeposit"))
                                {
                                    oQuote.Attributes["zDefaultDeposit"].sValue = String.Format("{0:0.00}", rDefaultDeposit);
                                }
                                if (oQuote.Attributes.ContainsKey("rAddonPrice"))
                                {
                                    oQuote.Attributes["rAddonPrice"].sValue = String.Format("{0:0.00}", rAddonTotal);
                                }
                                if (oQuote.Attributes.ContainsKey("rtotal"))
                                {
                                    oQuote.Attributes["rtotal"].sValue = String.Format("{0:0.00}", rTotal);
                                }
                                if (oQuote.Attributes.ContainsKey("rpremiumfinanceamount"))
                                {
                                    oQuote.Attributes["rpremiumfinanceamount"].sValue = String.Format("{0:0.00}", rPFAmount);
                                }
                                if (oQuote.Attributes.ContainsKey("rFinalPremium"))
                                {
                                    oQuote.Attributes["rFinalPremium"].sValue = String.Format("{0:0.00}", rTotal);
                                }
                                if (oQuote.Attributes.ContainsKey("rFinalQuote"))
                                {
                                    oQuote.Attributes["rFinalQuote"].sValue = String.Format("{0:0.00}", rTotal);
                                }
                                oQuote.Attributes.ToList().ForEach(m => m.Value.bDirty = true);
                                var oQuoteI = oQuote.Save(oQuote);
                            }
                        }
                    }
                    oCResult.oResult = null;
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iInstanceID);
            }
            return oCResult;
        }
        public CResult UpdateLeadStatus(List<CNV> oParams, iSiganlR oSignalR)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            var sLeadAttrName = "";
            var sLeadStatus = "";
            try
            {
                var sSessionID = "";
                if (HttpContext.Current != null)
                {
                    sSessionID = HttpContext.Current.Session.SessionID;
                }
                string sBO = oParams.Where(m => m.sName.ToLower() == "sLeadBo".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iLeadID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                sLeadAttrName = oParams.Where(m => m.sName.ToLower() == "sLeadAttrName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                sLeadStatus = oParams.Where(m => m.sName.ToLower() == "sLeadStatus".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iLeadID = 0;
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                if (string.IsNullOrEmpty(sLeadStatus) && string.IsNullOrEmpty(sLeadAttrName))
                {
                    sLeadStatus = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|sLeadStatus}");
                    sLeadAttrName = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|sLeadAttrName}");
                }
                XIInfraUsers oUser = new XIInfraUsers();
                if (int.TryParse(iID, out iLeadID))
                { }
                XIIBO oBOI = new XIIBO();
                if (iLeadID > 0)
                {
                    oBOI = oXII.BOI(sBO, iLeadID.ToString());

                    if (oBOI != null && oBOI.Attributes.ContainsKey(sLeadAttrName) && !string.IsNullOrEmpty(sLeadStatus))
                    {
                        var sPastLeadStatus = oBOI.BOD.Attributes[sLeadAttrName].OptionList.Where(m => m.sValues == oBOI.Attributes[sLeadAttrName].sValue).Select(m => m.sOptionName).FirstOrDefault();
                        oBOI.Attributes[sLeadAttrName].sValue = sLeadStatus;
                        oBOI.Attributes[sLeadAttrName].bDirty = true;
                        oBOI.Attributes["id"].bDirty = true;
                        oBOI.oSignalR = oSignalR;
                        var LeadData = oBOI.Save(oBOI);
                        if (LeadData.xiStatus == 0 && LeadData.oResult != null)
                        {
                            var LeadBOI = (XIIBO)LeadData.oResult;
                            if (LeadBOI.BOD.Scripts.Values.Where(m => m.IsSuccess == false).OrderBy(x => x.iOrder).Count() > 0)
                            {
                                oCResult.oResult = "Error";
                                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            }
                            else
                            {
                                if (LeadBOI.BOD.BOID == 717)
                                {
                                    var sLeadID = string.Empty;
                                    if (LeadBOI.Attributes.ContainsKey(LeadBOI.BOD.sPrimaryKey))
                                    {
                                        sLeadID = LeadBOI.Attributes[LeadBOI.BOD.sPrimaryKey].sValue;
                                    };
                                    var sCurrentLeadStatus = oBOI.BOD.Attributes["istatus"].OptionList.Where(m => m.sValues == oBOI.Attributes["iStatus"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                                    //Save to Life Cycle
                                    XIIBO oLCBOI = new XIIBO();
                                    var oBOInsatnce = oLCBOI.Get_BOInstance("LifeCycle", null);
                                    if (oBOInsatnce.Attributes.ContainsKey("FKiLeadID"))
                                    {
                                        oLCBOI.Attributes.Add("FKiLeadID", new XIIAttribute() { sName = "FKiLeadID", sValue = iLeadID.ToString(), bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("dtTo"))
                                    {
                                        oLCBOI.Attributes.Add("dtTo", new XIIAttribute() { sName = "dtTo", sValue = DateTime.Now.ToString(), bDirty = true });
                                    }
                                    //if (oBOInsatnce.Attributes.ContainsKey("FKiQSIID"))
                                    //{
                                    //    oLCBOI.Attributes.Add("FKiQSIID", new XIIAttribute() { sName = "FKiQSIID", sValue = iInstanceID.ToString(), bDirty = true });
                                    //}
                                    if (oBOInsatnce.Attributes.ContainsKey("sCode"))
                                    {
                                        oLCBOI.Attributes.Add("sCode", new XIIAttribute() { sName = "sCode", sValue = "Stage", bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sFrom"))
                                    {
                                        oLCBOI.Attributes.Add("sFrom", new XIIAttribute() { sName = "sFrom", sValue = sPastLeadStatus, bDirty = true });
                                    }
                                    if (oBOInsatnce.Attributes.ContainsKey("sTo"))
                                    {
                                        oLCBOI.Attributes.Add("sTo", new XIIAttribute() { sName = "sTo", sValue = sCurrentLeadStatus, bDirty = true });
                                    }
                                    //oLCBOI.Attributes.Add("FKiQSDefinitionID", new XIIAttribute() { sName = "FKiQSDefinitionID", sValue = iQSDID.ToString(), bDirty = true });
                                    oLCBOI.BOD = oBOInsatnce.BOD;
                                    oLCBOI.oSignalR = oSignalR;
                                    oLCBOI.Save(oLCBOI);
                                }
                                oCResult.oResult = "Success";
                                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            }
                        }
                        else
                        {
                            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                            oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " ] - Lead insertion failed";
                            oUser.Save_UserMessage("", "", null, oCResult.xiStatus, oCResult.sMessage);
                            oXID.SaveErrortoDB(oCResult, iQSInstanceID);
                        }
                    }
                }


                //}
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public CResult AssignTeamOrUser(List<CNV> oParams)
        {
            string iQSInstanceID = string.Empty;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always	
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??	
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE	
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 	
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)	
            //oCResult.oTraceStack.Trace("Stage",sError)	
            //end if	
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)	
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sBO = oParams.Where(m => m.sName.ToLower() == "sLeadBo".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iLeadID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                iQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessMessage = oParams.Where(x => x.sName.ToLower() == "SuccessMessage".ToLower()).Select(x => x.sValue).FirstOrDefault();
                string sFailureMessage = oParams.Where(x => x.sName.ToLower() == "FailureMessage".ToLower()).Select(x => x.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //iID = oCache.Get_ParamVal(sSessionID, sGUID, "", "id");
                int iLeadID = 0;
                XIIXI oXII = new XIIXI();
                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID);
                if (int.TryParse(iID, out iLeadID))
                { }
                XIIBO oBOI = new XIIBO();
                if (iLeadID > 0)
                {
                    oBOI = oXII.BOI(sBO, iLeadID.ToString());
                    if (oBOI != null)
                    {
                        oBOI.SetAttribute("FKiTeamID", oQSInstance.XIIValues("Team"));
                        oBOI.SetAttribute("FKiUserID", oQSInstance.XIIValues("User"));
                        if (!string.IsNullOrEmpty(oQSInstance.XIIValues("Team")))
                        {
                            var oTeamBOI = oXII.BOI("XITeam_T", oQSInstance.XIIValues("Team").ToString());
                            oBOI.SetAttribute("sHandler", oTeamBOI.AttributeI("sName").sValue);
                        }
                        if (!string.IsNullOrEmpty(oQSInstance.XIIValues("User")))
                        {
                            var oUserBOI = oXII.BOI("XIAPPUsers_AU_T", oQSInstance.XIIValues("User").ToString());
                            oBOI.SetAttribute("sHandler", oUserBOI.AttributeI("sFirstName").sValue);
                        }
                        var LeadData = oBOI.Save(oBOI);
                        if (LeadData.xiStatus == 0 && LeadData.oResult != null)
                        {
                            var LeadBOI = (XIIBO)LeadData.oResult;
                            oCResult.oResult = sSuccessMessage;
                        }
                        else
                        {
                            oCResult.oResult = sFailureMessage;
                        }
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                    }
                    else
                    {
                        oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " ] - Lead insertion failed";
                        oXID.SaveErrortoDB(oCResult, Convert.ToInt32(iQSInstanceID));
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, Convert.ToInt32(iQSInstanceID));
            }
            return oCResult;
        }
        #region Product Copy
        public CResult ProductCopy(List<CNV> oParams)
        {
            XIInfraCache oCache = new XIInfraCache();
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            List<string> Info = new List<string>();
            try
            {
                Dictionary<string, string> dictmsg = new Dictionary<string, string>();
                XIIXI oIXI = new XIIXI();
                var sSessionID = HttpContext.Current.Session.SessionID;
                int iInstanceID = 0;
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sType = oParams.Where(m => m.sName.ToLower() == "sType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sNextStep = oParams.Where(m => m.sName.ToLower() == "NextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "sFailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "sSuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iInstanceID = Convert.ToInt32(iID);
                }
                if (!string.IsNullOrEmpty(sBOName) && iInstanceID > 0)
                {
                    var oBOIList = oIXI.BOI(sBOName, iID, null, null, true);
                    if (oBOIList != null/* && oBOIList.Attributes.ContainsKey("FkiQSInstanceID")*/)
                    {
                        // Copy Entire Structure Object
                        XIDStructure oStructure = new XIDStructure();
                        List<CNV> CopyParams = new List<CNV>();
                        CopyParams.Add(new CNV { sType = "Product", sName = "iStatus", sValue = "20", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Product", sName = "sName", sValue = oBOIList.Attributes["sName"].sValue + " Copy", sContext = "Save" });
                        CopyParams.Add(new CNV { sType = "Product", sName = "sImage", sValue = "", sContext = "Save" });
                        CopyParams.AddRange(oParams);
                        var oList = oStructure.StructureCopy("Product", iInstanceID.ToString(), sStructureName, CopyParams, true);
                        Info.Add("Product StructureCopy done");
                        var sNewInsID = oList.oResult.ToString();
                        int iNewInsID = 0;
                        var oData = oStructure.xiCopyParams;
                        if (int.TryParse(sNewInsID, out iNewInsID))
                        {
                            dictmsg.Add("Success:UserName", "Product Copied successfully");
                            oParams.Add(new CNV { sName = "sNewProductName", sValue = oBOIList.Attributes["sName"].sValue + " Copy" });
                            oParams.Add(new CNV { sName = "sOldProductName", sValue = oBOIList.Attributes["sName"].sValue });
                            XIAPI oXIAPI = new XIAPI();
                            List<XIWhereParams> oWHParams = new List<XIWhereParams>();
                            oWHParams.Add(new XIWhereParams { sField = "id", sOperator = "=", sValue = oBOIList.Attributes["fkiClassID"].sValue });
                            var sClass = oXIAPI.GetValue("XIClass_T", "sName", oWHParams);
                            oParams.Add(new CNV { sName = "sClassName", sValue = sClass });
                            CopyFolder(oParams);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sSuccessStep, null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iInstanceID}", oData.Where(d => d.sBOName == "Lead_T").Select(t => t.AttributeI("id").sValue).FirstOrDefault(), null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|sBOName}", "Lead_T", null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                            oCResult.oResult = "Success";
                        }
                        else
                        {
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                            dictmsg.Add("Error:UserName", "Product Copy failed");
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "IsQsLoad", "true", null, null);
                            oCache.Set_ObjectSetCache(sSessionID, "StepMessage", sGUID, dictmsg);
                            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                            oTrace.sMessage = "Product copy failed";
                        }
                    }
                    else
                    {
                        oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                        oTrace.sMessage = "Product BO Instance is null";
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                    oTrace.sMessage = "Mandatory Param: sBOName,iInstanceID is missing";
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.oResult = "Failed";
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return oCResult;
        }
        #endregion
        public CResult CopyFolder(List<CNV> oParams)
        {
            XIInfraCache oCache = new XIInfraCache();
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            List<string> Info = new List<string>();
            try
            {
                XIInfraDocs oXIDocs = new XIInfraDocs();
                string sCopyDocumentPath = string.Empty;
                string sProductName = oParams.Where(m => m.sName.ToLower() == "sOldProductName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sClassName = oParams.Where(m => m.sName.ToLower() == "sClassName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sCopiedProductName = oParams.Where(m => m.sName.ToLower() == "sNewProductName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string physicalPath = System.Web.Hosting.HostingEnvironment.MapPath("~");
                string sPath = physicalPath.Substring(0, physicalPath.Length) + "\\Content\\ProductNonMergedDocuments\\" + sProductName + "_" + sClassName + "";
                string[] filePaths = Directory.GetFiles(@"" + sPath + "");
                string sNewPath = physicalPath.Substring(0, physicalPath.Length) + "\\Content\\ProductNonMergedDocuments\\" + sCopiedProductName + "_" + sClassName + "";
                if (!System.IO.Directory.Exists(sNewPath))
                {
                    foreach (var item in filePaths)
                    {
                        int ipos = item.LastIndexOf("\\") + 1;
                        string sFileName = item.Substring(ipos, item.Length - ipos);
                        //if (sCopyDocumentName == sFileName.Split('.')[0])
                        //{
                        sCopyDocumentPath = item;
                        //}
                        int pos = sCopyDocumentPath.LastIndexOf("\\") + 1;
                        string sCopyDocFileName = sCopyDocumentPath.Substring(pos, sCopyDocumentPath.Length - pos);
                        //if(sCopyDocFileName!="" && File.Exists(sCopyDocumentPath))
                        if (!string.IsNullOrEmpty(sCopyDocFileName))
                        {
                            FileStream fs = new FileStream(sCopyDocumentPath, FileMode.Open, FileAccess.Read);
                            byte[] tmpBytes = new byte[fs.Length];
                            fs.Read(tmpBytes, 0, Convert.ToInt32(fs.Length));
                            MemoryStream mystream = new MemoryStream(tmpBytes);
                            StreamReader reader = new StreamReader(mystream);
                            oXIDocs.SaveNonMergedDocumentsToFolder(mystream, "", sFileName, sFileName.Split('.')[1], "", sCopiedProductName, sClassName);


                            //oCResult.sMessage = sPath;
                            //SaveErrortoDB(oCResult);
                            //oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            //if (!System.IO.Directory.Exists(sCopiedProductName))
                            //{
                            //    try
                            //    {
                            //        Directory.CreateDirectory(sCopiedProductName);
                            //    }
                            //    catch (Exception ex)
                            //    {
                            //        oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                            //        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                            //        oCResult.LogToFile();
                            //    }
                            //}
                            //HttpPostedFileBase objFile = (HttpPostedFileBase)new MemoryPostedFile(data1, sFileName, "application/" + sFileType + "");
                            //oXIDocs.WriteFileFromStream(objFile.InputStream, sPath + sFileName);
                            //var oResponse = oXIDocs.SaveDocuments(mystream, sCopyDocFileName);//save documents to folder
                            //if (oResponse.bOK && oResponse.oResult != null)
                            //{
                            //    sInstanceID = (string)oResponse.oResult;
                            //    oCResult.oTraceStack.Add(new CNV { sName = "Non-Merging Document saving", sValue = "" + sCopyDocFileName + " Document saved successfully,DocID:" + sInstanceID + "" });
                            //}
                            oCResult.oResult = mystream;
                            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        }
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiSuccess;
                    oTrace.sMessage = "Path " + sNewPath + " already exists.";
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();

            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return oCResult;
        }
        public CResult RenameFolder(List<CNV> oParams)
        {
            XIInfraCache oCache = new XIInfraCache();
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            List<string> Info = new List<string>();
            try
            {
                oTrace.oTrace.Add(oCR.oTrace);
                XIInfraDocs oXIDocs = new XIInfraDocs();
                string sCopyDocumentPath = string.Empty;
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sProductN = oCache.Get_ParamVal("", sGUID, "", "-sname");
                string sProductold = oCache.Get_ParamVal("", sGUID, "", "-sname_previous");
                XIIXI oXII = new XIIXI();
                if (!string.IsNullOrEmpty(sInstanceID))
                {
                    var oProductI = oXII.BOI("Product", sInstanceID);
                    if (oProductI != null && oProductI.Attributes != null && oProductI.Attributes.ContainsKey("fkiclassid"))
                    {
                        XIAPI oXIAPI = new XIAPI();
                        List<XIWhereParams> oWHParams = new List<XIWhereParams>();
                        oWHParams.Add(new XIWhereParams { sField = "id", sOperator = "=", sValue = oProductI.Attributes["fkiClassID"].sValue });
                        var sClassName = oXIAPI.GetValue("XIClass_T", "sName", oWHParams);
                        //string sClassName = oProductI.Attributes["fkiclassid"].ResolveFK("display");
                        string physicalPath = System.Web.Hosting.HostingEnvironment.MapPath("~");
                        string sPath = physicalPath.Substring(0, physicalPath.Length) + "\\Content\\ProductNonMergedDocuments\\" + sProductold + "_" + sClassName + "";
                        string[] filePaths = Directory.GetFiles(@"" + sPath + "");
                        string sNewPath = physicalPath.Substring(0, physicalPath.Length) + "\\Content\\ProductNonMergedDocuments\\" + sProductN + "_" + sClassName + "";
                        if (!System.IO.Directory.Exists(sNewPath))
                        {
                            Directory.Move(sPath, sNewPath);
                        }
                        else
                        {
                            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiSuccess;
                            oTrace.sMessage = "Path " + sNewPath + " already exists.";
                        }
                    }
                    else
                    {
                        oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                        oTrace.sMessage = "Product instance is null or missed FKiClassID attribute";
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                    oTrace.sMessage = "Mandatory Param:InstanceID  is missing";
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();

            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return oCResult;
        }
        public CResult XMLObjectGeneration(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                //var sSessionID = HttpContext.Current.Session.SessionID;
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var RequestObject = oParams.Where(m => m.sName.ToLower() == "RequestObject".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var XSD = oParams.Where(m => m.sName.ToLower() == "XSD".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}", sQSInstanceID, null, null);
                string iUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                if (int.TryParse(sQSInstanceID, out iQSInstanceID))
                { }
                Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                XIIXI oIXI = new XIIXI();
                XIIQS oQSInstance = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                XmlDocument xmlDoc = new XmlDocument();
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "sName", sValue = RequestObject });
                var oTemplateName = oIXI.BOI("XIAPI Settings", null, "*", oWhrParams);
                oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "sName", sValue = XSD });
                var XSDValidator = oIXI.BOI("XIAPI Settings", null, "*", oWhrParams);

                var oDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, oTemplateName.AttributeI("FKiTemplateID").sValue); //oXIDX.Get_ContentDefinition(iDocumentID, sDocumentType);
                XIContentEditors oDocumentContent = new XIContentEditors();
                oDocumentContent = oDocContent.FirstOrDefault();

                var oLIst = oIXI.BOI("QS Instance", sQSInstanceID);
                var oInstance = oLIst.Structure("NotationStructure").XILoad();
                var oRes = oDocumentContent.MergeContentTemplate(oDocumentContent, oInstance);
                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(oRes.oResult.ToString());
                var userName = xDoc.GetElementsByTagName("APIUserName").Item(0).InnerText;
                var password = xDoc.GetElementsByTagName("APIPassword").Item(0).InnerText;
                XIIXI oXI = new XIIXI();
                XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "xileadimport", null);
                XIIBO oBOI = new XIIBO();
                oBOI.BOD = oBOD;
                oBOI.SetAttribute("sLeadData", oRes.oResult.ToString());
                oBOI.SetAttribute("FKiClassID", oQSInstance.FKiClassID.ToString());
                oBOI.SetAttribute("FKiOriginID", oQSInstance.FKiOriginID.ToString());
                oBOI.SetAttribute("FKiSourceID", oQSInstance.FKiSourceID.ToString());
                var res = oBOI.Save(oBOI);
                if (oTemplateName.AttributeI("sUserName").sValue == userName && oTemplateName.AttributeI("sPassWord").sValue == password)
                {
                    var resp = GetRecordByID<CResult>("api/XMLHandler/PostMHXML/" + ((XIIBO)res.oResult).AttributeI("id").iValue + "/'" + sSessionID + "'/" + iQSInstanceID + "/" + XSDValidator.AttributeI("FKiTemplateID").sValue);
                }
                else
                {
                    dictMsgs.Add("10", "Authentication failed.");
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "UpDatePolicyIDToBOI", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult; // always
        }
        public static T GetRecordByID<T>(string path)
        {
            string token = null;
            var client = new RestSharp.RestClient();
            client.BaseUrl = new Uri(ConfigurationManager.AppSettings["APIBaseUrl"].ToString());
            var req = new RestSharp.RestRequest(path, RestSharp.Method.GET);
            req.AddHeader(System.Net.HttpRequestHeader.Authorization.ToString(), string.Format("Bearer {0}", token));
            req.Timeout = 300000;
            var res = client.Execute(req).Content;
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            T collection = serializer.Deserialize<T>(res);
            return collection;
        }
        public CResult RevokeCancellation(List<CNV> oParams)
        {
            int iPolicyID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iACPolicyID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessMessage = oParams.Where(m => m.sName.ToLower() == "SuccessMessage".ToLower()).Select(m => m.sValue).FirstOrDefault();

                if (!string.IsNullOrEmpty(iID) && iID != "0")
                {
                    iPolicyID = Convert.ToInt32(iID);
                    XIIXI oXII = new XIIXI();
                    XIInfraCache oCache = new XIInfraCache();
                    List<CNV> oWhrParams = new List<CNV>();
                    oWhrParams.Add(new CNV { sName = "FkiACPolicyID", sValue = iID });
                    oWhrParams.Add(new CNV { sName = "iStatus", sValue = "10" });
                    XIIBO oBOI = new XIIBO();
                    oBOI = oXII.BOI("ACPolicyVersion_T", null, null, oWhrParams);
                    if (oBOI != null && oBOI.Attributes.ContainsKey("iPolicyStatus"))
                    {
                        var PolicyStatus = oBOI.Attributes["iPolicyStatus"].sValue;
                        var oPolicyI = oXII.BOI("ACPolicy_T", iID, "Create");
                        if (oPolicyI != null && oPolicyI.Attributes.ContainsKey("iStatus"))
                        {
                            oPolicyI.SetAttribute("iStatus", PolicyStatus);
                            var oResult = oPolicyI.Save(oPolicyI);
                            if (oResult.bOK && oResult.oResult != null)
                            {
                                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                                oCResult.oResult = sSuccessMessage;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Revoke cancellation process" });
                oCResult.sMessage = "ERROR: [ PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0, iPolicyID);
            }
            return oCResult;
        }
        public CResult UpdateTraceField(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sBO = oParams.Where(m => m.sName.ToLower() == "sBO".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sTraceField = oParams.Where(m => m.sName.ToLower() == "sTraceField".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iID = 0;
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                string sLeadStatus = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|sLeadStatus}");
                string sBO = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|sBO}");
                string sTraceField = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|sTraceAttribute}");
                if (int.TryParse(sID, out iID))
                { }
                XIIBO oBOI = new XIIBO();
                if (iID > 0)
                {
                    oBOI = oXII.BOI(sBO, iID.ToString());
                    if (oBOI != null && oBOI.Attributes.ContainsKey(sTraceField) && !string.IsNullOrEmpty(sLeadStatus))
                    {
                        var sPastLeadStatus = oBOI.BOD.Attributes[sTraceField].OptionList.Where(m => m.sValues == oBOI.Attributes[sTraceField].sValue).Select(m => m.sOptionName).FirstOrDefault();
                        oBOI.Attributes[sTraceField].sValue = sLeadStatus;
                        oBOI.Attributes[sTraceField].bDirty = true;
                        oBOI.Attributes["id"].bDirty = true;
                        var oBoResult = oBOI.Save(oBOI);
                        if (oBoResult.xiStatus == 0 && oBoResult.oResult != null)
                        {
                            var BOI = (XIIBO)oBoResult.oResult;
                            if (BOI.BOD.Scripts.Values.Where(m => m.IsSuccess == false).OrderBy(x => x.iOrder).Count() > 0)
                            {
                                oCResult.oResult = "Error";
                                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            }
                            else
                            {
                                oCResult.oResult = "Success";
                                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                            }
                        }
                        else
                        {
                            oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " ] - Lead insertion failed";
                            oXID.SaveErrortoDB(oCResult, iQSInstanceID);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While inserting Lead" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }
        public CResult ExecuteLegalScript(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            List<string> Info = new List<string>();
            Info.Add("ExecuteLegalScript Method Started");
            XIInfraCache oCache = new XIInfraCache();
            var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            if (sSessionID != "API")
                sSessionID = HttpContext.Current.Session.SessionID;
            string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            //    string sCustomerStartRef = oParams.Where(m => m.sName.ToLower() == "sCustomerStartReference".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sFKiClassID = oParams.Where(m => m.sName.ToLower() == "FKiClassID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sScriptType = oParams.Where(m => m.sName.ToLower() == "sScriptType".ToLower()).Select(m => m.sValue).FirstOrDefault();
            XID1Click oD1Click = new XID1Click();
            int iInstanceID = 0;
            if (int.TryParse(iID, out iInstanceID))
            {
            }
            int iScriptType = 10;
            if (!string.IsNullOrEmpty(sScriptType) && sScriptType.ToLower() == "partial")
            {
                iScriptType = 20;
            }
            XIIXI oXII = new XIIXI();
            XIIQS oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
            var QSType = oCache.Get_ParamVal(sSessionID, sGUID, null, "sQSType");
            string sName = oQSI.XIIValues("sFirstName") + " " + oQSI.XIIValues("sLastName");
            List<XIIBO> oBOIList = new List<XIIBO>();
            var BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "LegalAggregation");
            int iQSType = 0;
            bool bIsVisibleUser = false;
            if (!string.IsNullOrEmpty(QSType) && QSType.ToLower() == "internal")
            {
                iQSType = 10;
            }
            else
            {
                iQSType = 20;
                bIsVisibleUser = true;
            }
            QueryEngine oAggregationsQE = new QueryEngine();
            List<XIWhereParams> oWParams = new List<XIWhereParams>();
            List<SqlParameter> SqlParams = new List<SqlParameter>();
            oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iInstanceID.ToString() });
            SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iInstanceID.ToString() });
            oAggregationsQE.AddBO("LegalAggregation", "", oWParams);
            CResult oCresult1 = oAggregationsQE.BuildQuery();
            if (oCresult1.bOK && oCresult1.oResult != null)
            {
                var sSql1 = (string)oCresult1.oResult;
                ExecutionEngine oEE = new ExecutionEngine();
                oEE.XIDataSource = oAggregationsQE.XIDataSource;
                oEE.sSQL = sSql1;
                oEE.SqlParams = SqlParams;
                var oQResult = oEE.Execute();
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    var oBOD1 = oAggregationsQE.QParams.FirstOrDefault().BOD;
                    oBOIList1.ForEach(x => x.BOD = oBOD1);
                    if (oBOIList1 != null && oBOIList1.Count > 0)
                    {
                        foreach (var oBOI in oBOIList1)
                        {
                            XIIBO oBO = new XIIBO();
                            oBO.Delete(oBOI);
                        }
                    }
                }
            }
            Dictionary<string, object> Params = new Dictionary<string, object>();
            Params["Name"] = "Product";
            XIInfraScript oScript = new XIInfraScript();
            //Getting Product table database
            //Getting Active scripts
            List<CNV> oCNV = new List<CNV>();
            oCNV.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
            string sQuery = "LegalActive ProductsList";
            if (iQSType == 20)
            {
                sQuery = "LegalPublic Active ProductsList";
            }
            var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, sQuery);
            oD1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
            XIDStructure oStructure = new XIDStructure();
            oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(o1ClickI.Query, oCNV);
            oD1Click.Name = "LegalProduct";
            var result = oD1Click.OneClick_Execute();
            foreach (var item in result.Values)
            {
                var ProductID = item.Attributes["ID"].sValue;
                List<CNV> nParams = new List<CNV>();
                nParams.Add(new CNV { sName = "{XIP|dPolicyDate}", sValue = DateTime.Now.ToString("dd-MMM-yyyy") });
                nParams.Add(new CNV { sName = "{XIP|FKiProductID}", sValue = ProductID });
                nParams.Add(new CNV { sName = "{XIP|FKiClassID}", sValue = sFKiClassID });
                //Getting scripts with version
                var oProductVersion1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "LegalProductVersion Scripts");
                oD1Click = (XID1Click)oProductVersion1ClickI.Clone(oProductVersion1ClickI);
                oD1Click.Name = "LegalProductVersion";
                oD1Click.Query = oStructure.ReplaceExpressionWithCacheValue(oProductVersion1ClickI.Query, nParams);
                var oOneClick = oD1Click.OneClick_Execute(null, oD1Click);
                foreach (var item1 in oOneClick.Values)
                {
                    XIIBO oBO = new XIIBO();
                    oBO.BOD = BOD;
                    oBO.Attributes["FKiQSInstanceID"] = new XIIAttribute { sName = "FKiQSInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                    oBO.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = item.Attributes["name"].sValue, bDirty = true };
                    oBO.Attributes["FKiProductVersionID"] = new XIIAttribute { sName = "FKiProductVersionID", sValue = item1.Attributes["id"].sValue, bDirty = true };
                    double rDefaultPrice = 0;
                    if (item1.Attributes.ContainsKey("default price"))
                    {
                        double.TryParse(item1.Attributes["default price"].sValue, out rDefaultPrice);
                    }
                    oBO.Attributes["rPrice"] = new XIIAttribute { sName = "rPrice", sValue = rDefaultPrice.ToString(), bDirty = true };
                    oBO.Attributes["rFinalQuote"] = new XIIAttribute { sName = "rFinalQuote", sValue = rDefaultPrice.ToString(), bDirty = true };
                    oBOIList.Add(oBO);
                }
            }
            XIIBO xibulk = new XIIBO();
            System.Data.DataTable dtbulk = xibulk.MakeBulkSqlTable(oBOIList);
            xibulk.SaveBulk(dtbulk, oBOIList[0].BOD.iDataSourceXIGUID.ToString(), oBOIList[0].BOD.TableName);
            return oCResult;
        }
        public CResult ScriptCompile(List<CNV> oParams)
        {
            string iInstanceID = string.Empty;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                iInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "id".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string BOGroupName = oParams.Where(m => m.sName.ToLower() == "sGroupName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var bIsCompile = oParams.Where(m => m.sName.ToLower() == "bIsCompile".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var bIsExecute = oParams.Where(m => m.sName.ToLower() == "bIsExecute".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sScript = oParams.Where(m => m.sName.ToLower() == "sScript".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sIndent = oParams.Where(m => m.sName.ToLower() == "sIndent".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var iType = oParams.Where(m => m.sName.ToLower() == "iType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var Items = sScript == null ? new string[0] : sScript.Split('_');
                string sNewScript = "";
                XIDBO oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO_All, sBOName, null);
                List<string> sGroupItems = new List<string>();
                XIIXI oXII = new XIIXI();
                XIIBO oBOI = new XIIBO();
                var bIsDelete = oParams.Where(m => m.sName.ToLower() == "bIsDelete".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (bIsDelete == "true" && !string.IsNullOrEmpty(iID) && iID != "0")
                {
                    oBOI = oXII.BOI(sBOName, iID);
                    if (oBOI != null)
                    {
                        oBOI.Delete(oBOI);
                    }
                }
                else
                {
                    if (iType == "10")   // AlgorithmGroup
                    {
                        if (!string.IsNullOrEmpty(sScript) && sScript.StartsWith("xi.ag")) { }
                        else
                        {
                            sNewScript = "xi.ag";
                            sNewScript += "_" + oParams.Where(m => m.sName.ToLower() == "sVariableName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                            //show fields
                            var sGroupFields = oBOD.Groups.Where(x => x.Key == "AlgorithmGroup".ToLower()).Select(t => t.Value).FirstOrDefault();
                            sGroupItems = sGroupFields.BOFieldNames.Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries).ToList();
                            foreach (var item in sGroupItems)
                            {
                                sNewScript += "_" + oParams.Where(m => m.sName.ToLower() == item.ToLower()).Select(m => m.sValue).FirstOrDefault();
                            }
                        }
                    }
                    if (iType == "20")   // MethodGroup
                    {
                        var FKiAlgorithmActionID = oParams.Where(x => x.sName == "FKiAlgorithmActionID").Select(x => x.sValue).FirstOrDefault();
                        XIIBO oBOIAction = new XIIBO();
                        oBOIAction = oXII.BOI("XIAlgorithmActions_T", FKiAlgorithmActionID);
                        //show fields
                        var sGroupFields = oBOD.Groups.Where(x => x.Key == "MethodGroup".ToLower()).Select(t => t.Value).FirstOrDefault();
                        sGroupItems = sGroupFields.BOFieldNames.Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries).ToList();
                        sNewScript = "xi.m_" + sIndent + ":";
                        //for (int i = 0; i < Convert.ToInt32(iIndent.Length); i++)
                        //{
                        //    sNewScript += "-";
                        //    if (i + 1 == Convert.ToInt32(iIndent.Length))
                        //    {
                        //        sNewScript += ":";
                        //    }
                        //}
                        sNewScript += oParams.Where(m => m.sName.ToLower() == "sVariableName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                        foreach (var item in sGroupItems)
                        {
                            if (item == "FKiAlgorithmActionID")
                                sNewScript += "_a:m." + oBOIAction.AttributeI("sName").sValue;
                            else
                                sNewScript += "_x:" + oParams.Where(m => m.sName.ToLower() == item.ToLower()).Select(m => m.sValue).FirstOrDefault();
                        }
                        string BOName = string.Empty, s1ClickName = string.Empty, sInstanceID = string.Empty, sMethodName = string.Empty, sValue = string.Empty;
                        string sFromBOI = string.Empty, sToBOI = string.Empty, sCopyGroup = string.Empty, sVariableName = string.Empty, sBOInstanceVariable = string.Empty;
                        string sFunctionName = string.Empty, sFunctionVariables = string.Empty;
                        if (oBOIAction.AttributeI("sName").sValue == "BOCreate")
                        {
                            BOName = oParams.Where(x => x.sName == "BOName").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:bod." + BOName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "1Click" || oBOIAction.AttributeI("sName").sValue == "1ClickCount")
                        {
                            s1ClickName = oParams.Where(x => x.sName == "1ClickName").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xif." + s1ClickName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "BOLoad")
                        {
                            BOName = oParams.Where(x => x.sName == "BOName").Select(t => t.sValue).FirstOrDefault();
                            sInstanceID = oParams.Where(x => x.sName == "InstanceID").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:bod." + BOName;
                            if (!string.IsNullOrEmpty(sInstanceID))
                            {
                                sNewScript += "," + sInstanceID;
                            }
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "Iterate")
                        {
                            sMethodName = oParams.Where(x => x.sName == "MethodName").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xim." + sMethodName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "BOCopy")
                        {
                            sFromBOI = oParams.Where(x => x.sName == "FromBOName").Select(t => t.sValue).FirstOrDefault();
                            sToBOI = oParams.Where(x => x.sName == "ToBOName").Select(t => t.sValue).FirstOrDefault();
                            sCopyGroup = oParams.Where(x => x.sName == "CopyGroup").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xic." + sFromBOI + ",xim." + sToBOI;
                            if (!string.IsNullOrEmpty(sCopyGroup))
                            {
                                sNewScript += ",xif." + sCopyGroup;
                            }
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "SetValue")
                        {
                            sMethodName = oParams.Where(x => x.sName == "MethodName").Select(t => t.sValue).FirstOrDefault();
                            sVariableName = oParams.Where(x => x.sName == "VariableName").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xim." + sMethodName + "," + sVariableName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "BOSave")
                        {
                            sBOInstanceVariable = oParams.Where(x => x.sName == "BOInstance").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xim." + sBOInstanceVariable;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "LoadQS")
                        {
                            sInstanceID = oParams.Where(x => x.sName == "InstanceID").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xim." + sInstanceID;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "SetCache")
                        {
                            sVariableName = oParams.Where(x => x.sName == "VariableName").Select(t => t.sValue).FirstOrDefault();
                            sValue = oParams.Where(x => x.sName == "Value").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:" + sVariableName + ",xim." + sValue;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "Function")
                        {
                            sFunctionName = oParams.Where(x => x.sName == "FunctionName").Select(t => t.sValue).FirstOrDefault();
                            sFunctionVariables = oParams.Where(x => x.sName == "FunctionVariables").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:" + sFunctionName + ",xim." + sFunctionVariables;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "Count")
                        {
                            sMethodName = oParams.Where(x => x.sName == "MethodName").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "xim." + sMethodName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "RunScript")
                        {
                            sMethodName = oParams.Where(x => x.sName == "Parameter1").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xim." + sMethodName;
                            sMethodName = oParams.Where(x => x.sName == "Parameter2").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += ",xim." + sMethodName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "Condition")
                        {
                            sMethodName = oParams.Where(x => x.sName == "MethodName").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xim." + sMethodName;
                        }
                        else if (oBOIAction.AttributeI("sName").sValue == "WriteLog")
                        {
                            sMethodName = oParams.Where(x => x.sName == "Message").Select(t => t.sValue).FirstOrDefault();
                            sNewScript += "_x:xif." + sMethodName + ",xif.30";
                        }
                    }
                    if (iType == "30")
                    {
                        if (Items.Length > 0 && Items[1].Contains('-'))
                        {
                            var indentString = "";
                            string sIndentCount = Items[1].Contains(':') ? Items[1].Split(':')[0] : "";
                            if (Convert.ToInt32(sIndent.Length) > sIndentCount.Length)
                            {
                                for (int i = 0; i < (Convert.ToInt32(sIndent.Length) - sIndentCount.Length); i++)
                                {
                                    indentString += "-";
                                }
                                Items[1] = indentString + Items[1];
                            }
                            else if (Convert.ToInt32(sIndent.Length) < sIndentCount.Length)
                            {
                                var count = sIndentCount.Length - Convert.ToInt32(sIndent.Length);
                                Items[1] = Items[1].Substring(count, Items[1].Length - count);
                            }
                            sNewScript = string.Join("_", Items);
                        }
                    }
                    var Msg = "";
                    string oAlgorithmVersionID = string.Empty;
                    XIIBO oAlgorithmLinesVersionI = new XIIBO();
                    XIDBO oAlgorithmsVersionBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "AlgorithmVersions", null);
                    oAlgorithmLinesVersionI.BOD = oAlgorithmsVersionBOD;
                    CScriptController oXIScript = new CScriptController();
                    if (bIsCompile == "true" && bIsExecute == "false")
                    {
                        oCR = oXIScript.API2_Serialise_From_String(sNewScript);
                        oCR = oXIScript.API2_ExecuteMyOM();
                        if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
                        {
                            Msg = oCR.sMessage;
                        }
                    }
                    else if (bIsCompile == "true" && bIsExecute == "true")
                    {
                        oCR = oXIScript.API2_Serialise_From_String(sNewScript);
                        oCR = oXIScript.API2_ExecuteMyOM();
                        if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiSuccess)
                        {
                            Msg = oCR.sMessage;
                            XIIBO oAlgorithmLinesI = new XIIBO();
                            XIInfraCache oCache = new XIInfraCache();
                            oAlgorithmLinesI.BOD = oBOD;
                            oAlgorithmLinesI.LoadBOI(BOGroupName);
                            if (!string.IsNullOrEmpty(iID) && iID != "0")
                            {
                                oBOI = oXII.BOI(sBOName, iID, BOGroupName);
                                if (oBOI != null)
                                {

                                    foreach (var item in oBOI.Attributes)
                                    {
                                        var sValue = oParams.Where(m => m.sName.ToLower() == item.Value.sName.ToLower()).Select(m => m.sValue).FirstOrDefault();
                                        if (!string.IsNullOrEmpty(sValue) || item.Value.sName == "sScript")
                                        {
                                            if (item.Value.sName == "sScript" && sValue != sNewScript)
                                            {
                                                oAlgorithmLinesVersionI.SetAttribute("FKiAlgorithmID", iInstanceID);
                                                var oResult = oAlgorithmLinesVersionI.Save(oAlgorithmLinesVersionI);
                                                oAlgorithmVersionID = ((XIIBO)oResult.oResult).AttributeI("id").sValue;
                                                item.Value.sValue = sNewScript;
                                            }
                                            else
                                            {
                                                item.Value.sValue = sValue;
                                            }
                                        }
                                    }
                                    foreach (var item in sGroupItems)
                                    {
                                        var sValue = oParams.Where(m => m.sName.ToLower() == item.ToLower()).Select(m => m.sValue).FirstOrDefault();
                                        oBOI.SetAttribute(item, sValue);
                                    }
                                    if (!string.IsNullOrEmpty(oAlgorithmVersionID))
                                    {
                                        oBOI.SetAttribute("FKiAlgoritmVersionID", oAlgorithmVersionID);
                                        oBOI.SetAttribute("FKiAlgorithmID", iInstanceID);
                                        oBOI.SetAttribute("id", "0");
                                        oBOI.SetAttribute("sParameter1", oParams.Where(x => x.sContext == "sParameter1").Select(t => t.sValue).FirstOrDefault());
                                        oBOI.SetAttribute("sParameter2", oParams.Where(x => x.sContext == "sParameter2").Select(t => t.sValue).FirstOrDefault());
                                        oBOI.SetAttribute("sParameter3", oParams.Where(x => x.sContext == "sParameter3").Select(t => t.sValue).FirstOrDefault());
                                        oBOI.Attributes.Values.ToList().ForEach(x => x.bDirty = true);
                                        oCResult = oBOI.Save(oBOI);
                                    }
                                    else
                                    {
                                        oBOI.SetAttribute("FKiAlgorithmID", iInstanceID);
                                        oBOI.Attributes.Values.ToList().ForEach(x => x.bDirty = true);
                                        oCResult = oBOI.Save(oBOI);
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(iID))
                            {
                                foreach (var item in oAlgorithmLinesI.Attributes)
                                {
                                    var sValue = oParams.Where(m => m.sName.ToLower() == item.Value.sName.ToLower()).Select(m => m.sValue).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(sValue) || item.Value.sName == "sScript")
                                    {
                                        if (item.Value.sName == "sScript")
                                        {
                                            item.Value.sValue = sNewScript;
                                            oAlgorithmLinesVersionI.SetAttribute("FKiAlgorithmID", iInstanceID);
                                            var oResult = oAlgorithmLinesVersionI.Save(oAlgorithmLinesVersionI);
                                            oAlgorithmVersionID = ((XIIBO)oResult.oResult).AttributeI("id").sValue;
                                        }
                                        else
                                        {
                                            item.Value.sValue = sValue;
                                        }
                                    }
                                }
                                foreach (var item in sGroupItems)
                                {
                                    var sValue = oParams.Where(m => m.sName.ToLower() == item.ToLower()).Select(m => m.sValue).FirstOrDefault();
                                    oAlgorithmLinesI.SetAttribute(item, sValue);
                                }
                                if (!string.IsNullOrEmpty(oAlgorithmVersionID))
                                {
                                    oAlgorithmLinesI.SetAttribute("FKiAlgoritmVersionID", oAlgorithmVersionID);
                                }
                                oAlgorithmLinesI.SetAttribute("FKiAlgorithmID", iInstanceID.ToString());
                                oAlgorithmLinesI.SetAttribute("sParameter1", oParams.Where(x => x.sContext == "sParameter1").Select(t => t.sValue).FirstOrDefault());
                                oAlgorithmLinesI.SetAttribute("sParameter2", oParams.Where(x => x.sContext == "sParameter2").Select(t => t.sValue).FirstOrDefault());
                                oAlgorithmLinesI.SetAttribute("sParameter3", oParams.Where(x => x.sContext == "sParameter3").Select(t => t.sValue).FirstOrDefault());
                                oAlgorithmLinesI.Attributes.Values.ToList().ForEach(x => x.bDirty = true);
                                oCResult = oAlgorithmLinesI.Save(oAlgorithmLinesI);
                            }
                        }
                    }
                }
                oCResult.oResult = "Success";
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Revoke cancellation process" });
                oCResult.sMessage = "ERROR:  " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0);
            }
            return oCResult;
        }
        public CResult Backups(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            try
            {
                string sBOName = oParams.Where(x => x.sName.ToLower() == "sBOName".ToLower()).Select(t => t.sValue).First();
                string sGroupName = oParams.Where(x => x.sName.ToLower() == "sGroupName".ToLower()).Select(t => t.sValue).First();
                XIIBO oEnvironmentI = new XIIBO();
                XIDBO oEnvironmentBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName, null);
                oEnvironmentI.BOD = oEnvironmentBOD;
                oEnvironmentI.LoadBOI(sGroupName);
                XIIBO oEnvironmentDetails = new XIIBO();
                oEnvironmentDetails.BOD = oEnvironmentBOD;
                foreach (var item in oEnvironmentI.Attributes)
                {
                    oEnvironmentDetails.SetAttribute(item.Key, oParams.Where(x => x.sName.ToLower() == item.Key.ToLower()).Select(t => t.sValue).First());
                }
                oCResult = oEnvironmentDetails.Save(oEnvironmentDetails);
                string sTargetDB = oParams.Where(x => x.sName.ToLower() == "sDestinationLocation".ToLower()).Select(t => t.sValue).FirstOrDefault();
                string sSourceDB = oParams.Where(x => x.sName.ToLower() == "sSourceLocation".ToLower()).Select(t => t.sValue).FirstOrDefault();
                XIConfigs oXIConfigs = new XIConfigs();
                oXIConfigs.sAppName = sTargetDB;
                oXIConfigs.iAppID = Convert.ToInt32(oParams.Where(x => x.sName.ToLower() == "FKiApplicationID".ToLower()).Select(t => t.sValue).FirstOrDefault());
                oXIConfigs.Save_DataSource(oParams);
                string FileName = null; string[] Tables = null;
                DataSet ds = new DataSet();
                string sDataBaseServer = ConfigurationManager.AppSettings["DataBaseServer"];
                string sDataBaseUser = ConfigurationManager.AppSettings["DataBaseUser"];
                string sDataBasePassword = ConfigurationManager.AppSettings["DataBasePassword"];
                string connectionString = "Data Source=" + sDataBaseServer + ";Initial Catalog=" + sTargetDB + ";User Id=" + sDataBaseUser + "; Password=" + sDataBasePassword + "";  //;Integrated Security=True;Persist Security Info=True
                SqlConnection con = new SqlConnection(connectionString);
                //render table name from database
                //string sqlTable = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'";
                //con.Open();
                //SqlDataAdapter da = new SqlDataAdapter();
                //SqlCommand cmd = new SqlCommand(sqlTable, con);
                //cmd.CommandType = CommandType.Text;
                //da.SelectCommand = cmd;
                //da.Fill(ds);
                //con.Close();
                StringBuilder sb = new StringBuilder();
                StringBuilder sbCreate = new StringBuilder();

                Server srv = new Server(new Microsoft.SqlServer.Management.Common.ServerConnection(sDataBaseServer, sDataBaseUser, sDataBasePassword));
                Database dbs = srv.Databases[sSourceDB];
                ScriptingOptions options = new ScriptingOptions();
                options.ScriptData = true;
                options.ScriptDrops = false;
                //options.FileName = FileName;
                //options.EnforceScriptingOptions = true;
                options.ScriptSchema = true;
                options.IncludeHeaders = false;
                options.AppendToFile = false;
                options.Indexes = true;
                options.WithDependencies = true;
                con.Open();

                foreach (Table myTable in dbs.Tables)
                {
                    /* Generating IF EXISTS and DROP command for tables */
                    //var tableScripts = myTable.EnumScript(options);
                    //foreach (string script in tableScripts)
                    //{
                    //    sb.Append(script);
                    //}

                    /* Generating CREATE TABLE command */
                    var CreatetableScripts = myTable.EnumScript(options);
                    sbCreate = new StringBuilder();
                    foreach (string script in CreatetableScripts)
                    {
                        sbCreate.Append(script + "\\");
                    }
                    //StringCollection stringCollection = new StringCollection();
                    //stringCollection.AddRange(sb.ToString().Split(' ').ToArray());
                    StringCollection CreatestringCollection = new StringCollection();
                    CreatestringCollection.AddRange(sbCreate.ToString().Split('\\').ToArray());
                    Server server = new Server(new ServerConnection(con));
                    //server.ConnectionContext.ExecuteNonQuery(stringCollection);
                    server.ConnectionContext.ExecuteNonQuery(CreatestringCollection);
                }
                con.Close();
                oCResult.oResult = "Success";
                oCResult.sMessage = "Copied successfully.";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.LogToFile();
                //oXID.SaveErrortoDB(oCResult, 0);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Copying Data base process" });
                oCResult.sMessage = "ERROR:  " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0);
            }
            return oCResult;
        }
        public CResult CompileAndExecute(List<CNV> oParams)
        {
            string iInstanceID = string.Empty;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                iInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "id".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "sBOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIBO oBOIAlgorithm = new XIIBO();
                XIIBO oBOIAlgorithmLine = new XIIBO();
                XIIXI oXII = new XIIXI();
                oBOIAlgorithm = oXII.BOI("XIAlgorithm_T", iID);
                oBOIAlgorithm.SetAttribute("sName", oBOIAlgorithm.AttributeI("sName").sValue + "_V1");
                oBOIAlgorithm.SetAttribute("id", "0");
                oBOIAlgorithm.Attributes.ToList().ForEach(x => x.Value.bDirty = true);
                var oResult = oBOIAlgorithm.Save(oBOIAlgorithm);

                if (!string.IsNullOrEmpty(iID) && iID != "0" && oResult.bOK && oResult.oResult != null)
                {
                    XIDXI oXID = new XIDXI();
                    var oAlgorithmLine1Click = new Dictionary<string, XIIBO>();
                    var oBOD = ((XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName, null));
                    var DataSource = oXID.GetBODataSource(oBOD.iDataSourceXIGUID.ToString(), oBOD.FKiApplicationID);
                    XID1Click AlgorithmLine1Click = new XID1Click();
                    var EDITransactionTypeQuery = "select MAX(ID)'ID', iOrder from XIAlgorithmLines_T where FKiAlgorithmID = " + iID + " group by iOrder having COUNT(iOrder) > 1";
                    AlgorithmLine1Click.sConnectionString = DataSource;
                    AlgorithmLine1Click.Query = EDITransactionTypeQuery;
                    AlgorithmLine1Click.Name = sBOName;
                    oAlgorithmLine1Click = AlgorithmLine1Click.OneClick_Run();

                    oBOIAlgorithmLine = oXII.BOI(sBOName, oAlgorithmLine1Click.FirstOrDefault().Value.AttributeI("id").sValue);
                    string FKiAlgoritmVersionID = oBOIAlgorithmLine.AttributeI("FKiAlgoritmVersionID").sValue;
                    string sAlgorithmID = ((XIIBO)oResult.oResult).AttributeI("id").sValue;
                    if (oBOIAlgorithmLine != null)
                    {
                        List<XIIBO> oAlgorithmLines = new List<XIIBO>();
                        //XIDXI oXIDAlgorithmLines = new XIDXI();
                        QueryEngine oQE = new QueryEngine();
                        string sWhereCondition = "FKiAlgorithmID=" + oBOIAlgorithmLine.AttributeI("FKiAlgorithmID").sValue + ",iOrder!=" + oBOIAlgorithmLine.AttributeI("iOrder").sValue;
                        var oQResult = oQE.Execute_QueryEngine(sBOName, "*", sWhereCondition);
                        if (oQResult.bOK && oQResult.oResult != null)
                        {
                            oAlgorithmLines = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                            foreach (var item in oAlgorithmLines)
                            {
                                item.BOD = oBOD;
                                item.SetAttribute("FKiAlgorithmID", sAlgorithmID);
                                //item.SetAttribute("FKiAlgoritmVersionID", FKiAlgoritmVersionID);
                                item.SetAttribute("id", "0");
                                item.Attributes.ToList().ForEach(x => x.Value.bDirty = true);
                                var sResult = item.Save(item);
                            }
                        }
                        oBOIAlgorithmLine.SetAttribute("FKiAlgorithmID", sAlgorithmID);
                        oBOIAlgorithmLine.Save(oBOIAlgorithmLine);
                        XIIBO oBOIAlgorithmLineVersion = new XIIBO();
                        oBOIAlgorithmLineVersion = oXII.BOI("AlgorithmVersions", FKiAlgoritmVersionID);
                        oBOIAlgorithmLineVersion.SetAttribute("FKiAlgorithmID", sAlgorithmID);
                        oBOIAlgorithmLineVersion.Save(oBOIAlgorithmLineVersion);
                        foreach (var item in oAlgorithmLine1Click.Values.Where(x => x.AttributeI("id").sValue != oBOIAlgorithmLine.AttributeI("id").sValue).Select(t => t).ToList())
                        {
                            oBOIAlgorithmLine = oXII.BOI(sBOName, item.AttributeI("id").sValue);
                            oBOIAlgorithmLine.SetAttribute("FKiAlgorithmID", sAlgorithmID);
                            oBOIAlgorithmLine.Save(oBOIAlgorithmLine);
                        }
                    }
                }
                oCResult.oResult = "Success";
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Revoke cancellation process" });
                oCResult.sMessage = "ERROR:  " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, 0);
            }
            return oCResult;
        }
        public CResult SendEmail(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            try
            {
                string sSessionID = HttpContext.Current.Session.SessionID;
                string EngineInstanceID = oParams.Where(m => m.sName.ToLower() == "EngineInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string InstanceID = oParams.Where(m => m.sName.ToLower() == "InstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sBOName = oParams.Where(m => m.sName.ToLower() == "BOName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string PCID = oParams.Where(m => m.sName.ToLower() == "PCID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                XIDBO oBODs = new XIDBO();
                oBODs = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sBOName);
                SchedulerServices.Scheduler oScheduler = new SchedulerServices.Scheduler();
                XIIBO oBOI = new XIIBO();
                oBOI = oIXI.BOI(sBOName, InstanceID);
                oBOI.BOD = oBODs;
                XID1Click o1ClickD = new XID1Click();
                XID1Click o1ClickC = new XID1Click();
                //XIInfraCache oMyCache = new XIInfraCache();
                o1ClickD = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, null, "16209");
                o1ClickC = (XID1Click)o1ClickD.Clone(o1ClickD);
                List<CNV> oNVParams = new List<CNV>();
                CNV oParam = new CNV();
                oParam.sName = "{XIP|Customer_T.id}";
                oParam.sValue = InstanceID;
                oNVParams.Add(oParam);
                o1ClickC.ReplaceFKExpressions(oNVParams);
                var oCRes = o1ClickC.OneClick_Execute();
                //oCResult = oScheduler.OnStart(Convert.ToInt32(EngineInstanceID), 0, InstanceID.ToString());
                if (oCRes.Count == 0)
                {
                    oCResult = oScheduler.OnStart(Convert.ToInt32(EngineInstanceID), 0, InstanceID.ToString());
                    if (!string.IsNullOrEmpty(PCID))
                    {
                        XIDAlgorithm oAlogD = new XIDAlgorithm();
                        oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, PCID);
                        oCResult = oAlogD.Execute_XIAlgorithm(sSessionID, sGUID);
                        oCResult.oResult = "Success";
                    }

                }
                else
                {
                    //oCResult.oResult = "Expired quotes in the basket";
                    oCResult.oResult = "Failed";
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + 0 + " _PolicyID: " + 0 + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "SendEmail", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, 0, 0);
            }
            return oCResult; // always
        }
        public CResult CreateClassBasedQSI(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            try
            {
                string sSessionID = HttpContext.Current.Session.SessionID;
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string PCID = oParams.Where(m => m.sName.ToLower() == "PCID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                ExecuteXiAlgorithm(oParams);
                var QSIID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSIID}");
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "New", null, null);
                int iQSIID = 0;
                int.TryParse(QSIID, out iQSIID);
                Guid QSXIGUID = Guid.Empty;
                Guid.TryParse(QSIID, out QSXIGUID);
                if ((QSXIGUID != null && QSXIGUID != Guid.Empty) || iQSIID > 0)
                {
                    var oQSInstance = ReLoadQs(QSIID.ToString(), sGUID, "0", "Internal", "Reload");
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}", oQSInstance.FKiQSDefinitionIDXIGUID.ToString(), null, null);
                    if (string.IsNullOrEmpty(oQSInstance.sMode) || (!string.IsNullOrEmpty(oQSInstance.sMode) && oQSInstance.sMode.ToLower() == "not allowed"))
                    {
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        oCResult.oResult = oQSInstance;
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + 0 + " _PolicyID: " + 0 + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "CreateClassBasedQSI", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, 0, 0);
            }
            return oCResult; // always
        }
        public CResult ExecuteXiAlgorithm(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            //in the case of
            //xiEnumSystem.xiFuncResult.xiLogicalError
            oCResult.sMessage = "someone tried to do something they shouldnt";
            //tracing
            // if tracing is on (which is a config switch for this user) then
            //   oCResult.Trace.Write
            //ALL OK?
            try
            {
                string sSessionID = HttpContext.Current.Session.SessionID;
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string PCID = oParams.Where(m => m.sName.ToLower() == "PCID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var AggregationID = oCache.Get_ParamVal(sSessionID, sGUID, null, "-iQSIID");
                if (!string.IsNullOrEmpty(PCID))
                {
                    XIDAlgorithm oAlogD = new XIDAlgorithm();
                    oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, PCID);
                    var oAlogParams = new List<CNV>();
                    oAlogParams.Add(new CNV { sName = "sInstanceID", sValue = sInstanceID });
                    oAlogParams.Add(new CNV { sName = "iQuoteID", sValue = sInstanceID });
                    oCResult = oAlogD.Execute_XIAlgorithm(sSessionID, sGUID, oAlogParams);
                    oCResult.oResult = "Success";
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + 0 + " _PolicyID: " + 0 + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oCResult.oTraceStack.Add(new CNV { sName = "ExecuteXiAlgorithm", sValue = oCResult.sMessage });
                oXID.SaveErrortoDB(oCResult, 0, 0);
            }
            return oCResult; // always
        }
        //public void BackupDatabase(List<CNV> oParams)
        //{
        //    CResult oCResult = new CResult();
        //    CResult oCR = new CResult(); // always
        //    long iTraceLevel = 10;

        //    //get iTraceLevel from ??somewhere fast - cache against user??

        //    oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
        //    oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
        //    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
        //    if (iTraceLevel > 0)
        //    {
        //        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
        //    }
        //    if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
        //    {
        //        oCResult.xiStatus = oCR.xiStatus;
        //    }
        //    try
        //    {
        //        String serverName = "192.168.7.222";
        //        String databaseName = "ZeeInsurance";
        //        String userName = "Xilive";
        //        String password = "Xilive";
        //        string destinationPath = @"\\192.168.7.216\database";
        //        destinationPath = destinationPath.ToString().Replace(@"\\", @"\");
        //        Backup sqlBackup = new Backup();
        //        sqlBackup.Action = BackupActionType.Database;
        //        sqlBackup.BackupSetDescription = "ArchiveDataBase:" + DateTime.Now.ToShortDateString();
        //        sqlBackup.BackupSetName = "Archive";
        //        sqlBackup.Database = databaseName;
        //        BackupDeviceItem deviceItem = new BackupDeviceItem(destinationPath, DeviceType.File);
        //        ServerConnection connection = new ServerConnection(serverName, userName, password);
        //        Server sqlServer = new Server(connection);

        //        Database db = sqlServer.Databases[databaseName];

        //        sqlBackup.Initialize = true;
        //        sqlBackup.Checksum = true;
        //        sqlBackup.ContinueAfterError = true;

        //        sqlBackup.Devices.Add(deviceItem);
        //        sqlBackup.Incremental = false;

        //        sqlBackup.ExpirationDate = DateTime.Now.AddDays(3);
        //        sqlBackup.LogTruncation = BackupTruncateLogType.Truncate;

        //        sqlBackup.FormatMedia = false;

        //        sqlBackup.SqlBackup(sqlServer);
        //    }
        //    catch (Exception ex)
        //    {
        //        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Revoke cancellation process" });
        //        oCResult.sMessage = "ERROR:  " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
        //        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
        //        oCResult.LogToFile();
        //        oXID.SaveErrortoDB(oCResult, 0);
        //    }
        //}
        //public void RestoreDatabase(List<CNV> oParams)
        //{
        //    String filePath = null; String dataFilePath = null; String logFilePath = null;
        //    CResult oCResult = new CResult();
        //    CResult oCR = new CResult(); // always
        //    long iTraceLevel = 10;

        //    //get iTraceLevel from ??somewhere fast - cache against user??

        //    oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
        //    oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
        //    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
        //    if (iTraceLevel > 0)
        //    {
        //        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
        //    }
        //    if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
        //    {
        //        oCResult.xiStatus = oCR.xiStatus;
        //    }
        //    try
        //    {
        //        String serverName = "192.168.7.222";
        //        String databaseName = "xidnaqa_old1";
        //        String userName = "Xilive";
        //        String password = "Xilive";
        //        String destinationPath = @"D:\Mounika\BackUps";
        //        Restore sqlRestore = new Restore();

        //        BackupDeviceItem deviceItem = new BackupDeviceItem(filePath, DeviceType.File);
        //        sqlRestore.Devices.Add(deviceItem);
        //        sqlRestore.Database = databaseName;

        //        ServerConnection connection = new ServerConnection(serverName, userName, password);
        //        Server sqlServer = new Server(connection);

        //        Database db = sqlServer.Databases[databaseName];
        //        sqlRestore.Action = RestoreActionType.Database;
        //        String dataFileLocation = dataFilePath + databaseName + ".mdf";
        //        String logFileLocation = logFilePath + databaseName + "_Log.ldf";
        //        db = sqlServer.Databases[databaseName];
        //        RelocateFile rf = new RelocateFile(databaseName, dataFileLocation);

        //        sqlRestore.RelocateFiles.Add(new RelocateFile(databaseName, dataFileLocation));
        //        sqlRestore.RelocateFiles.Add(new RelocateFile(databaseName + "_log", logFileLocation));
        //        sqlRestore.ReplaceDatabase = true;
        //        //sqlRestore.Complete += new ServerMessageEventHandler(sqlRestore_Complete);
        //        sqlRestore.PercentCompleteNotification = 10;
        //        //sqlRestore.PercentComplete +=
        //        //   new PercentCompleteEventHandler(sqlRestore_PercentComplete);

        //        sqlRestore.SqlRestore(sqlServer);
        //        db = sqlServer.Databases[databaseName];
        //        db.SetOnline();
        //        sqlServer.Refresh();
        //    }
        //    catch (Exception ex)
        //    {
        //        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Revoke cancellation process" });
        //        oCResult.sMessage = "ERROR:  " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
        //        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
        //        oCResult.LogToFile();
        //        oXID.SaveErrortoDB(oCResult, 0);
        //    }
        //}

        //public void CopyDataBase(string sSourceDB, string sDestinationDB)
        //{
        //    DataSet ds = new DataSet();
        //    string connectionString = "Data Source=192.168.7.222;Initial Catalog=" + sSourceDB + ";Integrated Security=True;Persist Security Info=True";
        //    SqlConnection con = new SqlConnection(connectionString);
        //    //render table name from database
        //    string sqlTable = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'";
        //    con.Open();
        //    SqlDataAdapter da = new SqlDataAdapter();
        //    SqlCommand cmd = new SqlCommand(sqlTable, con);
        //    cmd.CommandType = CommandType.Text;
        //    da.SelectCommand = cmd;
        //    da.Fill(ds);
        //    con.Close();
        //    //render connection string from WebConfig file
        //    string strcon = "Data Source=192.168.7.222;Initial Catalog=" + sDestinationDB + ";Integrated Security=True;Persist Security Info=True";

        //    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        //    {
        //        if (!(ds.Tables[0].Rows[i]["TABLE_NAME"].ToString().Contains("Asp")))
        //        {
        //            string deleteQuery = "Truncate table dbo." + ds.Tables[0].Rows[i]["TABLE_NAME"];
        //            con.Open();
        //            SqlCommand cmdDelete = new SqlCommand(deleteQuery, con);
        //            cmdDelete.ExecuteNonQuery();
        //            con.Close();

        //            DataSet dataSet = new DataSet();
        //            SqlConnection conn = new SqlConnection(strcon);
        //            conn.Open();
        //            string selectData = "select * from dbo." + ds.Tables[0].Rows[i]["TABLE_NAME"];
        //            SqlCommand command = new SqlCommand(selectData, conn);
        //            DataTable dataTable = new DataTable();
        //            SqlDataAdapter dataAdapter = new SqlDataAdapter(selectData, conn);
        //            dataAdapter.FillSchema(dataSet, SchemaType.Mapped);
        //            dataAdapter.Fill(dataSet);
        //            dataTable = dataSet.Tables[0];
        //            conn.Close();

        //            if (dataSet.Tables[0].Rows.Count > 0)
        //            {
        //                //Connect to second Database and Insert row/rows.
        //                SqlConnection conn2 = new SqlConnection(connectionString);
        //                conn2.Open();
        //                SqlBulkCopy bulkCopy = new SqlBulkCopy(conn2);
        //                bulkCopy.DestinationTableName = "dbo." + ds.Tables[0].Rows[i]["TABLE_NAME"].ToString();
        //                bulkCopy.WriteToServer(dataTable);
        //                conn2.Close();
        //            }
        //        }
        //    }
        //}
        XIIXI oIXI = new XIIXI();
        public CResult MergeXML(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            try
            {
                string sQSInstanceID = oParams.Where(x => x.sName.ToLower() == "iQSInstanceID".ToLower()).Select(t => t.sValue).FirstOrDefault();
                XIInfraCache oCache = new XIInfraCache();
                var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "Charity XML Request object", "0");
                XIContentEditors oDocumentContent = new XIContentEditors();
                oDocumentContent = oContentDef.FirstOrDefault();
                XIContentEditors oConent = new XIContentEditors();
                var oLIst = oIXI.BOI("QS Instance", sQSInstanceID);
                var oInstance = oLIst.Structure("charity qs").XILoad();
                var oRes = oConent.MergeContentTemplate(oDocumentContent, oInstance);
                XMLResponseParsing(oRes.oResult.ToString(), sQSInstanceID);
            }
            catch (Exception ex)
            {
            }
            return oCResult;
        }
        public CResult MergeMTXML(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            List<string> Info = new List<string>();
            try
            {
                string sQSInstanceID = oParams.Where(x => x.sName.ToLower() == "iQSInstanceID".ToLower()).Select(t => t.sValue).FirstOrDefault();
                string QuoteID = oParams.Where(x => x.sName.ToLower() == "iQuoteID".ToLower()).Select(t => t.sValue).FirstOrDefault();
                string StructureID = oParams.Where(x => x.sName.ToLower() == "StructureCodeUID".ToLower()).Select(t => t.sValue).FirstOrDefault();
                XIInfraCache oCache = new XIInfraCache();
                QueryEngine oQE1 = new QueryEngine();
                List<XIWhereParams> oWParams = new List<XIWhereParams>();
                List<SqlParameter> oSQLParams = new List<SqlParameter>();
                XIIBO oBO = new XIIBO();
                Guid QSiidXIGUID = Guid.Empty;
                Guid.TryParse(sQSInstanceID, out QSiidXIGUID);
                Guid StructureGuid = Guid.Empty;
                Guid.TryParse(StructureID, out StructureGuid);
                string StructureName = string.Empty;
                if (!string.IsNullOrEmpty(StructureID) && StructureGuid == Guid.Empty)
                {
                    StructureName = StructureID;
                }
                if (QSiidXIGUID != Guid.Empty)
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceIDXIGUID", sOperator = "=", sValue = sQSInstanceID });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceIDXIGUID", Value = sQSInstanceID });
                }
                else
                {
                    oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = sQSInstanceID });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = sQSInstanceID });
                }
                if (!string.IsNullOrEmpty(QuoteID))
                {
                    oWParams.Add(new XIWhereParams { sField = "ID", sOperator = "=", sValue = QuoteID });
                    oSQLParams.Add(new SqlParameter { ParameterName = "@ID", Value = QuoteID });
                }
                oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
                oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
                oQE1.AddBO("Aggregations", "", oWParams);
                CResult oCresult1 = oQE1.BuildQuery();
                if (oCresult1.bOK && oCresult1.oResult != null)
                {
                    var sSql1 = (string)oCresult1.oResult;
                    ExecutionEngine oEE = new ExecutionEngine();
                    oEE.XIDataSource = oQE1.XIDataSource;
                    oEE.sSQL = sSql1;
                    oEE.SqlParams = oSQLParams;
                    var oQResult = oEE.Execute();
                    if (oQResult.bOK && oQResult.oResult != null)
                    {
                        var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                        var oBOD1 = oQE1.QParams.FirstOrDefault().BOD;
                        oBOIList1.ForEach(x => x.BOD = oBOD1);
                        foreach (var oQuote in oBOIList1)
                        {
                            if (oQuote.Attributes.ContainsKey("FkiproductversionID"))
                            {
                                var oProductVersionI = oIXI.BOI("ProductVersion_T", oQuote.Attributes["FkiproductversionID"].sValue);
                                if (oProductVersionI != null && oProductVersionI.Attributes.Count > 0 && oProductVersionI.Attributes.ContainsKey("FKiProductID"))
                                {
                                    var oProductI = oIXI.BOI("Product", oProductVersionI.Attributes["FKiProductID"].sValue);
                                    if (oProductI != null && oProductI.Attributes.Count > 0 && (oProductI.Attributes.ContainsKey("FKiTemplateID") || oProductI.Attributes.ContainsKey("FKiTemplateIDXIGUID")))
                                    {
                                        string sTemplateID = "";
                                        if (oProductI.Attributes.ContainsKey("FKiTemplateIDXIGUID"))
                                        {
                                            sTemplateID = oProductI.Attributes["FKiTemplateIDXIGUID"].sValue;
                                        }
                                        else if (oProductI.Attributes.ContainsKey("FKiTemplateID"))
                                        {
                                            sTemplateID = oProductI.Attributes["FKiTemplateID"].sValue;
                                        }
                                        if (!string.IsNullOrEmpty(sTemplateID) && sTemplateID != "0")
                                        {
                                            Info.Add("Product version : " + oProductVersionI.Attributes["FKiProductID"].sValue + " TemplateID/XIGUID: " + sTemplateID);
                                            var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", sTemplateID);
                                            XIContentEditors oDocumentContent = new XIContentEditors();
                                            oDocumentContent = oContentDef.FirstOrDefault();
                                            XIContentEditors oConent = new XIContentEditors();
                                            var oLIst = oIXI.BOI("QS Instance", sQSInstanceID);
                                            oDocumentContent.Content = oDocumentContent.Content.Replace("{-iQSInstanceID}", sQSInstanceID);
                                            oDocumentContent.Content = oDocumentContent.Content.Replace("{XIP|QSInstanceID}", sQSInstanceID);
                                            //var oInstance = oLIst.Structure("Charity QS").XILoad();
                                            XIBOInstance oInstance = new XIBOInstance();
                                            List<CNV> oWhrParams = new List<CNV>();
                                            if (StructureGuid!=null && StructureGuid != Guid.Empty)
                                            {
                                                oWhrParams = new List<CNV>();
                                                oWhrParams.Add(new CNV { sName = "XIGUID", sValue = StructureGuid.ToString() });
                                                oWhrParams.Add(new CNV { sName = "XIDeleted", sValue = "0" });
                                                oWhrParams.Add(new CNV { sName = "FKiParentID", sValue = "#" });
                                                var sStructureCode = oIXI.BOI("XI BOStructure", "","",oWhrParams); 
                                                string sCode = string.Empty;
                                                if (sStructureCode!=null && sStructureCode.Attributes.Count() > 0)
                                                {
                                                    sCode = sStructureCode.Attributes["scode"].sValue;
                                                }
                                                if (!string.IsNullOrEmpty(sCode))
                                                {
                                                    oInstance = oLIst.Structure(sCode).XILoad();
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(StructureName))
                                            {
                                                oInstance = oLIst.Structure(StructureName).XILoad();
                                            }
                                            else
                                            {
                                                oInstance = oLIst.Structure("Charity QS").XILoad();
                                            }
 
                                            var oRes = oConent.MergeContentTemplate(oDocumentContent, oInstance);
                                            XIIBO oBOI = new XIIBO();
                                            var BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "APIQuotes_T");
                                            oBOI.BOD = BOD;
                                            oBOI.SetAttribute("sRequestObject", oDocumentContent.Content.ToString());
                                            oBOI.SetAttribute("sResponseObject", oRes.oResult.ToString());
                                            oBOI.SetAttribute("FKiQuoteID", oQuote.Attributes["id"].sValue);
                                            oBOI.SetAttribute("FKQSInstanceIDXIGUID", sQSInstanceID);
                                            oCResult = oBOI.Save(oBOI);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oXID.SaveErrortoDB(oCResult);
                oCResult.LogToFile();
            }
            string sInfo = "Execution Process: " + string.Join(",\r\n ", Info);
            oCResult.sMessage = sInfo;
            oXID.SaveErrortoDB(oCResult);
            return oCResult;
        }
        public void XMLResponseParsing(string oConent, string sQSInstanceID)
        {
            try
            {
                CResult oCResult = new CResult();
                XIInfraCache oCache = new XIInfraCache();
                var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "Charity XML Response object", "0");
                XIContentEditors oDocumentContent = new XIContentEditors();
                oDocumentContent = oContentDef.FirstOrDefault();
                XDocument doc1 = new XDocument(); string Content = "";
                var Premium = 0.0; var Amount = 0.0;
                doc1 = XDocument.Parse(oDocumentContent.Content.ToString());
                XNamespace ns = "http://www.polaris-uk.co.uk/Schema/IMISRs";
                IEnumerable<XElement> Amounts = doc1.Descendants(ns + "Amount");
                foreach (XElement AmountDetails in Amounts)
                {
                    Amount += double.Parse(AmountDetails.Value.ToString());
                }
                XIIBO oBOI = new XIIBO();
                var BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Aggregations");
                oBOI.BOD = BOD;
                oBOI.SetAttribute("rPrice", Amount.ToString());
                oBOI.SetAttribute("FKiQSInstanceID", sQSInstanceID);
                oCResult = oBOI.Save(oBOI);
                var sQuoteID = oBOI.AttributeI("ID").sValue;
                // Request & Response saving
                oBOI = new XIIBO();
                BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "APIQuotes_T");
                oBOI.BOD = BOD;
                oBOI.SetAttribute("sRequestObject", oConent);
                oBOI.SetAttribute("sResponseObject", oDocumentContent.Content.ToString());
                oBOI.SetAttribute("FKiQuoteID", sQuoteID);
                oBOI.SetAttribute("FKQSInstanceID", sQSInstanceID);
                oCResult = oBOI.Save(oBOI);

                IEnumerable<XElement> responses = doc1.Descendants(ns + "Refer");
                oBOI = new XIIBO();
                BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Referrals");
                foreach (XElement response in responses)
                {
                    if (response.HasElements == true)
                    {
                        oBOI = new XIIBO();
                        oBOI.BOD = BOD;
                        oBOI.SetAttribute("sCode", response.Descendants(XNamespace.Get(ns.ToString()) + "Code").First().Value.ToString());
                        oBOI.SetAttribute("sLevel", response.Descendants(XNamespace.Get(ns.ToString()) + "Level").First().Value.ToString());
                        oBOI.SetAttribute("sPremises", response.Descendants(XNamespace.Get(ns.ToString()) + "Premises").First().Value.ToString());
                        oBOI.SetAttribute("FkiQuoteID", sQuoteID);
                        oCResult = oBOI.Save(oBOI);
                    }
                }
                responses = doc1.Descendants(ns + "Endorsements");
                BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Term_T");
                foreach (XElement response in responses)
                {
                    if (response.HasElements == true)
                    {
                        oBOI = new XIIBO();
                        oBOI.BOD = BOD;
                        oBOI.SetAttribute("sCode", response.Descendants(XNamespace.Get(ns.ToString()) + "Code").First().Value.ToString());
                        oBOI.SetAttribute("sApplicableTo", response.Descendants(XNamespace.Get(ns.ToString()) + "ApplicableTo").First().Value.ToString());
                        oBOI.SetAttribute("FkiQuoteID", sQuoteID);
                        oCResult = oBOI.Save(oBOI);
                        EndorsementDocument(sQuoteID, oBOI.AttributeI("ID").sValue);
                    }
                }
                responses = doc1.Descendants(ns + "PQB").FirstOrDefault().Elements();
                var QuotePriceBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Quote Price");
                var PrimisesBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Premises_T");
                foreach (XElement response in responses)
                {
                    if (response.HasElements == true)
                    {
                        if (response.Name.LocalName == "Section")
                        {
                            oBOI = new XIIBO();
                            oBOI.BOD = QuotePriceBOD;
                            oBOI.SetAttribute("sName", response.Descendants(XNamespace.Get(ns.ToString()) + "Name").First().Value.ToString()); //response.Element("Name").Value.ToString());
                            oBOI.SetAttribute("rAmount", response.Descendants(XNamespace.Get(ns.ToString()) + "Amount").First().Value.ToString());
                            oBOI.SetAttribute("FkiQuoteID", sQuoteID);
                            oCResult = oBOI.Save(oBOI);
                        }
                        else
                        {
                            oBOI = new XIIBO();
                            oBOI.BOD = PrimisesBOD;
                            oBOI.SetAttribute("sName", response.Descendants(XNamespace.Get(ns.ToString()) + "PremiseIdentifier").First().Value.ToString());
                            var Childs = response.Descendants(ns + "Section");
                            foreach (var item in Childs)
                            {
                                if (item.Descendants(XNamespace.Get(ns.ToString()) + "Name").First().Value.ToString() == "Buildings")
                                {
                                    oBOI.SetAttribute("sBuildings", item.Descendants(XNamespace.Get(ns.ToString()) + "Amount").First().Value.ToString());
                                }
                                if (item.Descendants(XNamespace.Get(ns.ToString()) + "Name").First().Value.ToString() == "Contents")
                                {
                                    oBOI.SetAttribute("sContents", item.Descendants(XNamespace.Get(ns.ToString()) + "Amount").First().Value.ToString());
                                }
                            }
                            oBOI.SetAttribute("FkiQuoteID", sQuoteID);
                            oCResult = oBOI.Save(oBOI);
                        }
                    }
                }
                // Amount += double.Parse(doc1.Elements("Amount").First().Value.ToString());
            }
            catch (Exception ex)
            {
            }
        }
        public CResult ExeQuotesThread(List<CNV> oParams, iSiganlR oSignalRI)
        {
            // NOTE: HTTPCONTEXT GETTING NULL NNED TO VERIFY HERE 
            CResult oResult = new CResult();
            oSignalR = oSignalRI;
            if (oSignalR != null)
            {
                var context = HttpContext.Current;
                // Holding the Current HttpContext Values in the Object Here
                var sessionItems = Utility.SessionItems();
                Thread threadObj = new Thread(new ThreadStart(() =>
                {
                    ExeScript(oParams, sessionItems);
                    //EndorsementDocumentSaving(oParams);
                }));
                threadObj.Start();

                threadObj.IsBackground = true;
            }
            else
            {
                oResult.sMessage = "Null constructor";
                oXID.SaveErrortoDB(oResult);
            }
            //ExeScript(oParams);
            return oResult;
        }
        public CResult EndorsementDocumentSaving(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                string InstanceID = oParams.Where(m => m.sName.ToLower() == "InstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string i1ClickID = oParams.Where(m => m.sName.ToLower() == "i1ClickID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iDocumentTemplates1ClickID = oParams.Where(m => m.sName.ToLower() == "iTemplate1ClickID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XID1Click o1Click = new XID1Click();
                o1Click = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, null, i1ClickID);
                var oCopy = (XID1Click)o1Click.Clone(o1Click);
                List<CNV> nParams = new List<CNV>();
                CNV oParam = new CNV();
                oParam.sName = "{XIP|Customer_T.id}";
                oParam.sValue = InstanceID;
                nParams.Add(oParam);
                oCopy.ReplaceFKExpressions(nParams);
                var oQResult = oCopy.GetList();
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    foreach (var instance in oBOIList)
                    {
                        List<CNV> oWhrParams = new List<CNV>();
                        oWhrParams.Add(new CNV { sName = "FKiQuoteID", sValue = instance.AttributeI("FKiQuoteID").sValue });
                        XIIBO oBOI = new XIIBO();
                        XIIXI oXII = new XIIXI();
                        oBOI = oXII.BOI("EndorsementDocuments", null, null, oWhrParams);
                        if (oBOI == null)
                        {
                            o1Click = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, null, iDocumentTemplates1ClickID);
                            oCopy = (XID1Click)o1Click.Clone(o1Click);
                            nParams = new List<CNV>();
                            oParam = new CNV();
                            oParam.sName = "{XIP|ProductVersionID}";
                            oParam.sValue = instance.AttributeI("FKiProductVersionID").sValue;
                            nParams.Add(oParam);
                            oCopy.ReplaceFKExpressions(nParams);
                            var oDocumentTemplates = oCopy.GetList();
                            if (oDocumentTemplates.bOK && oDocumentTemplates.oResult != null)
                            {
                                var oDocumentTemplateList = ((Dictionary<string, XIIBO>)oDocumentTemplates.oResult).Values.ToList();
                                foreach (var item in oDocumentTemplateList)
                                {
                                    if (!string.IsNullOrEmpty(instance.AttributeI("ID").sValue))
                                    {
                                        EndorsementDocument(instance.AttributeI("FKiQuoteID").sValue, "", item.AttributeI("FKiTemplateID").sValue);
                                    }
                                }
                            }
                        }
                    }
                }
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oResult = "";
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oXID.SaveErrortoDB(oCResult);
                oCResult.LogToFile();
            }
            return oCResult;
        }
        //public CResult EndorsementDocumentSaving(List<CNV> oParams)
        //{
        //    CResult oCResult = new CResult();
        //    CResult oCR = new CResult(); // always
        //    long iTraceLevel = 10;
        //    //get iTraceLevel from ??somewhere fast - cache against user??
        //    oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
        //    oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
        //    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
        //    if (iTraceLevel > 0)
        //    {
        //        oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
        //    }
        //    //if iTraceLevel>0 then 
        //    //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
        //    //oCResult.oTraceStack.Trace("Stage",sError)
        //    //end if
        //    if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
        //    {
        //        oCResult.xiStatus = oCR.xiStatus;
        //        //oCResult.oTraceStack.Trace("Stage",sError)
        //    }
        //    int iQSInstanceID = 0;
        //    try
        //    {
        //        string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
        //        string iID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
        //        //string iQuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
        //        XIIXI oIXI = new XIIXI();
        //        if (int.TryParse(iID, out iQSInstanceID))
        //        {
        //        }
        //        QueryEngine oQE = new QueryEngine();
        //        List<XIWhereParams> oWParams = new List<XIWhereParams>();
        //        List<SqlParameter> oSQLParams = new List<SqlParameter>();
        //        oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = iQSInstanceID.ToString() });
        //        oSQLParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = iQSInstanceID.ToString() });
        //        oWParams.Add(new XIWhereParams { sField = XIConstant.Key_XIDeleted, sOperator = "=", sValue = "0" });
        //        oSQLParams.Add(new SqlParameter { ParameterName = "@" + XIConstant.Key_XIDeleted, Value = "0" });
        //        oQE.AddBO("Aggregations", "Create", oWParams);
        //        CResult oCresult = oQE.BuildQuery();
        //        if (oCresult.bOK && oCresult.oResult != null)
        //        {
        //            var sSql = (string)oCresult.oResult;
        //            ExecutionEngine oEE = new ExecutionEngine();
        //            oEE.XIDataSource = oQE.XIDataSource;
        //            oEE.sSQL = sSql;
        //            oEE.SqlParams = oSQLParams;
        //            var oQResult = oEE.Execute();
        //            if (oQResult.bOK && oQResult.oResult != null)
        //            {
        //                var oBOIList = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
        //                var oBOD = oQE.QParams.FirstOrDefault().BOD;
        //                oBOIList.ForEach(x => x.BOD = oBOD);
        //                foreach (var instance in oBOIList)
        //                {
        //                    if (instance.Attributes.ContainsKey(instance.BOD.sPrimaryKey))
        //                    {
        //                        var QuoteID = instance.Attributes[instance.BOD.sPrimaryKey].sValue;
        //                        if (!string.IsNullOrEmpty(QuoteID))
        //                        {
        //                            EndorsementDocument(QuoteID, "");
        //                        }
        //                    }

        //                }
        //            }
        //        }
        //        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
        //        oCResult.oResult = "";
        //    }
        //    catch (Exception ex)
        //    {
        //        oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
        //        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
        //        oXID.SaveErrortoDB(oCResult);
        //        oCResult.LogToFile();
        //    }
        //    return oCResult;
        //}
        public void EndorsementDocument(string sQuoteID, string sTermID, string sTemplatesID = "")
        {
            try
            {
                List<CNV> oParams = new List<CNV>(); ;
                CNV oParam = new CNV();
                oParam.sName = "FKiTermID";
                oParam.sValue = sTermID;
                oParams.Add(oParam);
                CResult oCResult = new CResult();
                string sTemplate = "EndorsementDocument";
                var oDocContent = new List<XIContentEditors>();
                if (!string.IsNullOrEmpty(sTemplatesID))
                {
                    oDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", sTemplatesID);
                }
                else
                {
                    oDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, sTemplate, "0");
                }
                var oDocTemplateList = oDocContent.GetCopy();
                var oContentDef = oDocTemplateList.FirstOrDefault();
                string sTemplateContent = oContentDef.Content;

                if (!string.IsNullOrEmpty(sTemplateContent))
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Template merging", sValue = "" + oContentDef.Name + " Template merging Started" });
                    XIContentEditors oXIContent = new XIContentEditors();
                    XIBOInstance oBOIns = new XIBOInstance();
                    var oLIst = oIXI.BOI("Aggregations", sQuoteID);
                    var oInstance = oLIst.Structure("CharityQuotes").XILoad();
                    var sMergeTempResult = oXIContent.MergeContentTemplate(oContentDef, oInstance);
                    //var sMergeTempResult = oXIContent.MergeContentTemplate(oContentDef, oBOIns);
                    oCResult.oTraceStack.Add(new CNV { sName = "Template merging", sValue = "" + oContentDef.Name + " Template merging Completed" });
                    if (sMergeTempResult.bOK && sMergeTempResult.oResult != null)
                    {
                        string sMergeTempContent = (string)sMergeTempResult.oResult; string sDOBPasswordRange = string.Empty;
                        if (!string.IsNullOrEmpty(sMergeTempContent))
                        {
                            XIInfraEmail oEmail = new XIInfraEmail();
                            CResult oResult = new CResult();
                            oCResult.oTraceStack.Add(new CNV { sName = "PDF Generation", sValue = "" + oContentDef.Name + " PDF generation Started" });
                            oResult = oEmail.PDFGenerate(sMergeTempContent, oContentDef.bIsPaswordProtected, null, null); //pdf generation
                            oCResult.oTraceStack.Add(new CNV { sName = "PDF Generation", sValue = "" + oContentDef.Name + " PDF generated" });
                            if (oResult.bOK && oResult.oResult != null)
                            {
                                oEmail.sDocumentName = oContentDef.Name;
                                var oAttachment = oEmail.GeneratePDFFile((MemoryStream)oResult.oResult);
                                if (oAttachment.bOK && oAttachment.oResult != null)
                                {
                                    Attachment data = (Attachment)oAttachment.oResult;
                                    MemoryStream file = (MemoryStream)oResult.oResult;
                                    var oResponse = SaveDocuments(file, data.Name, sQuoteID, oParams);//save documents to folder
                                    if (oResponse.bOK && oResponse.oResult != null)
                                    {
                                        oCResult.oTraceStack.Add(new CNV { sName = "Document saving", sValue = "" + oContentDef.Name + " Document saved successfully" });
                                    }
                                    else
                                    {
                                        oCResult.oTraceStack.Add(new CNV { sName = "Document saving", sValue = "" + oContentDef.Name + " Document saving failed" });
                                    }
                                }
                                else
                                {
                                    oCResult.oTraceStack.Add(new CNV { sName = "PDF Generation", sValue = "" + oContentDef.Name + " PDF generation Failed." });
                                }
                            }
                            else
                            {
                                oCResult.oTraceStack.Add(new CNV { sName = "PDF Generation", sValue = "" + oContentDef.Name + " PDF generation Failed." });
                            }
                        }
                    }
                    else
                    {
                        oCResult.oTraceStack.Add(new CNV { sName = "Template merging", sValue = "" + oContentDef.Name + " Template merging Failed." });
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }
        public CResult SaveDocuments(MemoryStream File, string sFileName, string iQuoteID, List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            try
            {
                string sID = "";
                XIIBO oBOI = new XIIBO(); XIDBO oBOD = new XIDBO();
                XIDXI oXID = new XIDXI();
                string[] sFileTypeArray = sFileName.Split('.');
                string sFileType = sFileTypeArray[1];
                var oXIDocDetails = (XIInfraDocTypes)oCache.GetObjectFromCache(XIConstant.CacheDocType, sFileType);
                var sFolderPath = oXIDocDetails.Path;
                var sOrgName = "InsureOne";// oParams.Where(m => m.sName == "sOrgName").Select(m => m.sValue).FirstOrDefault();
                var oResult = SaveDocumentsToFolder(File, sOrgName, sFileName, sFileName.Split('.')[1], sFolderPath);
                if (oResult.bOK && oResult.oResult != null)
                {
                    oCResult.oTraceStack.Add(new CNV { sName = "Document saving", sValue = "" + sFileName + " Document saved to folder successfully" });
                    string sAttachmentPath = (string)oResult.oResult;

                    oBOI = new XIIBO();
                    oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "EndorsementDocuments");
                    oBOI.BOD = oBOD;
                    oBOI.Attributes["ID"] = new XIIAttribute { sName = "ID", sValue = null, bDirty = true };
                    oBOI.Attributes["sFileName"] = new XIIAttribute { sName = "sFileName", sValue = sFileName, bDirty = true };
                    oBOI.Attributes["sFullPath"] = new XIIAttribute { sName = "sFullPath", sValue = sAttachmentPath + sFileName, bDirty = true };
                    oBOI.Attributes["XICreatedWhen"] = new XIIAttribute { sName = "XICreatedWhen", sValue = DateTime.Now.ToString(), bDirty = true };
                    oBOI.Attributes["XIUpdatedWhen"] = new XIIAttribute { sName = "XIUpdatedWhen", sValue = DateTime.Now.ToString(), bDirty = true };
                    oBOI.Attributes["FKiQuoteID"] = new XIIAttribute { sName = "FKiQuoteID", sValue = iQuoteID, bDirty = true };
                    var Response = oBOI.Save(oBOI);
                    XIIBO oBOInstance = new XIIBO();
                    if (Response.bOK && Response.oResult != null)
                    {
                        oBOInstance = (XIIBO)Response.oResult;
                    }
                    if (oBOInstance != null)
                    {
                        sID = oBOInstance.Attributes.Where(x => x.Key.ToLower() == oBOI.BOD.sPrimaryKey.ToLower()).Select(x => x.Value.sValue).FirstOrDefault();
                        XIIXI oXII = new XIIXI();
                        List<CNV> oWhrParams = new List<CNV>();
                        oWhrParams.Add(new CNV { sName = "FKiQuoteID", sValue = iQuoteID.ToString() });
                        oWhrParams.Add(new CNV { sName = "XIDeleted", sValue = "0" });
                        XIIBO oBasketQuotesBOI = new XIIBO();
                        oBasketQuotesBOI = oXII.BOI("BasketQuotes", null, null, oWhrParams);
                        oBasketQuotesBOI.SetAttribute("bIsDocumentsGenerated", "1");
                        Response = oBasketQuotesBOI.Save(oBasketQuotesBOI);
                    }
                    oBOI = new XIIBO();
                    oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Documents_T");
                    //oBOD = (XIDBO)oXID.Get_BODefinition("Documents_T").oResult;
                    oBOI.BOD = oBOD;
                    oBOI.Attributes["ID"] = new XIIAttribute { sName = "ID", sValue = null, bDirty = true };
                    oBOI.Attributes["FileName"] = new XIIAttribute { sName = "FileName", sValue = "", bDirty = true };
                    oBOI.Attributes["FKiDocType"] = new XIIAttribute { sName = "FKiDocType", sValue = "0", bDirty = true };
                    oBOI.Attributes["dCreatedTime"] = new XIIAttribute { sName = "dCreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                    oBOI.Attributes["dUpdatedTime"] = new XIIAttribute { sName = "dUpdatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                    //oBOI.Attributes["iType"] = new XIIAttribute { sName = "iType", sValue = iType.ToString(), bDirty = true };
                    oBOI.Attributes["bIsVisibleToUser"] = new XIIAttribute { sName = "bIsVisibleToUser", sValue = "1", bDirty = true };
                    Response = oBOI.Save(oBOI);//to save XIDocs related parameters
                    oBOInstance = new XIIBO();
                    if (Response.bOK && Response.oResult != null)
                    {
                        oBOInstance = (XIIBO)Response.oResult;
                    }
                    String sDocID = "";
                    if (oBOInstance != null)
                    {
                        sDocID = oBOInstance.Attributes.Where(x => x.Key.ToLower() == oBOI.BOD.sPrimaryKey.ToLower()).Select(x => x.Value.sValue).FirstOrDefault();
                    }
                    string sNewImageName = "";
                    int iDocID = 0;
                    if (!string.IsNullOrEmpty(sDocID))
                    {
                        iDocID = Convert.ToInt32(sDocID);
                    }
                    if (iDocID > 0)
                    {
                        sNewImageName = "" + sFileTypeArray[0] + "_" + iDocID + "." + sFileTypeArray[1] + "";
                    }
                    oBOI = new XIIBO();
                    var oDocumentBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Documents_T");
                    oBOI.BOD = oDocumentBOD;
                    oBOI.Attributes["ID"] = new XIIAttribute { sName = "ID", sValue = sDocID, bDirty = true };
                    oBOI.Attributes["FileName"] = new XIIAttribute { sName = "FileName", sValue = sNewImageName, bDirty = true };
                    //oBOI.Attributes["FKiDocType"] = new XIIAttribute { sName = "FKiDocType", sValue = iDocTypeID.ToString(), bDirty = true };
                    oBOI.Attributes["SubDirectoryPath"] = new XIIAttribute { sName = "SubDirectoryPath", sValue = null, bDirty = true };
                    oBOI.Attributes["sFullPath"] = new XIIAttribute { sName = "sFullPath", sValue = sAttachmentPath + sFileName, bDirty = true };
                    oBOI.Attributes["iSystemgeneratedorUploaded"] = new XIIAttribute { sName = "iSystemgeneratedorUploaded", sValue = "10", bDirty = true };
                    oBOI.Attributes["dCreatedTime"] = new XIIAttribute { sName = "dCreatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                    oBOI.Attributes["dUpdatedTime"] = new XIIAttribute { sName = "dUpdatedTime", sValue = DateTime.Now.ToString(), bDirty = true };
                    //oBOI.Attributes["iInstanceID"] = new XIIAttribute { sName = "iInstanceID", sValue = iInstanceID.ToString(), bDirty = true };
                    //oBOI.Attributes["FKiUserID"] = new XIIAttribute { sName = "FKiUserID", sValue = FKiUserID.ToString(), bDirty = true };
                    oBOI.Attributes["sAliasName"] = new XIIAttribute { sName = "sAliasName", sValue = sFileName, bDirty = true };
                    oBOI.Attributes["sName"] = new XIIAttribute { sName = "sName", sValue = sFileName, bDirty = true };
                    //oBOI.Attributes["FKiQSInstanceIDXIGUID"] = new XIIAttribute { sName = "FKiQSInstanceIDXIGUID", sValue = iQSInstanceID, bDirty = true };
                    oBOI.Attributes["FKiBOID"] = new XIIAttribute { sName = "FKiBOID", sValue = oBOD.BOID.ToString(), bDirty = true };
                    //oBOI.Attributes["FkiClientID"] = new XIIAttribute { sName = "FkiClientID", sValue = FkiClientID.ToString(), bDirty = true };
                    //oBOI.Attributes["bIsAttach"] = new XIIAttribute { sName = "bIsAttach", sValue = bIsAttach.ToString(), bDirty = true };
                    var Result = oBOI.Save(oBOI);
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                    oCResult.oResult = sID;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oXID.SaveErrortoDB(oCResult);
                oCResult.LogToFile();
            }
            return oCResult;
        }
        public CResult SaveDocumentsToFolder(MemoryStream File, string sOrgName, string sFileName, string sFileType, string sFolderPath)
        {
            CResult oCResult = new CResult();
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            try
            {
                MemoryStream file = new MemoryStream(File.ToArray());
                byte[] data1 = file.ToArray();
                HttpPostedFileBase objFile = (HttpPostedFileBase)new MemoryPostedFile(data1, sFileName, "application/" + sFileType + "");
                string sNewGUID = Guid.NewGuid().ToString();
                string sAttachmentPath = sNewGUID + "\\" + sOrgName + "\\" + sFileType + "\\";
                var sVirtualDir = System.Configuration.ConfigurationManager.AppSettings["VirtualDirectoryPath"];
                string physicalPath = System.Web.Hosting.HostingEnvironment.MapPath("~\\" + sVirtualDir + "\\"); // System.Web.Hosting.HostingEnvironment.MapPath("~");
                string sPath = physicalPath.Substring(0, physicalPath.Length) + sFolderPath.Replace("~", "") + "\\" + sNewGUID + "\\" + sOrgName + "\\" + "PDF" + "\\";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                if (!System.IO.Directory.Exists(sPath))
                {
                    try
                    {
                        Directory.CreateDirectory(sPath);
                    }
                    catch (Exception ex)
                    {
                        oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                        oCResult.LogToFile();
                    }
                }

                WriteFileFromStream(objFile.InputStream, sPath + sFileName);
                oCResult.oResult = sAttachmentPath;
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public static void WriteFileFromStream(Stream stream, string toFile)
        {
            using (FileStream fileToSave = new FileStream(toFile, FileMode.Create))
            {
                stream.CopyTo(fileToSave);
            }
        }
        public class MemoryPostedFile : HttpPostedFileBase
        {
            private readonly byte[] fileBytes;

            public MemoryPostedFile(byte[] fileBytes, string fileName = null, string contenttype = null)
            {
                this.fileBytes = fileBytes;
                this.FileName = fileName;
                this.ContentType = contenttype;
                this.InputStream = new MemoryStream(fileBytes);
            }
            public override string ContentType { get; }

            public override int ContentLength => fileBytes.Length;

            public override string FileName { get; }

            public override Stream InputStream { get; }
        }
        public CResult ExecuteXIAlgorithm(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string AlgorithmID = oParams.Where(m => m.sName.ToLower() == "AlgorithmID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "SuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "FailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iAlgorithumID = 0;
                Guid AlgorithumIDGUID = Guid.Empty;
                XIDAlgorithm oAlogD = new XIDAlgorithm();
                string ResponseMessage = string.Empty;
                if (AlgorithmID.Contains(','))
                {
                    foreach (var item in AlgorithmID.Split(','))
                    {
                        int.TryParse(item, out iAlgorithumID);
                        Guid.TryParse(item, out AlgorithumIDGUID);
                        oAlogD = new XIDAlgorithm();
                        if (iAlgorithumID > 0)
                        {
                            oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, iAlgorithumID.ToString());
                        }
                        else if (AlgorithumIDGUID != null && AlgorithumIDGUID != Guid.Empty)
                        {
                            oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, AlgorithumIDGUID.ToString());
                        }
                        oCResult = oAlogD.Execute_XIAlgorithm(sSessionID, sGUID);
                        if (oCResult.oResult != null && oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
                        {
                            var sMessage = ((CResult)oCResult.oResult).sMessage;
                            if (!string.IsNullOrEmpty(sMessage))
                            {
                                ResponseMessage += sMessage + "\\";
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(ResponseMessage))
                    {
                        string skey = "StepMessage";
                        Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                        dictMsgs.Add("10", ResponseMessage);
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                    }
                }
                else
                {
                    int.TryParse(AlgorithmID, out iAlgorithumID);
                    Guid.TryParse(AlgorithmID, out AlgorithumIDGUID);
                    if (iAlgorithumID > 0)
                    {
                        oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, iAlgorithumID.ToString());
                    }
                    else if (AlgorithumIDGUID != null && AlgorithumIDGUID != Guid.Empty)
                    {
                        oAlogD = (XIDAlgorithm)oCache.GetObjectFromCache(XIConstant.CacheXIAlgorithm, null, AlgorithumIDGUID.ToString());
                    }
                    oAlogD.Execute_XIAlgorithm(sSessionID, sGUID);
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }
        public CResult SendClientEmail(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;
            //get iTraceLevel from ??somewhere fast - cache against user??
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if
            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iQSInstanceID = 0;
            try
            {
                string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sAttachementID = oParams.Where(m => m.sName.ToLower() == "sAttachementID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sDocIds = sAttachementID.Split(',');
                var AttachementPath = new List<string>();
                int.TryParse(sQSInstanceID, out iQSInstanceID);
                XIIQS oQSI = oIXI.GetQSXIValuesByQSIID(iQSInstanceID.ToString());
                var sVirtualDir = System.Configuration.ConfigurationManager.AppSettings["VirtualDirectoryPath"];
                string physicalPath = HostingEnvironment.MapPath("~\\" + sVirtualDir + "\\");
                foreach (var DocID in sDocIds)
                {
                    var oDocumentBOI = oIXI.BOI("Documents_T", DocID);
                    if (oDocumentBOI != null && oDocumentBOI.Attributes.ContainsKey("sFullPath"))
                    {
                        var oXIDocDetails = (XIInfraDocTypes)oCache.GetObjectFromCache(XIConstant.CacheDocType, oDocumentBOI.Attributes["FKiDocType"].sValue);
                        var sFolderPath = oXIDocDetails.Path;
                        sFolderPath = sFolderPath == null ? "" : sFolderPath;
                        if (!string.IsNullOrEmpty(oDocumentBOI.Attributes["sFullPath"].sValue))
                        {
                            AttachementPath.Add(physicalPath.Substring(0, physicalPath.Length) + sFolderPath.Replace("~", "") + "\\" + oDocumentBOI.Attributes["sFullPath"].sValue);
                        }
                    }
                }
                XIInfraEmail oEmail = new XIInfraEmail();

                string sSubject = oQSI.XIIValues("sSubject");
                string sBody = oQSI.XIIValues("sBody");
                string Contacts = oQSI.XIIValues("Contacts");
                XIIXI oXII = new XIIXI();
                var ContactI = oXII.BOI("CustomerContact", Contacts);
                var clientID = ContactI.Attributes["FKiCustomerID"].sValue;
                int iClientID = 0;
                int.TryParse(clientID, out iClientID);
                if (ContactI.Attributes.Count > 0 && ContactI.Attributes.ContainsKey("sEmail"))
                {
                    oEmail.EmailID = ContactI.Attributes["sEmail"].sValue;
                }
                if (!string.IsNullOrEmpty(sSubject))
                {
                    oEmail.sSubject = sSubject;
                }
                //else if (!string.IsNullOrEmpty(oParentContentC.sSubject))
                //{
                //    oEmail.sSubject = oParentContentC.sSubject;
                //}
                //else
                //{
                //    oEmail.sSubject = oParentContentC.Name;
                //}
                var oMailResult = oEmail.Sendmail(5, sBody, null, iClientID, "ClientMail", 0, AttachementPath, 0, false, true, "", "");//send mail with attachment
                if (oMailResult.bOK && oMailResult.oResult != null)
                {
                    //sSentStatus = "10";
                    //oResult.oTraceStack.Add(new CNV { sName = "Mail send successfully", sValue = oParentContentC.Name + " Mail send successfully to email:" + sEmail + "" });
                    //oXID.SaveErrortoDB(oResult);
                    //bISSend = true;
                }
            }
            catch (Exception ex)
            {
                oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        #region Outrun

        public CResult CopyStructure(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oTrace.sTask = "Copies object instance using structure";//expalin about this method logic
            try
            {
                string sObject = oParams.Where(m => m.sName.ToLower() == "sObject".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iInstanceID = oParams.Where(m => m.sName.ToLower() == XIConstant.Param_InstanceID.ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sStructureName = oParams.Where(m => m.sName.ToLower() == "sStructureName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sParameter = oParams.Where(m => m.sName.ToLower() == "sParameter".ToLower()).Select(m => m.sValue).FirstOrDefault();
                List<CNV> CopyParams = new List<CNV>();
                oTrace.oParams.Add(new CNV { sName = "sObject", sValue = sObject });
                oTrace.oParams.Add(new CNV { sName = "iInstanceID", sValue = iInstanceID });
                oTrace.oParams.Add(new CNV { sName = "sStructureName", sValue = sStructureName });
                XIInfraCache oCache = new XIInfraCache();
                var oBOD = new XIDBO();
                XIIXI oXI = new XIIXI();
                string sBOName = string.Empty;
                XIParameter oParamD = new XIParameter();
                List<XiParameterNVs> PreNVs = new List<XiParameterNVs>();
                List<XiParameterNVs> PostNVs = new List<XiParameterNVs>();
                List<XiParameterNVs> RecursiveNVs = new List<XiParameterNVs>();
                List<XiParameterNVs> PostTagNVs = new List<XiParameterNVs>();
                if (!string.IsNullOrEmpty(sParameter))
                {
                    oParamD = (XIParameter)oCache.GetObjectFromCache(XIConstant.CacheXIParamater, sParameter);
                    if (oParamD != null && oParamD.XiParameterNVs != null && oParamD.XiParameterNVs.Count() > 0)
                    {
                        PreNVs = oParamD.XiParameterNVs.Where(m => m.sContext.ToLower() == "presave").ToList();
                        PostNVs = oParamD.XiParameterNVs.Where(m => m.sContext.ToLower() == "postsave" && m.sTag == null).ToList();
                        RecursiveNVs = oParamD.XiParameterNVs.Where(m => m.sContext.ToLower() == "recursive").ToList();
                        PostTagNVs = oParamD.XiParameterNVs.Where(m => m.sContext.ToLower() == "postsave" && m.sTag != null).ToList();
                    }
                }
                if (!string.IsNullOrEmpty(sObject))
                {
                    oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, sObject);
                    if (oBOD != null && oBOD.Attributes.Count() > 0)
                    {
                        sBOName = oBOD.Name;
                    }
                }
                if (!string.IsNullOrEmpty(sBOName) && !string.IsNullOrEmpty(iInstanceID) && !string.IsNullOrEmpty(sStructureName))//check mandatory params are passed or not
                {
                    if (PreNVs != null && PostNVs.Count() > 0)
                    {
                        //CopyParams.Add(new CNV { sType = "QS Instance", sName = "iCurrentStepID", sValue = "0", sContext = "Save" });
                        foreach (var items in PreNVs)
                        {
                            if (items.Name.Contains('.'))
                            {
                                var NVs = items.Name.Split('.').ToList();
                                if (NVs.Count() == 2)
                                {
                                    var sSetBO = NVs[0];
                                    var sOverrideAttr = NVs[1];
                                    CopyParams.Add(new CNV { sType = sSetBO, sName = sOverrideAttr, sValue = items.Value, sContext = "Save" });
                                }
                            }
                        }
                        foreach (var items in RecursiveNVs)
                        {
                            CopyParams.Add(new CNV { sType = items.Type, sName = items.Name, sValue = items.Value });
                        }
                        //CopyParams.Add(new CNV { sType = "Recurrsive", sName = "Copy", sValue = "yes" });
                        //CopyParams.Add(new CNV { sType = "Recurrsive", sName = "BO", sValue = "QS Instance" });
                        //CopyParams.Add(new CNV { sType = "Recurrsive", sName = "Attribute", sValue = "iParentQSIIDXIGUID" });
                    }
                    XIDStructure oStructure = new XIDStructure();
                    oCR = oStructure.StructureCopy(sBOName, iInstanceID, sStructureName, CopyParams, false);
                    if (oCR.bOK && oCR.oResult != null)
                    {
                        var iID = (string)oCR.oResult;

                        if (PostNVs != null && PostNVs.Count() > 0)
                        {
                            XIIBO SetBOI = new XIIBO();
                            XIIBO GetBOI = new XIIBO();
                            var sSetAttr = string.Empty;
                            var sSetValue = string.Empty;
                            var oInstance = oIXI.BOI(sBOName, iID.ToString()).Structure(sStructureName).XILoad();
                            foreach (var items in PostNVs)
                            {
                                if (!string.IsNullOrEmpty(items.Name) && !string.IsNullOrEmpty(items.Value))
                                {
                                    if (items.Name.Contains('.'))
                                    {
                                        var NVs = items.Name.Split('.').ToList();
                                        if (NVs.Count() == 2)
                                        {
                                            var sSetBO = NVs[0];
                                            sSetAttr = NVs[1];
                                            SetBOI = oInstance.oSubStructureI(sSetBO).Item(0);
                                        }
                                    }
                                    if (items.Value.Contains('.'))
                                    {
                                        var NVs = items.Value.Split('.').ToList();
                                        if (NVs.Count() == 2)
                                        {
                                            var sGetBO = NVs[0];
                                            var sGetAttr = NVs[1];
                                            GetBOI = oInstance.oSubStructureI(sGetBO).Item(0);
                                            sSetValue = GetBOI.AttributeI(sGetAttr).sValue;
                                        }
                                    }
                                    else
                                    {
                                        sSetValue = items.Value;
                                    }
                                    if (SetBOI != null && SetBOI.Attributes.Count() > 0 && sSetAttr != null && sSetValue != null)
                                    {
                                        SetBOI.SetAttribute(sSetAttr, sSetValue);
                                        oCR = SetBOI.Save(SetBOI);
                                        if (oCR.bOK && oCR.oResult != null)
                                        {

                                        }
                                    }
                                }
                            }
                            foreach (var items in PostTagNVs)
                            {
                                if (!string.IsNullOrEmpty(items.Name) && !string.IsNullOrEmpty(items.sTag))
                                {
                                    if (items.Name.Contains('.'))
                                    {
                                        var NVs = items.Name.Split('.').ToList();
                                        if (NVs.Count() == 2)
                                        {
                                            var sSetBO = NVs[0];
                                            sSetAttr = NVs[1];
                                            SetBOI = oInstance.oSubStructureI(sSetBO).oBOIList.Where(x => x.AttributeI(sSetAttr).sValue == items.sTag).FirstOrDefault();
                                        }
                                    }
                                    if (items.Value.Contains('.'))
                                    {
                                        var NVs = items.Value.Split('.').ToList();
                                        if (NVs.Count() == 2)
                                        {
                                            var sGetBO = NVs[0];
                                            var sGetAttr = NVs[1];
                                            GetBOI = oInstance.oSubStructureI(sGetBO).Item(0);
                                            sSetValue = GetBOI.AttributeI(sGetAttr).sValue;
                                        }
                                    }
                                    else
                                    {
                                        sSetValue = items.Value;
                                    }
                                    if (SetBOI != null && SetBOI.Attributes.Count() > 0 && sSetAttr != null && sSetValue != null)
                                    {
                                        SetBOI.SetAttribute("sValue", sSetValue);
                                        SetBOI.SetAttribute("sDerivedValue", sSetValue);
                                        oCR = SetBOI.Save(SetBOI);
                                        if (oCR.bOK && oCR.oResult != null)
                                        {

                                        }
                                    }
                                }
                            }
                        }

                        oTrace.oTrace.Add(oCR.oTrace);
                    }
                    else
                    {
                        oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                    oTrace.sMessage = "Mandatory Param: iInstanceID: " + iInstanceID + " or sStructureName: " + sStructureName + " are missing";
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.sCategory = ex.GetType().ToString();
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //SaveErrortoDB(oCResult);
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return oCResult;
        }
        public CResult GenerateRenewalDocs(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oTrace.sTask = "Generate Renewal Docs";//expalin about this method logic            
            try
            {
                XIInfraCache oCache = new XIInfraCache();
                XIIXI oXII = new XIIXI();
                var InstanceID = oParams.Where(m => m.sName.ToLower() == XIConstant.Param_InstanceID.ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sSessionID = oParams.Where(m => m.sName.ToLower() == XIConstant.Param_SessionID.ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == XIConstant.Param_GUID.ToLower()).Select(m => m.sValue).FirstOrDefault();
                var iUserID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                var iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                var sOrgName = oParams.Where(m => m.sName.ToLower() == "sOrgName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                oTrace.oParams.Add(new CNV { sName = "iInstanceID", sValue = InstanceID });
                var ClientID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|Customer_T.id}");
                var LeadID = oCache.Get_ParamVal(sSessionID, sGUID, null, "-iLeadID");
                int iInstanceID = 0;
                int.TryParse(InstanceID, out iInstanceID);
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(InstanceID, out QSIGUID);
                if (iInstanceID > 0 || (QSIGUID != null && QSIGUID != Guid.Empty))
                {
                    var oQSI = new XIIQS();
                    if (QSIGUID != null && QSIGUID != Guid.Empty)
                    {
                        oQSI = oXII.GetQSXIValuesByQSIID(QSIGUID.ToString());
                    }
                    else if (iInstanceID > 0)
                    {
                        oQSI = oXII.GetQSXIValuesByQSIID(iInstanceID.ToString());
                    }
                    string sClassName = "";
                    var ClassI = oXII.BOI("XIClass_T", oQSI.FKiClassID.ToString());
                    if (!string.IsNullOrEmpty(ClientID))
                    {
                        string sQuery = "select [BasketQuotes_T].ID, [Basket_T].FKiCustomerID, [BasketQuotes_T].FKiQuoteID, [Aggregations_T].FKiProductVersionID, [BasketQuotes_T].rAmount, [Aggregations_T].FKiQSInstanceID, [Aggregations_T].FKiClassID, [Aggregations_T].iStatus, [BasketQuotes_T].sResonForRecommend from BasketQuotes_T inner join Basket_T on BasketQuotes_T.FKiBasketID = Basket_T.ID inner join Aggregations_T on Aggregations_T.id= BasketQuotes_T.FKiQuoteID where [Basket_T].FKiCustomerID=" + ClientID + " and Basket_T.istatus='10' and BasketQuotes_T.XIDeleted=0 and [Aggregations_T].FKiQSInstanceIDXIGUID= '" + QSIGUID.ToString() + "' order by BasketQuotes_T.id desc";
                        XID1Click oXI1Click = new XID1Click();
                        oXI1Click.Query = sQuery;
                        oXI1Click.Name = "BasketQuotes";
                        var Result = oXI1Click.GetList();
                        List<XIIBO> oBasketQuoteList = new List<XIIBO>();
                        if (Result.bOK || Result.oResult != null)
                        {
                            oBasketQuoteList = ((Dictionary<string, XIIBO>)Result.oResult).Values.ToList();
                        }
                        XIDXI oTXI = new XIDXI();
                        var BOD = (XIDBO)oTXI.Get_BODefinition("BasketQuotes").oResult;
                        var TransactionType = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}");
                        string sTransType = null;
                        if (TransactionType != null && TransactionType.ToLower() == "mta")
                        {
                            sTransType = "15";
                        }
                        else if (TransactionType != null && TransactionType.ToLower() == "renewal")
                        {
                            sTransType = "25";
                        }
                        else
                        {
                            sTransType = "10";
                        }
                        if (oBasketQuoteList.Count() > 0)
                        {
                            foreach (var item in oBasketQuoteList)
                            {
                                item.BOD = BOD;
                                if (item.Attributes.ContainsKey("FKiProductVersionID"))
                                {
                                    QueryEngine oQE = new QueryEngine();
                                    List<XIWhereParams> oWParams = new List<XIWhereParams>();
                                    List<SqlParameter> oSQLParams = new List<SqlParameter>();
                                    oWParams.Add(new XIWhereParams { sField = "FKiProductVersionID", sOperator = "=", sValue = item.Attributes["FKiProductVersionID"].sValue });
                                    oSQLParams.Add(new SqlParameter { ParameterName = "@FKiProductVersionID", Value = item.Attributes["FKiProductVersionID"].sValue });
                                    oWParams.Add(new XIWhereParams { sField = "iType", sOperator = "=", sValue = "0" });
                                    oSQLParams.Add(new SqlParameter { ParameterName = "@iType", Value = "0" });
                                    oWParams.Add(new XIWhereParams { sField = "iTransactionType", sOperator = "=", sValue = sTransType });
                                    oSQLParams.Add(new SqlParameter { ParameterName = "@iTransactionType", Value = sTransType });
                                    oQE.AddBO("DocumentTemplate", "", oWParams);
                                    CResult oCresult1 = oQE.BuildQuery();
                                    if (oCresult1.bOK && oCresult1.oResult != null)
                                    {
                                        var sSql1 = (string)oCresult1.oResult;
                                        ExecutionEngine oEE = new ExecutionEngine();
                                        oEE.XIDataSource = oQE.XIDataSource;
                                        oEE.sSQL = sSql1;
                                        oEE.SqlParams = oSQLParams;
                                        var oQResult = oEE.Execute();
                                        if (oQResult.bOK && oQResult.oResult != null)
                                        {
                                            var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                            var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                                            oBOIList1.ForEach(x => x.BOD = oBOD1);

                                            if (ClassI != null && ClassI.Attributes.ContainsKey("sName"))
                                            {
                                                sClassName = ClassI.Attributes["sName"].sValue;
                                            }
                                            if (oBOIList1 != null && oBOIList1.Count > 0)
                                            {
                                                string ExternalgeneratedDocID = "";
                                                foreach (var oBOI in oBOIList1)
                                                {
                                                    int iTemplateID = 0;
                                                    int iDocumentID = 0;
                                                    var ExternaltemplateID = oBOI.Attributes["FkiExternalTemplateID"].sValue;
                                                    var InternaltemplateID = oBOI.Attributes["FkiTemplateID"].sValue;
                                                    if (int.TryParse(ExternaltemplateID, out iTemplateID))
                                                    {
                                                        ExternalgeneratedDocID = ExternalDocGeneration(ExternaltemplateID, item.Attributes["FKiQuoteID"].sValue, ClientID, iInstanceID);
                                                    }
                                                    else if (int.TryParse(InternaltemplateID, out iDocumentID))
                                                    {
                                                        var oDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", iDocumentID.ToString());
                                                        var oDocTemplateList = oDocContent.GetCopy();
                                                        var oContentDef = oDocTemplateList.FirstOrDefault();
                                                        var AttachmentList = GetAttachments(oContentDef.ID.ToString());
                                                        if (AttachmentList.Count > 0)
                                                        {
                                                            foreach (var Attachment in AttachmentList)
                                                            {
                                                                Guid RuleGUID = Guid.Empty;
                                                                if (Guid.TryParse(Attachment.Attributes["fkiruleidxiguid"].sValue, out RuleGUID) && RuleGUID != Guid.Empty)
                                                                {
                                                                    var RuleI = oXII.BOI("XI Rules", RuleGUID.ToString());
                                                                    if (RuleI != null && RuleI.Attributes.ContainsKey("scondition"))
                                                                    {
                                                                        var sRuleCondition = RuleI.Attributes["scondition"].sValue;

                                                                        var sRuleMode = RuleI.Attributes["imode"].sValue;
                                                                        if (sRuleMode == "30")
                                                                        {
                                                                            //QS
                                                                            int iQSIID = 0;
                                                                            var QSID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}");
                                                                            if (int.TryParse(QSID, out iQSIID))
                                                                            {
                                                                                var oQSInstance = oXII.GetQSXIValuesByQSIID(iQSIID.ToString());
                                                                                foreach (var XIValue in oQSInstance.XIValues)
                                                                                {
                                                                                    if (sRuleCondition.ToLower().Contains("qs." + XIValue.Key.ToLower()))
                                                                                    {
                                                                                        sRuleCondition = sRuleCondition.ToLower().Replace("qs." + XIValue.Key.ToLower(), XIValue.Value.sValue);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else if (sRuleMode == "10")
                                                                        {
                                                                            //Object
                                                                            int iBOIID = 0;
                                                                            var sBOID = RuleI.Attributes["BOIDXIGUID"].sValue;
                                                                            var RuleBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, null, sBOID);
                                                                            var sBOIID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|" + RuleBOD.Name + ".ID}");
                                                                            if (!string.IsNullOrEmpty(sBOIID))
                                                                            {
                                                                                var oBOInstance = oXII.BOI(RuleBOD.Name, sBOIID);
                                                                                foreach (var Attr in oBOInstance.Attributes)
                                                                                {
                                                                                    if (sRuleCondition.Contains(RuleBOD.TableName + "." + Attr.Key.ToLower()))
                                                                                    {
                                                                                        sRuleCondition = sRuleCondition.Replace(RuleBOD.TableName + "." + Attr.Key.ToLower(), Attr.Value.sValue);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else if (sRuleMode == "40")
                                                                        {
                                                                            //Structure
                                                                            string sStructureCode = Attachment.Attributes["sstructurecode"].sValue;
                                                                            string sLoadingParams = Attachment.Attributes["sLoadingParams"].sValue;
                                                                            var MainNode = GetMainNodeOfStructure(sStructureCode);
                                                                            var sBOIID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|" + MainNode.sBO + "ID}");
                                                                            if (!string.IsNullOrEmpty(sBOIID))
                                                                            {

                                                                                //Resolve sLoadingParams
                                                                                //Customer_T
                                                                                //policy

                                                                                var StrObj = oIXI.BOI(MainNode.sBO, sBOIID).Structure(sStructureCode).XILoad(null, true, null, sLoadingParams);
                                                                                if (StrObj != null && StrObj.oStructureInstance.Count > 0)
                                                                                {
                                                                                    // string Notation = "xi.s|{if|{=|'Policy.iStatus','0'},{if|{=|'Customer_T.class','1'},'true','false'},'false'}";
                                                                                    var oregexpatternObj = new Regex(Regex.Escape("|'") + "(.*?)" + Regex.Escape("',"));
                                                                                    //var nnotations = GetNotationsWithinDelimeter(SourceContent, oregexpatternObj);
                                                                                    List<string> dictresult = oregexpatternObj.Matches(sRuleCondition).Cast<System.Text.RegularExpressions.Match>().Select(s => s.Groups[1].Value).Distinct().ToList();
                                                                                    List<string> dictnotations = new List<string>();
                                                                                    Dictionary<string, string> dict = new Dictionary<string, string>();
                                                                                    XIIScript oXIScript1 = new XIIScript();
                                                                                    XIAPI oXIAPI = new XIAPI();

                                                                                    foreach (var MergeI in dictresult)
                                                                                    {
                                                                                        var obj = MergeI.Split('.');
                                                                                        List<XIWhereParams> oWHParams = new List<XIWhereParams>();
                                                                                        oWHParams.Add(new XIWhereParams { sField = "tablename", sOperator = "=", sValue = obj[0] });
                                                                                        var sBOName = oXIAPI.GetValue("XIBO_T_N", "Name", oWHParams);
                                                                                        dictnotations.Add("oSubStructureI(\"" + sBOName + "\").Item(0).AttributeI(\"" + obj[1] + "\").sValue");
                                                                                        dict.Add("oSubStructureI(\"" + sBOName + "\").Item(0).AttributeI(\"" + obj[1] + "\").sValue", MergeI);
                                                                                    }
                                                                                    if (dictnotations.Count() > 0)
                                                                                    {
                                                                                        var oScrResult = (CResult)oXIScript1.EvaluateMultiNotation(dictnotations.ToArray(), StrObj, 0, "");
                                                                                        Dictionary<string, string> oDict = new Dictionary<string, string>();
                                                                                        if (oScrResult.bOK && oScrResult.oResult != null)
                                                                                        {
                                                                                            oDict = (Dictionary<string, string>)oScrResult.oResult;
                                                                                            foreach (KeyValuePair<string, string> entry in oDict)
                                                                                            {
                                                                                                if (dict.ContainsKey(entry.Key))
                                                                                                {
                                                                                                    sRuleCondition = sRuleCondition.Replace(dict[entry.Key], entry.Value);
                                                                                                    //SourceContent = SourceContent.Replace("{{" + entry.Key + "}}", entry.Value);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    //Replace rule with multiple nodes
                                                                                }
                                                                            }
                                                                        }
                                                                        CResult oCR1 = new CResult();
                                                                        XIDScript oXIScript = new XIDScript();
                                                                        oXIScript.sScript = sRuleCondition;
                                                                        oCR1 = oXIScript.Execute_Script(sGUID, sSessionID);
                                                                        if (oCR1.bOK && oCR1.oResult != null)
                                                                        {
                                                                            string sValue = (string)oCR1.oResult;
                                                                            if (sValue == "true")
                                                                            {
                                                                                Guid templateGUID = Guid.Empty;
                                                                                Guid.TryParse(Attachment.Attributes["FkiTemplateIDXIGUID"].sValue, out templateGUID);
                                                                                if (templateGUID != Guid.Empty)
                                                                                {
                                                                                    var oAttachmentDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", templateGUID.ToString());
                                                                                    var oAttachmentDocTemplateList = oAttachmentDocContent.GetCopy();
                                                                                    var oAttachmentContentDef = oAttachmentDocTemplateList.FirstOrDefault();
                                                                                    int iAttachementType = 0;
                                                                                    int.TryParse(Attachment.Attributes["iType"].sValue, out iAttachementType);
                                                                                    if (iAttachementType == 10)
                                                                                    {
                                                                                        XIInfraDocumentComponent oDoc = new XIInfraDocumentComponent();
                                                                                        //var oCResponse = oDoc.SaveProductNonMergedDocuments(Convert.ToInt32(ClientID), iUserID, sOrgName, iOrgID, oContentDef.Name, "", 0, sClassName, "", iInstanceID, 271, Convert.ToInt32(ClientID));
                                                                                        //if (oCResponse.bOK && oCResponse.oResult != null)
                                                                                        //{
                                                                                        //}
                                                                                        XIInfraEmail oEmail = new XIInfraEmail();
                                                                                        var oResult = oEmail.PDFGenerate(oAttachmentContentDef.Content, oAttachmentContentDef.bIsPaswordProtected, "", ""); //pdf generation
                                                                                        oTrace.oTrace.Add(oCR.oTrace);
                                                                                        if (oResult.bOK && oResult.oResult != null)
                                                                                        {
                                                                                            string sDocumentName = oAttachmentContentDef.Name;
                                                                                            oEmail.sDocumentName = sDocumentName;
                                                                                            var oAttachment = oEmail.GeneratePDFFile((MemoryStream)oResult.oResult);
                                                                                            if (oAttachment.bOK && oAttachment.oResult != null)
                                                                                            {
                                                                                                Attachment data = (Attachment)oAttachment.oResult;
                                                                                                MemoryStream file = (MemoryStream)oResult.oResult;
                                                                                                XIInfraDocs oXIDocs = new XIInfraDocs();
                                                                                                oXIDocs.FKiUserID = iUserID;
                                                                                                oXIDocs.FkiClientID = Convert.ToInt32(ClientID);
                                                                                                oXIDocs.sOrgName = sOrgName;
                                                                                                oXIDocs.iOrgID = iOrgID;
                                                                                                oXIDocs.iInstanceID = Convert.ToInt32(LeadID);
                                                                                                oXIDocs.FKiBOID = 717;
                                                                                                oXIDocs.FKiQSInstanceIDXIGUID = QSIGUID;
                                                                                                oXIDocs.bIsAttach = true;
                                                                                                //oXIDocs.FKiPolicyVersionID = iPolicyVersionID;
                                                                                                var oResponse = oXIDocs.SaveDocumentsV2(file, data.Name);//save documents to folder
                                                                                                if (oResponse.bOK && oResponse.oResult != null)
                                                                                                {
                                                                                                    string sDocID = (string)oResponse.oResult;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    Guid templateGUID = Guid.Empty;
                                                                    Guid.TryParse(Attachment.Attributes["FkiTemplateIDXIGUID"].sValue, out templateGUID);
                                                                    if (templateGUID != Guid.Empty)
                                                                    {
                                                                        var oAttachmentDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", iDocumentID.ToString());
                                                                        var oAttachmentDocTemplateList = oAttachmentDocContent.GetCopy();
                                                                        var oAttachmentContentDef = oAttachmentDocTemplateList.FirstOrDefault();
                                                                        int iAttachementType = 0;
                                                                        int.TryParse(Attachment.Attributes["iType"].sValue, out iAttachementType);
                                                                        if (iAttachementType == 20)
                                                                        {
                                                                            XIIBO oDocumentI = oXII.BOI("Documents_T", ExternalgeneratedDocID);
                                                                            if (oDocumentI.Attributes.Count > 0 && oDocumentI.Attributes.ContainsKey("bIsAttach"))
                                                                            {
                                                                                oDocumentI.Attributes["bIsAttach"].sValue = "true";
                                                                                oDocumentI.Attributes["bIsAttach"].bDirty = true;
                                                                                oDocumentI.Save(oDocumentI);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            XIInfraDocumentComponent oDoc = new XIInfraDocumentComponent();
                                                            var oCResponse = oDoc.SaveProductNonMergedDocuments(Convert.ToInt32(iInstanceID), iUserID, sOrgName, iOrgID, oContentDef.Name, "", 0, sClassName, "", iInstanceID);
                                                            if (oCResponse.bOK && oCResponse.oResult != null)
                                                            {
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            string sDocQuery = "select ID, sName, sDefaultSubject, FKiTemplateID, FkiExternalTemplateID, FKiClassID from DocumentTemplate where FKiClassID=" + oQSI.FKiClassID + " and iTemplateType = 20 and XIDeleted=0 order by id desc";
                            oXI1Click = new XID1Click();
                            oXI1Click.Query = sDocQuery;
                            oXI1Click.Name = "DocumentTemplate";
                            var oDocResult = oXI1Click.GetList();
                            List<XIIBO> oDocList = new List<XIIBO>();
                            if (oDocResult.bOK || oDocResult.oResult != null)
                            {
                                oDocList = ((Dictionary<string, XIIBO>)oDocResult.oResult).Values.ToList();
                            }
                            foreach (var Doc in oDocList)
                            {
                                int iDocumentID = 0;
                                var templateID = Doc.Attributes["FkiTemplateID"].sValue;
                                if (int.TryParse(templateID, out iDocumentID))
                                {
                                    var oDocContent = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, "", iDocumentID.ToString());
                                    var oDocTemplateList = oDocContent.GetCopy();
                                    var oContentDef = oDocTemplateList.FirstOrDefault();
                                    XIInfraDocumentComponent oDoc = new XIInfraDocumentComponent();
                                    var oCResponse = oDoc.SaveProductNonMergedDocuments(Convert.ToInt32(iInstanceID), iUserID, sOrgName, iOrgID, oContentDef.Name, "", 0, sClassName, "", iInstanceID);
                                    if (oCResponse.bOK && oCResponse.oResult != null)
                                    {
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                        oTrace.sMessage = "Mandatory Param: ClientID " + ClientID + " is missing";
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiLogicalError;
                        oCResult.sMessage = "Mandatory Param: ClientID " + ClientID + " is missing";
                    }
                }
                else
                {
                    oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiLogicalError;
                    oTrace.sMessage = "Mandatory Param: iInstanceID " + iInstanceID + " is missing";
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiLogicalError;
                    oCResult.sMessage = "Mandatory Param: iInstanceID " + iInstanceID + " is missing";
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.sCategory = ex.GetType().ToString();
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //SaveErrortoDB(oCResult);
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return oCResult;

        }
        public List<XIIBO> GetAttachments(string sTemplateID)
        {
            List<XIIBO> oBOIList1 = new List<XIIBO>();
            QueryEngine oQE = new QueryEngine();
            List<XIWhereParams> oWParams = new List<XIWhereParams>();
            List<SqlParameter> oSQLParams = new List<SqlParameter>();
            oWParams.Add(new XIWhereParams { sField = "FkiTemplateID", sOperator = "=", sValue = sTemplateID });
            oSQLParams.Add(new SqlParameter { ParameterName = "@FkiTemplateID", Value = sTemplateID });
            oQE.AddBO("TemplateAttachement", "", oWParams);
            CResult oCresult1 = oQE.BuildQuery();
            if (oCresult1.bOK && oCresult1.oResult != null)
            {
                var sSql1 = (string)oCresult1.oResult;
                ExecutionEngine oEE = new ExecutionEngine();
                oEE.XIDataSource = oQE.XIDataSource;
                oEE.sSQL = sSql1;
                oEE.SqlParams = oSQLParams;
                var oQResult = oEE.Execute();
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    var oBOD1 = oQE.QParams.FirstOrDefault().BOD;
                    oBOIList1.ForEach(x => x.BOD = oBOD1);
                }
            }
            return oBOIList1;
        }
        public string ExternalDocGeneration(string TemplateID, string sInstance, string sClientID = "", int iQSInstanceID = 0)
        {
            XIIXI oIXI = new XIIXI();
            int iCustomerID = 0;
            int BOID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oTrace.sTask = "ExternalDocGeneration";//expalin about this method logic
            string sResponse = "";
            string sBO = "";
            try
            {
                string sJsonStr = "";
                string sTemplate = "";
                string sTemplateName = "";
                int.TryParse(sClientID, out iCustomerID);
                var TemplateI = oIXI.BOI("XIExternalTemplate", TemplateID);
                if (TemplateI != null && TemplateI.Attributes.ContainsKey("iDocType"))
                {
                    var sStructureCode = TemplateI.BOD.Attributes["idoctype"].OptionList.Where(m => m.sValues == TemplateI.Attributes["iDocType"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                    var MainNode = GetMainNodeOfStructure(sStructureCode);
                    BOID = MainNode.BOID;
                    sBO = MainNode.sBO;
                    var StrObj = oIXI.BOI(MainNode.sBO, sInstance).Structure(sStructureCode).XILoad(null, true);
                    if (StrObj != null && StrObj.oStructureInstance.Count > 0)
                    {
                        string result = ConvertTOJsonObj(StrObj.oStructureInstance, null, "", true);
                        sJsonStr = result;
                        if (MainNode.sBO == "Customer_T")
                        {
                            int.TryParse(sInstance, out iCustomerID);
                        }
                    }
                    var TemplateDocID = TemplateI.Attributes["FKizXDoc"].sValue;
                    sTemplate = GetFileFromDisk("", TemplateDocID);
                    sTemplateName = TemplateI.Attributes["sName"].sResolvedValue;
                }
                var sDocType = TemplateI.BOD.Attributes["igeneratetype"].OptionList.Where(m => m.sValues == TemplateI.Attributes["igeneratetype"].sValue).Select(m => m.sOptionName).FirstOrDefault();
                string url = "https://palloma-docify.accessinsurance.co.uk/api/Docify?code=DRnwoafPAXRFqYdyhD/BoajbwDs/nj/6f3elXiKElFSzdXwEroIALw==";
                var jsonObj = "{\"docxoptions\": { \"debug\": \"false\", \"linebreaks\": \"true\",\"paragraphLoop\": \"true\"}, \"files\": [{ \"data\":" + sJsonStr + ", \"formats\": [\"" + sDocType.ToLower() + "\"], \"name\": \"" + sTemplateName + "\", \"template\": \"" + sTemplate + "\" }]}";
                var client = new RestClient(url);
                var request = new RestRequest(Method.POST);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                request.AddHeader("Content-Type", "application/json");
                request.AddHeader("Access-Control-Allow-Origin", "*");
                request.AddParameter("application/json", jsonObj, ParameterType.RequestBody);
                IRestResponse ResRresponse = client.Execute(request);
                var oResult = ResRresponse.Content;
                if (!string.IsNullOrEmpty(oResult) && ResRresponse.StatusDescription != "Ip Forbidden")
                {
                    var ExternalDocID = ConvertAndSaveAPIResponse(oResult, sInstance, BOID, iCustomerID, iQSInstanceID);
                    sResponse = ExternalDocID;
                }
                else
                {
                    oCResult.sMessage = "Error:[Policy.ExternalDocGeneration]-" + ResRresponse.StatusDescription + " " + ResRresponse.ResponseUri.Host + " bo:" + sBO + " instance:" + sInstance;
                    sResponse = "Document gereration failed";
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.sCategory = ex.GetType().ToString();
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //SaveErrortoDB(oCResult);
            }
            oXID.SaveErrortoDB(oCResult);
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return sResponse;
        }
        public string ConvertTOJsonObj(Dictionary<string, List<XIIBO>> StrObj, Dictionary<string, object> ResultObj, string obj = "", bool bIsMainBO = false)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oTrace.sTask = "ConvertTOJsonObj";//expalin about this method logic            
            try
            {
                if (ResultObj == null)
                {
                    ResultObj = new Dictionary<string, object>();
                }
                if (StrObj != null && StrObj.Count > 0)
                {
                    foreach (var BOList in StrObj.ToList())
                    {
                        var sJsonResult = "";
                        if (!bIsMainBO && BOList.Value.Count() > 1)
                        {
                            sJsonResult = " [";
                        }
                        foreach (var Instance in BOList.Value)
                        {
                            if (Instance.SubChildI.Count > 0)
                            {
                                ResultObj = Instance.Attributes.ToDictionary(x => x.Key, x => (object)x.Value.sResolvedValue);
                                foreach (var subChild in Instance.SubChildI.ToList())
                                {
                                    var subChildO = new Dictionary<string, List<XIIBO>>();
                                    subChildO.Add(subChild.Key, subChild.Value);
                                    var ChildResult = ConvertTOJsonObj(subChildO, ResultObj, obj);
                                    var Deserial = JsonConvert.DeserializeObject(ChildResult.ToString());
                                    ResultObj.Add(subChild.Key.Replace(" ", "_").ToLower(), Deserial);
                                }
                            }
                            else
                            {
                                ResultObj = Instance.Attributes.ToDictionary(x => x.Key, x => (object)x.Value.sResolvedValue);
                            }
                            var jsonse = JsonConvert.SerializeObject(ResultObj.ToDictionary(item => item.Key, item => item.Value));
                            var resultDic = Instance.Attributes.ToDictionary(x => x.Key, x => x.Value.sResolvedValue);
                            sJsonResult = sJsonResult + jsonse.ToString() + ",";
                        }
                        sJsonResult = sJsonResult.TrimEnd(',');
                        if (!bIsMainBO && BOList.Value.Count() > 1)
                        {
                            sJsonResult = sJsonResult + "]";
                        }
                        obj = sJsonResult;
                    }
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.sCategory = ex.GetType().ToString();
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //SaveErrortoDB(oCResult);
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return obj;
        }
        public XIDStructure GetMainNodeOfStructure(string sCode)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oTrace.sTask = "ConvertTOJsonObj";//expalin about this method logic
            XIDStructure sMainNode = null;
            try
            {
                XIDBAPI Connection = new XIDBAPI(ConfigurationManager.ConnectionStrings["XIDNADbContext"].ConnectionString);
                Dictionary<string, object> Params = new Dictionary<string, object>();
                Params["sCode"] = sCode;
                Params["FKiParentID"] = "#";
                sMainNode = Connection.Select<XIDStructure>("XIBOStructure_T", Params).FirstOrDefault();
                var boid = sMainNode.BOID;
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.sCategory = ex.GetType().ToString();
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //SaveErrortoDB(oCResult);
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return sMainNode;
        }
        public string GetFileFromDisk(string sGUID = "", string sID = "")
        {
            CResult oCResult = new CResult();
            string result = "";
            try
            {
                XIInfraDocs oDocs = new XIInfraDocs();
                XIInfraDocTypes oXIDocTypes = new XIInfraDocTypes();
                XIIXI oXII = new XIIXI();
                string SharedPath = System.Configuration.ConfigurationManager.AppSettings["SharedPath"];
                var sVirtualDir = System.Configuration.ConfigurationManager.AppSettings["VirtualDirectoryPath"];
                //oCResult.sMessage = "Virtual Path: " + sVirtualDir;
                //SaveErrortoDB(oCResult);

                string PhysicalPath = HostingEnvironment.MapPath("~\\" + sVirtualDir + "\\"); // System.Web.Hosting.HostingEnvironment.MapPath("~");
                                                                                              //oCResult.sMessage = "Virtual Path: " + sVirtualDir + " , physicalPath:"+ PhysicalPath;
                                                                                              //Common.SaveErrorLog(oCResult.sMessage, sDatabase);
                string sDocPath = "";
                string fileName = "";
                XIAPI oXIAPI = new XIAPI();
                if (!string.IsNullOrEmpty(sGUID) && string.IsNullOrEmpty(sID))
                {
                    List<XIWhereParams> oWHParams = new List<XIWhereParams>();
                    oWHParams.Add(new XIWhereParams { sField = "xiguid", sOperator = "=", sValue = sGUID });
                    sID = oXIAPI.GetValue("Documents_T", "ID", oWHParams);
                }
                int iDocID = 0;
                int.TryParse(sID, out iDocID);
                if (iDocID > 0)
                {
                    oDocs.ID = iDocID;
                    var sImagePathDetails = (List<XIDropDown>)oDocs.Get_FilePathDetails().oResult;
                    if (sImagePathDetails != null && sImagePathDetails.Count > 0 && sImagePathDetails.FirstOrDefault() != null)
                    {
                        sDocPath = sImagePathDetails.FirstOrDefault().Expression;
                        fileName = sImagePathDetails.FirstOrDefault().text;
                        //ImagePathDetails.AddRange(sImagePathDetails);
                    }
                }
                var FilePath = PhysicalPath + sDocPath;
                FilePath = FilePath.Replace("/", "\\");
                byte[] FileBytes = System.IO.File.ReadAllBytes(FilePath);
                result = System.Convert.ToBase64String(FileBytes);
                return result;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public string ConvertAndSaveAPIResponse(string APIResponse = "", string iInstanceID = "", int iBOID = 0, int iCustomerID = 0, int iQSInstanceID = 0)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            CTraceStack oTrace = new CTraceStack();
            oTrace.sClass = this.GetType().Name;
            oTrace.sMethod = System.Reflection.MethodBase.GetCurrentMethod().Name;
            oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiInProcess;
            oTrace.sTask = "ConvertAndSaveAPIResponse";//expalin about this method logic
            string sInstanceID = "";
            try
            {
                var Response = JObject.Parse(APIResponse);
                dynamic jsonObj = JsonConvert.DeserializeObject(APIResponse);
                var list = Response.SelectToken("files")[0].ToArray();
                string sFileName = list[0].First.ToString();
                string sContent = list[1].First.ToString();
                var sBytes = Convert.FromBase64String(sContent);
                MemoryStream file = new System.IO.MemoryStream(sBytes);
                XIInfraDocs oXIDocs = new XIInfraDocs();
                //oXIDocs.sOrgName = SessionManager.OrganisationName;
                //oXIDocs.iOrgID = SessionManager.OrganizationID;
                //oXIDocs.FKiUserID = SessionManager.UserID;
                oXIDocs.FKiQSInstanceID = iQSInstanceID;
                oXIDocs.iInstanceID = Convert.ToInt32(iInstanceID);
                oXIDocs.FKiBOID = iBOID;
                oXIDocs.FkiClientID = iCustomerID;
                var oResponse = oXIDocs.SaveDocuments(file, sFileName);
                if (oResponse.bOK && oResponse.oResult != null)
                {
                    sInstanceID = (string)oResponse.oResult;
                }
            }
            catch (Exception ex)
            {
                oTrace.iStatus = (int)xiEnumSystem.xiFuncResult.xiError;
                int line = (new StackTrace(ex, true)).GetFrame(0).GetFileLineNumber();
                oTrace.sMessage = "Line No:" + line + " - " + ex.ToString();
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.sCategory = ex.GetType().ToString();
                oCResult.iCriticality = (int)xiEnumSystem.EnumXIErrorCriticality.Exception;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
                //SaveErrortoDB(oCResult);
            }
            watch.Stop();
            oTrace.iLapsedTime = TimeSpan.FromMilliseconds(watch.ElapsedMilliseconds).TotalSeconds;
            oCResult.oTrace = oTrace;
            return sInstanceID;
        }
        #endregion Outrun

        public CResult CheckQuoteStatus(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                string sFailureStep = oParams.Where(m => m.sName.ToLower() == "sFailureStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sSuccessStep = oParams.Where(m => m.sName.ToLower() == "sSuccessStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iQuoteID = 0;
                XIIXI oXII = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                string sRefID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|sRefID}");
                oCache.Set_ParamVal(sSessionID, sGUID, "Aggregations", "FKiQSInstanceID", "Yes", null, null);
                oCache.Set_ParamVal(sSessionID, sGUID, "Aggregations", "FKiQSInstanceIDXIGUID", "yes", null, null);
                oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "Yes", null, null);
                var QSInstanceID = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|iQSInstanceID}");
                oCache.Set_ParamVal(sSessionID, sGUID, null, "-iQSInstanceID", QSInstanceID, null, null);
                XIDScript oXIScript = new XIDScript();
                oXIScript.sScript = "xi.s|{xi.a|'Aggregations','','ID','',sGUID:{XIP|sRefID}}";
                oCR = oXIScript.Execute_Script(sGUID, sSessionID);
                if (!string.IsNullOrEmpty(oCR.oResult.ToString()))
                {
                    if (int.TryParse(oCR.oResult.ToString(), out iQuoteID))
                    {
                        XIIBO oBOI = new XIIBO(); //{XIP|iQSDID}
                        if (iQuoteID > 0)
                        {
                            oBOI = oXII.BOI("Aggregations", iQuoteID.ToString());
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQuoteID}", iQuoteID.ToString(), null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|bIsSubQS}", "true", null, null);
                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iQSDID}", "B2187FB2-DC53-449D-BDF7-E48C181DBFF8", null, null);
                            List<CNV> oWhrParams = new List<CNV>();
                            oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = oBOI.AttributeI("FKiQSInstanceIDXIGUID").sValue });
                            XIIBO oLeadBOI = oXII.BOI("Lead", null, null, oWhrParams);
                            if (oLeadBOI != null)
                            {
                                if (!string.IsNullOrEmpty(oLeadBOI.AttributeI("FKiMainQSIIDXIGUID").sValue))
                                {
                                    oWhrParams = new List<CNV>();
                                    oWhrParams.Add(new CNV { sName = "FKiRenewalLeadID", sValue = oLeadBOI.AttributeI("ID").sValue });
                                    XIIBO oPolicyBOI = oXII.BOI("Policy", null, null, oWhrParams);
                                    if (oPolicyBOI != null)
                                    {
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", oPolicyBOI.AttributeI("ID").sValue, null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "-iPolicyID", oPolicyBOI.AttributeI("ID").sValue, null, null);
                                        XIIBO oOldQuoteI = oXII.BOI("Aggregations", oPolicyBOI.AttributeI("FKiQuoteID").sValue);
                                        if (oOldQuoteI != null)
                                        {
                                            //if (oOldQuoteI.AttributeI("FKiInsurerID").sValue == oBOI.AttributeI("FKiInsurerID").sValue)
                                            //{
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-transtype", "renewal", null, null);
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "renewal", null, null);
                                            //}
                                            //else
                                            //{
                                            //    oCache.Set_ParamVal(sSessionID, sGUID, null, "-transtype", "rebroke", null, null);
                                            //    oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "rebroke", null, null);
                                            //}
                                        }
                                    }
                                    oWhrParams = new List<CNV>();
                                    oWhrParams.Add(new CNV { sName = "FKiMTALeadID", sValue = oLeadBOI.AttributeI("ID").sValue });
                                    XIIBO oMTAPolicyBOI = oXII.BOI("Policy", null, null, oWhrParams);
                                    if (oMTAPolicyBOI != null)
                                    {
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|iACPolicyID}", oMTAPolicyBOI.AttributeI("ID").sValue, null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "-iPolicyID", oMTAPolicyBOI.AttributeI("ID").sValue, null, null);
                                        XIIBO oOldQuoteI = oXII.BOI("Aggregations", oMTAPolicyBOI.AttributeI("FKiQuoteID").sValue);
                                        if (oOldQuoteI != null)
                                        {
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, "-transtype", "mta", null, null);
                                            oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "mta", null, null);
                                        }
                                    }
                                    if (oMTAPolicyBOI == null && oPolicyBOI == null)
                                    {
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "-transtype", "new", null, null);
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "new", null, null);
                                    }
                                    //if (oPolicyBOI == null)
                                    //{
                                    //        oCache.Set_ParamVal(sSessionID, sGUID, null, "-transtype", "mta", null, null);
                                    //        oCache.Set_ParamVal(sSessionID, sGUID, null, "{XIP|TransactionType}", "mta", null, null);
                                    //}
                                }
                            }
                            QueryEngine oAggregationsQE = new QueryEngine();
                            List<XIWhereParams> oWParams = new List<XIWhereParams>();
                            List<SqlParameter> SqlParams = new List<SqlParameter>();
                            oWParams.Add(new XIWhereParams { sField = "FKiQSInstanceID", sOperator = "=", sValue = oBOI.AttributeI("FKiQSInstanceID").sValue });
                            oWParams.Add(new XIWhereParams { sField = "XIDeleted", sOperator = "=", sValue = "0" });
                            oWParams.Add(new XIWhereParams { sField = "iQuoteStatus", sOperator = "=", sValue = "0" });
                            oWParams.Add(new XIWhereParams { sField = "iStatus", sOperator = "=", sValue = "0" });
                            SqlParams.Add(new SqlParameter { ParameterName = "@FKiQSInstanceID", Value = oBOI.AttributeI("FKiQSInstanceID").sValue });
                            SqlParams.Add(new SqlParameter { ParameterName = "@XIDeleted", Value = "0" });
                            SqlParams.Add(new SqlParameter { ParameterName = "@iQuoteStatus", Value = "0" });
                            SqlParams.Add(new SqlParameter { ParameterName = "@iStatus", Value = "0" });
                            oAggregationsQE.AddBO("Aggregations", "", oWParams);
                            CResult oCresult1 = oAggregationsQE.BuildQuery();
                            if (oCresult1.bOK && oCresult1.oResult != null)
                            {
                                var sSql1 = (string)oCresult1.oResult;
                                ExecutionEngine oEE = new ExecutionEngine();
                                oEE.XIDataSource = oAggregationsQE.XIDataSource;
                                oEE.sSQL = sSql1;
                                oEE.SqlParams = SqlParams;
                                var oQResult = oEE.Execute();
                                if (oQResult.bOK && oQResult.oResult != null)
                                {
                                    var oBOIList1 = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                                    if (oBOIList1.Count() == 0)
                                    {
                                        string skey = "StepMessage";
                                        Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                                        dictMsgs.Add("10", "Policy already in Live.");
                                        dictMsgs.Add("20", "Something went wrong!! Please try again or contact admin");
                                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                                        oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                                    }
                                }
                            }
                            if (oBOI.AttributeI("iBuyStatus").sValue == "0")
                            {
                                oBOI.SetAttribute("iBuyStatus", "10");
                                var QuoteInstance = oBOI.Save(oBOI);
                            }
                        }
                    }
                    else
                    {
                        string skey = "StepMessage";
                        Dictionary<string, string> dictMsgs = new Dictionary<string, string>();
                        dictMsgs.Add("10", "Policy already in Live.");
                        dictMsgs.Add("20", "Something went wrong!! Please try again or contact admin");
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sFailureStep, null, null);
                        oCache.Set_ObjectSetCache(sSessionID, skey, sGUID, dictMsgs);
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Checking the Quote Status" });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public CResult UpdateSubQSIDonQuote(List<CNV> oParams)
        {
            int iQSInstanceID = 0;
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string iID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iQuoteID = 0;
                XIIXI oXII = new XIIXI();
                if (!string.IsNullOrEmpty(iID))
                {
                    if (int.TryParse(iID, out iQuoteID))
                    {
                        XIIBO oBOI = new XIIBO();
                        if (iQuoteID > 0)
                        {
                            oBOI = oXII.BOI("Aggregations", iQuoteID.ToString());
                            if (oBOI != null)
                            {
                                oBOI.SetAttribute("FKiSubQSInstanceID", sQSInstanceID);
                                oBOI.SetAttribute("FKiSubQSInstanceIDXIGUID", sQSInstanceID);
                                oCResult = oBOI.Save(oBOI, false);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Loading the Quote to update Sub QSID." });
                oCResult.sMessage = "ERROR: [ QSInstanceID: " + iQSInstanceID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID);
            }
            return oCResult;
        }

        public CResult NotificationInsersion(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            try
            {
                ////sBOName = oXiLink.XiLinkNVs.Where(m => m.Name.ToLower() == "sBOName".ToLower()).Select(m => m.Value).FirstOrDefault();
                //string sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                //string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string AlertType = oParams.Where(m => m.sName.ToLower() == "sAlertType".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string UserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sAlertText = oParams.Where(m => m.sName.ToLower() == "sAlertMessage".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string BOIDXIGUID = oParams.Where(m => m.sName.ToLower() == "FKiBOIDXIGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string BOID = oParams.Where(m => m.sName.ToLower() == "FKiBOID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInstanceIDXIGUID = oParams.Where(m => m.sName.ToLower() == "iInstanceIDXIGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sInstanceID = oParams.Where(m => m.sName.ToLower() == "iInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();

                var oBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XINotifications");
                XIIBO oBOI = new XIIBO();
                oBOI.BOD = oBOD;
                oBOI.SetAttribute("FKiBoid", BOID);
                oBOI.SetAttribute("FKiBoidXIGUID", BOIDXIGUID);
                oBOI.SetAttribute("sAlertType", AlertType);
                oBOI.SetAttribute("sAlertMessage", sAlertText);
                oBOI.SetAttribute("iUserID", UserID);
                //oBOI.SetAttribute("iRoleID", );
                oBOI.SetAttribute("iInstanceID", sInstanceID);
                oBOI.SetAttribute("iInstanceIDXIGUID", sInstanceIDXIGUID);
                var res = oBOI.Save(oBOI);
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing MakeaChange" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
        public CResult UpdateLeadandLifecycleStatus(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            try
            {
                UpdateLeadStatus(oParams, null);
                oCResult.oResult = "Success";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Update Lead and lifecycle status" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        public CResult CopyKPI(List<CNV> oNVParams)
        {
            CResult oCResult = new CResult();
            try
            {
                XIIBO oBOI = new XIIBO();
                string NewID = oNVParams.Where(m => m.sName.ToLower() == "-iBOIID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oNVParams.Where(m => m.sName.ToLower() == "ID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(iID))
                {
                    oBOI = oIXI.BOI("KPI", iID);
                    oBOI.Exclude("ID");
                    oBOI.SetAttribute("ID", NewID);
                    oBOI.SetAttribute("sName", oBOI.AttributeI("sName").sValue);
                    oBOI.SetAttribute("FKi1ClickID", oBOI.AttributeI("FKi1ClickID").sValue);
                    oBOI.SetAttribute("FKi1ClickIDXIGUID", oBOI.AttributeI("FKi1ClickIDXIGUID").sValue);
                    oBOI.SetAttribute("FKiComponentID", oBOI.AttributeI("FKiComponentID").sValue);
                    oBOI.SetAttribute("FKiComponentIDXIGUID", oBOI.AttributeI("FKiComponentIDXIGUID").sValue);
                    oBOI.SetAttribute("FKiKPIGroupID", oBOI.AttributeI("FKiKPIGroupID").sValue);
                    oBOI.SetAttribute("sColors", oBOI.AttributeI("sColors").sValue);
                    oBOI.SetAttribute("iSize", oBOI.AttributeI("iSize").sValue);
                    oBOI.SetAttribute("iRefreshingtype", oBOI.AttributeI("iRefreshingtype").sValue);
                    oBOI.SetAttribute("iSetinterval", oBOI.AttributeI("iSetinterval").sValue);
                    oBOI.SetAttribute("bToolTip", oBOI.AttributeI("bToolTip").sValue);
                    oBOI.SetAttribute("bGridLines", oBOI.AttributeI("bGridLines").sValue);
                    oBOI.SetAttribute("bIsLegends", oBOI.AttributeI("bIsLegends").sValue);
                    oBOI.SetAttribute("sLegendPosition", oBOI.AttributeI("sLegendPosition").sValue);
                    oBOI.SetAttribute("RowXiLinkID", oBOI.AttributeI("RowXiLinkID").sValue);
                    oBOI.SetAttribute("RowXiLinkIDXIGUID", oBOI.AttributeI("RowXiLinkIDXIGUID").sValue);
                    //oBOI.Attributes.Values.ToList().ForEach(m => m.bDirty = true);
                    var res = oBOI.Save(oBOI);
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While CopyKPI" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        private List<ExcelRow> ConvertHTMLTableToExcel(string sContent)
        {

            var doc = new HtmlDocument();
            doc.LoadHtml(sContent);

            var table = doc.DocumentNode.SelectSingleNode("//table"); // Assuming there's only one table

            List<ExcelRow> excelRows = new List<ExcelRow>();

            if (table != null)
            {
                var rows = table.SelectNodes("tr");
                int iRowIndex = 0;
                foreach (var row in rows)
                {
                    var cells = row.SelectNodes("td");
                    if (cells != null)
                    {
                        int iRowCellIndex = 0;
                        List<ExcelRowCell> rowCells = new List<ExcelRowCell>();
                        foreach (var cell in cells)
                        {
                            rowCells.Add(new ExcelRowCell()
                            {
                                iColumnIndex = iRowCellIndex,
                                sContent = cell.InnerText.Trim()

                            });
                            iRowCellIndex++;
                        }
                        excelRows.Add(new ExcelRow()
                        {
                            iRowIndex = iRowIndex,
                            rowCells = rowCells
                        });
                    }
                    iRowIndex++;
                }
            }
            return excelRows;
        }

        public void CreateExcelIOSheets(string sContent, string sExcelPath, string sOrganizationID, string sQuoteID)
        {
            CResult oCResult = new CResult();
            CResult oCRException = new CResult();
            List<string> Info = new List<string>();
            string workingDirectory = String.Empty;

            List<ExcelRow> excelRows = ConvertHTMLTableToExcel(sContent);

            if (excelRows.Count > 0)
            {

                try
                {
                    workingDirectory = System.Web.Hosting.HostingEnvironment.MapPath("~");
                    workingDirectory = workingDirectory.TrimEnd('\\');
                    Info.Add("QuoteID: " + sQuoteID);
                    Info.Add("OrganisationID: " + sOrganizationID);
                    Info.Add("working directory: " + workingDirectory);
                    string sExcelFilePath = workingDirectory + sExcelPath;
                    Info.Add("excel calc path: " + sExcelFilePath);
                    string sOutputDir = workingDirectory + "\\UploadedFiles\\ExcelQuotes\\" + sOrganizationID;
                    string sOutExcelFileName = sQuoteID + "_" + sExcelPath.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries).ToList().LastOrDefault();
                    string sOutFilePath = sOutputDir + "\\" + sOutExcelFileName;
                    Info.Add("Excel out path: " + sOutFilePath);
                    string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                    oCResult.sMessage = sInfo;
                    oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                    oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;
                    oXID.SaveErrortoDB(oCResult);

                    if (!Directory.Exists(sOutputDir))
                    {
                        Directory.CreateDirectory(sOutputDir);
                    }

                    using (var inpfs = new FileStream(sExcelFilePath, FileMode.Open, FileAccess.Read))
                    using (var outfs = new FileStream(sOutFilePath, FileMode.Create, FileAccess.Write))
                    {
                        XSSFWorkbook workbook = new XSSFWorkbook(inpfs);
                        XSSFSheet inpWorksheet = (XSSFSheet)workbook.GetSheet("Input");
                        if (inpWorksheet == null)
                        {
                            inpWorksheet = (XSSFSheet)workbook.CreateSheet("Input");
                        }

                        for (int i = 0; i <= inpWorksheet.LastRowNum; i++)
                        {
                            XSSFRow row = (XSSFRow)inpWorksheet.GetRow(i);
                            if (row != null)
                            {
                                inpWorksheet.RemoveRow(row);
                            }
                        }
                        excelRows.ForEach(row =>
                        {
                            var excelRow = inpWorksheet.CreateRow(row.iRowIndex);
                            row.rowCells.ForEach(cell =>
                            {
                                double dValue;
                                DateTime dtValue;

                                if (DateTime.TryParseExact(cell.sContent, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dtValue))
                                {
                                    XSSFCellStyle cellStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                                    XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
                                    cellStyle.SetDataFormat(
                                        createHelper.CreateDataFormat().GetFormat("dd/mm/yyyy"));
                                    excelRow.CreateCell(cell.iColumnIndex).SetCellValue(DateTime.ParseExact(cell.sContent, "dd/MM/yyyy", CultureInfo.InvariantCulture));
                                    excelRow.GetCell(cell.iColumnIndex).CellStyle = cellStyle;
                                }
                                else if (double.TryParse(cell.sContent, out dValue))
                                {
                                    excelRow.CreateCell(cell.iColumnIndex).SetCellValue(dValue);
                                }
                                else
                                {
                                    excelRow.CreateCell(cell.iColumnIndex).SetCellValue(cell.sContent);
                                }

                            });
                        });

                        workbook.Write(outfs);
                        workbook.Close();
                    }

                }
                catch (Exception ex)
                {
                    oCRException.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error in Create Excel Input" });
                    string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                    oCRException.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + " - Info: " + sInfo + "\r\n";
                    oCRException.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                    oCRException.iLogLevel = (int)EnumXIErrorPriority.Critical;
                    oXID.SaveErrortoDB(oCRException);
                }
            }

        }

        public void ReadExcelQuoteOutput(string sExcelPath, string sOrganizationID, string sQuoteID)
        {

            string workingDirectory = System.Web.Hosting.HostingEnvironment.MapPath("~");
            workingDirectory = workingDirectory.TrimEnd('\\');
            string sOutputDir = workingDirectory + "\\UploadedFiles\\ExcelQuotes\\" + sOrganizationID;
            string sOutExcelFileName = sQuoteID + "_" + sExcelPath.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries).ToList().LastOrDefault();
            string sOutFilePath = sOutputDir + "\\" + sOutExcelFileName;
            double dQuotePrice = 0.0;
            string sQuoteStatus = String.Empty;
            CResult oCRException = new CResult();
            List<string> Info = new List<string>();
            Info.Add("Excel file path: " + sOutFilePath);
            try
            {
                using (var inpfs = new FileStream(sOutFilePath, FileMode.Open, FileAccess.Read))
                {
                    XSSFWorkbook workbook = new XSSFWorkbook(inpfs);
                    workbook.SetForceFormulaRecalculation(true);
                    XSSFSheet outWorksheet = (XSSFSheet)workbook.GetSheet("Output");

                    Info.Add("Setting date field formats in input sheet");
                    XSSFFormulaEvaluator evaluator = (XSSFFormulaEvaluator)workbook.GetCreationHelper().CreateFormulaEvaluator();
                    Info.Add("Getting quote price.");

                    evaluator.EvaluateInCell(outWorksheet.GetRow(1).GetCell(1));
                    if (outWorksheet.GetRow(1).GetCell(1).CellType == CellType.String)
                    {
                        sQuoteStatus = outWorksheet.GetRow(1).GetCell(1).StringCellValue;
                    }
                    else if (outWorksheet.GetRow(1).GetCell(1).CellType == CellType.Numeric)
                    {
                        dQuotePrice = outWorksheet.GetRow(1).GetCell(1).NumericCellValue;
                    }
                    //else if(outWorksheet.GetRow(1).GetCell(1).CellType == CellType.Blank)
                    //{
                    //    throw new Exception("Exception in reading quote price.");
                    //}
                    //else
                    //{
                    //    throw new Exception("Exception in reading quote price.");
                    //}

                    Info.Add("Deleting existing risk factors");
                    DeleteExistingRiskFactors(sQuoteID);

                    if (!String.IsNullOrEmpty(sQuoteStatus))
                    {
                        InsertRiskFactors(sQuoteID, "Quote Status", sQuoteStatus);
                    }

                    for (int row = 2; row <= outWorksheet.LastRowNum; row++)
                    {
                        if (outWorksheet.GetRow(row) != null && outWorksheet.GetRow(row).GetCell(1) != null)
                        {
                            evaluator.EvaluateInCell(outWorksheet.GetRow(row).GetCell(1));
                            switch (outWorksheet.GetRow(row).GetCell(1).CellType)
                            {
                                case CellType.Error:
                                    break;
                                case CellType.Numeric:
                                    InsertRiskFactors(sQuoteID, outWorksheet.GetRow(row).GetCell(0).StringCellValue, outWorksheet.GetRow(row).GetCell(1).NumericCellValue.ToString());
                                    break;
                                case CellType.Boolean:
                                    InsertRiskFactors(sQuoteID, outWorksheet.GetRow(row).GetCell(0).StringCellValue, outWorksheet.GetRow(row).GetCell(1).BooleanCellValue.ToString());
                                    break;
                                default:
                                    InsertRiskFactors(sQuoteID, outWorksheet.GetRow(row).GetCell(0).StringCellValue, outWorksheet.GetRow(row).GetCell(1).StringCellValue);
                                    break;
                            }

                        }
                    }

                    Info.Add("Updating aggregations");
                    UpdateAggregations(dQuotePrice, sQuoteID, 50, 10);

                }


            }
            catch(Exception ex)
            {
                oCRException.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error in Read Excel Output" });
                string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                oCRException.sMessage = "ERROR: [" + oCRException.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + " - Info: " + sInfo + "\r\n";
                oCRException.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCRException.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCRException);
            }

        }

        public void CreateInteropExcelIOSheets(string sContent, string sExcelPath, string sOrganizationID, string sQuoteID)
        {
            CResult oCResult = new CResult();
            CResult oCResultTry = new CResult();
            CResult oCRException = new CResult();
            List<string> Info = new List<string>();
            string workingDirectory = System.Web.Hosting.HostingEnvironment.MapPath("~");
            workingDirectory = workingDirectory.TrimEnd('\\');
            string logfile = workingDirectory + "\\UploadedFiles\\excelLog.txt";
            try
            {
                string sInfo = "INFO: Starting Excel application";

                using (var inpfs = new FileStream(logfile, FileMode.Append, FileAccess.Write))
                {
                    string sMessage = DateTime.Now + ": INFO: starting excel application\n";
                    byte[] info = new UTF8Encoding(true).GetBytes(sMessage);
                    inpfs.Write(info, 0, info.Length);
                }

                oCResultTry.sMessage = sInfo;
                oCResultTry.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResultTry.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCResultTry);
                var excelApp = new Microsoft.Office.Interop.Excel.Application();
                
                Info.Add("QuoteID: " + sQuoteID);
                Info.Add("OrganisationID: " + sOrganizationID);
                Info.Add("working directory: " + workingDirectory);
                string sExcelFilePath = workingDirectory + sExcelPath;
                Info.Add("excel calc path: " + sExcelFilePath);
                //string sOutputDir = workingDirectory + "Content\\images\\Quotes\\" + sOrganizationID;
                string sOutputDir = workingDirectory + "\\UploadedFiles\\ExcelQuotes\\" + sOrganizationID;
                string sOutExcelFileName = sQuoteID + "_" + sExcelPath.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries).ToList().LastOrDefault();
                string sOutFilePath = sOutputDir + "\\" + sOutExcelFileName;
                Info.Add("Excel out path: " + sOutFilePath);
                sInfo = "INFO: " + string.Join(",\r\n ", Info);
                oCResult.sMessage = sInfo;
                oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

                oXID.SaveErrortoDB(oCResult);
                if (!Directory.Exists(sOutputDir))
                {
                    Directory.CreateDirectory(sOutputDir);
                }

                Workbook workbook = excelApp.Workbooks.Open(sExcelFilePath);
                workbook.SaveAs(sOutFilePath);
                workbook.Close(true);

                workbook = excelApp.Workbooks.Open(sOutFilePath);


                int idx = 1; // worksheet indices start from 1.
                bool inputExists = false;
                foreach (Worksheet ws in workbook.Worksheets)
                {
                    if (ws.Name == "Input")
                    {
                        inputExists = true;
                        ws.Cells.Clear();
                        workbook.Save();
                        break;
                    }
                    idx++;
                }
                Worksheet inpWorksheet;
                if (!inputExists)
                {
                    workbook.Worksheets.Add();
                    inpWorksheet = workbook.Worksheets[1];
                    inpWorksheet.Name = "Input";

                }
                else
                {
                    inpWorksheet = workbook.Worksheets[idx];

                }
                if (sContent != null)
                {
                    Thread thread = new Thread(() => Clipboard.SetText(sContent));
                    thread.SetApartmentState(ApartmentState.STA);
                    thread.Start();
                    thread.Join();
                    inpWorksheet.Activate();
                    inpWorksheet.Cells[1, 1].Select();
                    inpWorksheet.PasteSpecial(null, false, false, null, null, null, true);
                    workbook.Save();
                    workbook.Close(true);
                    excelApp.Quit();
                }
            }
            catch (Exception ex)
            {

                using (var inpfs = new FileStream(logfile, FileMode.Append, FileAccess.Write))
                {
                    string sMessage = DateTime.Now + ": Exception in excel creation: " + ex.Message + "\n";
                    byte[] info = new UTF8Encoding(true).GetBytes(sMessage);
                    inpfs.Write(info, 0, info.Length);
                }

                oCRException.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error in Create Excel Input" });
                string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                oCRException.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + " - Info: " + sInfo + "\r\n";
                oCRException.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCRException.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCRException);
            }
        }

        public void ReadInteropExcelQuoteOutput(string sExcelPath, string sOrganizationID, string sQuoteID)
        {

            var excelApp = new Microsoft.Office.Interop.Excel.Application();

            string workingDirectory = System.Web.Hosting.HostingEnvironment.MapPath("~");
            workingDirectory = workingDirectory.TrimEnd('\\');
            //string sOutputDir = workingDirectory + "Content\\images\\Quotes\\" + sOrganizationID;
            string sOutputDir = workingDirectory + "\\UploadedFiles\\ExcelQuotes\\" + sOrganizationID;
            string sOutExcelFileName = sQuoteID + "_" + sExcelPath.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries).ToList().LastOrDefault();
            string sOutFilePath = sOutputDir + "\\" + sOutExcelFileName;

            Workbook workbook = excelApp.Workbooks.Open(sOutFilePath);
            bool outputExists = false;
            int idx = 1; // worksheet indices start from 1.
            foreach (Worksheet ws in workbook.Worksheets)
            {
                if (ws.Name == "Output")
                {
                    outputExists = true;
                    break;
                }
                idx++;
            }
            if (outputExists)
            {
                Worksheet outWorksheet = workbook.Worksheets[idx];
                outWorksheet.Activate();
                Range usedRange = outWorksheet.UsedRange;
                var cells = usedRange.Value;
                string sQuoteStatus = (string)cells[1, 2];
                double dQuotePrice = (double)cells[2, 2];
                int iQuoteStatus = 50;
                int iStatus = 10; // Quoted
                //if (sQuoteStatus == "Quoted") // success
                //{
                //    dQuotePrice = (double)cells[7, 2];
                //    iQuoteStatus = 50;
                //}
                //else if (sQuoteStatus == "Refer")
                //{
                //    dQuotePrice = (double)cells[7, 2];
                //    iQuoteStatus = 10;
                //}
                //else
                //{
                //    iQuoteStatus = 20; // declined
                //    iStatus = 20; // failed.
                //}
                string sNotes1 = (string)cells[3, 2];
                string sNotes2 = (string)cells[4, 2];
                workbook.Close(true);
                excelApp.Quit();
                UpdateAggregations(dQuotePrice, sQuoteID, iQuoteStatus, iStatus);
                DeleteExistingRiskFactors(sQuoteID);
                InsertRiskFactors(sQuoteID, sNotes1, sNotes2);

            }
        }

        private void InsertExcelQuoteNotification(string sQuoteID, string sQSIIDXIGUID, string sOrganisationID, string sCode = "NEWLEAD")
        {

            XIDBO oNotificationsBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XINotifications_T");
            XIIBO oBO = new XIIBO();
            oBO.BOD = oNotificationsBOD;

            XIIXI oXII = new XIIXI();
            List<CNV> oWhrParams = new List<CNV>();
            oWhrParams.Add(new CNV { sName = "sCode", sValue = sCode });
            oWhrParams.Add(new CNV { sName = "FKiOrgID", sValue = sOrganisationID });
            var oNotMaster = oXII.BOI("XINotificationMasterOrg", "", "List", oWhrParams);

            oWhrParams = new List<CNV>();
            oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = sQSIIDXIGUID });
            var oLead = oXII.BOI("Lead_T", "", "Quick Search", oWhrParams);

            if (oNotMaster != null && oNotMaster.Attributes.Count > 0 && oNotMaster.Attributes["FKiNotificationMasterIDXIGUID"].sValue != null)
            {
                oBO.Attributes["FKiMasterNotificationIDXIGUID"] = new XIIAttribute
                {
                    sName = "FKiMasterNotificationIDXIGUID",
                    sValue = oNotMaster.Attributes["FKiNotificationMasterIDXIGUID"].sValue,
                    bDirty = true
                };
                oBO.Attributes["FKiMasterNotificationID"] = new XIIAttribute
                {
                    sName = "FKiMasterNotificationID",
                    sValue = oNotMaster.Attributes["ID"].sValue,
                    bDirty = true
                };
                oBO.Attributes["sAlertType"] = new XIIAttribute
                {
                    sName = "sAlertType",
                    sValue = "flash",
                    bDirty = true
                };
                oBO.Attributes["sAlertMessage"] = new XIIAttribute
                {
                    sName = "sAlertMessage",
                    sValue = "New lead: " + sQuoteID,
                    bDirty = true
                };
                oBO.Attributes["FKiOrgID"] = new XIIAttribute
                {
                    sName = "FKiOrgID",
                    sValue = sOrganisationID,
                    bDirty = true
                };
                oBO.Attributes["sCode"] = new XIIAttribute
                {
                    sName = "sCode",
                    sValue = sCode,
                    bDirty = true,
                };
                oBO.Attributes["FKiBODIDXIGUID"] = new XIIAttribute
                {
                    sName = "FKiBODIDXIGUID",
                    sValue = "D9AE2558-9ACC-44F9-918D-AEA8AD0FF962",
                    bDirty = true,
                };
                oBO.Attributes["FKiBOIID"] = new XIIAttribute
                {
                    sName = "FKiBOIID",
                    sValue = oLead.Attributes["id"].sValue,
                    bDirty = true,
                };
                oBO.Attributes["iCategory"] = new XIIAttribute
                {
                    sName = "iCategory",
                    sValue = "10",
                    bDirty = true,
                };
                var oRes = oBO.Save(oBO);
            }

                //XID1Click PV1Click = new XID1Click();
                //var o1ClickI = (XID1Click)oCache.GetObjectFromCache(XIConstant.Cache1Click, "Policy SignalR");
                //PV1Click = (XID1Click)o1ClickI.Clone(o1ClickI);
                //List<CNV> oNVParams = new List<CNV>();
                //oNVParams.Add(new CNV { sName = "{-iUserID}", sValue = sUserID });
                //PV1Click.ReplaceFKExpressions(oNVParams);
                //var oOneClick = PV1Click.OneClick_Execute();
                //foreach (var item1 in oOneClick.Values)
                //{
                //    CNV Nparam = new CNV();
                //    List<CNV> oNparams = new List<CNV>();
                //    Nparam = new CNV();
                //    Nparam.sName = "iInstanceID";
                //    Nparam.sValue = sQuoteID;
                //    oNparams.Add(Nparam);
                //    Nparam = new CNV();
                //    Nparam.sName = "iInstanceIDXIGUID";
                //    Nparam.sValue = "";//oPolicy.Attributes["XIGUID"].sValue;
                //    oNparams.Add(Nparam);
                //    Nparam = new CNV();
                //    Nparam.sName = "FKiBOID";
                //    Nparam.sValue = item1.Attributes["fkiboid"].sValue;
                //    oNparams.Add(Nparam);
                //    Nparam = new CNV();
                //    Nparam.sName = "FKiBOIDXIGUID";
                //    Nparam.sValue = "";//item1.Attributes["fkiboidxiguid"].sValue;
                //    oNparams.Add(Nparam);
                //    Nparam = new CNV();
                //    Nparam.sName = "sAlertMessage";
                //    Nparam.sValue = item1.Attributes["sAlertText"].sValue;
                //    oNparams.Add(Nparam);
                //    Nparam = new CNV();
                //    Nparam.sName = "iUserID";
                //    Nparam.sValue = item1.Attributes["iUserID"].sValue;
                //    oNparams.Add(Nparam);
                //    Nparam = new CNV();
                //    Nparam.sName = "sAlertType";
                //    Nparam.sValue = item1.Attributes["sConfig"].sValue;
                //    oNparams.Add(Nparam);
                //    NotificationInsersion(oNparams);
                //}
        }

        private void DeleteExistingRiskFactors(string sQuoteID)
        {
            QueryEngine oQEE = new QueryEngine();
            List<XIWhereParams> oWhereParams = new List<XIWhereParams>();
            List<SqlParameter> SqlParams = new List<SqlParameter>();
            XIDBO oBOD = new XIDBO();
            oWhereParams.Add(new XIWhereParams { sField = "FKiQuoteID", sOperator = "=", sValue = sQuoteID });
            SqlParams.Add(new SqlParameter { ParameterName = "@FKiQuoteID", Value = sQuoteID });
            oQEE.AddBO("RiskFactor_T", "", oWhereParams);
            CResult oresult1 = oQEE.BuildQuery();
            if (oresult1.bOK && oresult1.oResult != null)
            {
                var sSql = (string)oresult1.oResult;
                ExecutionEngine oEE = new ExecutionEngine();
                oEE.XIDataSource = oQEE.XIDataSource;
                oEE.sSQL = sSql;
                oEE.SqlParams = SqlParams;
                var oQResult = oEE.Execute();
                if (oQResult.bOK && oQResult.oResult != null)
                {
                    var oBOIListData = ((Dictionary<string, XIIBO>)oQResult.oResult).Values.ToList();
                    oBOD = oQEE.QParams.FirstOrDefault().BOD;
                    oBOIListData.ForEach(x => x.BOD = oBOD);
                    if (oBOIListData.Count() > 0)
                    {
                        foreach (var oBOInstance in oBOIListData)
                        {
                            oBOInstance.Delete(oBOInstance);
                        }

                    }
                }
            }
        }

        private void InsertRiskFactors(string sQuoteID, string sNotes1, string sNotes2)
        {
            XIDBO oRiskFactorsBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "RiskFactor_T");
            XIIBO oBO = new XIIBO();
            oBO.BOD = oRiskFactorsBOD;
            oBO.Attributes["FKiQuoteID"] = new XIIAttribute
            {
                sName = "FKiQuoteID",
                sValue = sQuoteID,
                bDirty = true
            };
            oBO.Attributes["sFactorName"] = new XIIAttribute
            {
                sName = "sFactorName",
                sValue = sNotes1,
                bDirty = true
            };
            oBO.Attributes["sValue"] = new XIIAttribute
            {
                sName = "sValue",
                sValue = sNotes1,
                bDirty = true
            };
            oBO.Attributes["sMessage"] = new XIIAttribute
            {
                sName = "sMessage",
                sValue = sNotes2,
                bDirty = true
            };
            oBO.Attributes["CreatedTime"] = new XIIAttribute
            {
                sName = "CreatedTime",
                sValue = DateTime.Now.ToString(),
                bDirty = true
            };
            oBO.Attributes["FKsQuoteID"] = new XIIAttribute
            {
                sName = "FKsQuoteID",
                sValue = sQuoteID,
                bDirty = true
            };
            oBO.Attributes["ID"] = new XIIAttribute
            {
                sName = "ID",
                bDirty = true
            };
            var oRes = oBO.Save(oBO);
        }
        private void UpdateAggregations(double dQuotePrice, string sQuoteID, int iQuoteStatus, int iStatus)
        {
            XIIBO oBOI = new XIIBO();
            oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Aggregations");
            XIIBO oCurrentQuoteI = oIXI.BOI("Aggregations", sQuoteID);

                oBOI.Attributes["XIGUID"] = new XIIAttribute
                {
                    sName = "ID",
                    sValue = sQuoteID,
                    bDirty = false
                };
                oBOI.Attributes["rPrice"] = new XIIAttribute
                {
                    sName = "rPrice",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rCost"] = new XIIAttribute
                {
                    sName = "rCost",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rDefaultQuotePrice"] = new XIIAttribute
                {
                    sName = "rDefaultQuotePrice",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rTotal"] = new XIIAttribute
                {
                    sName = "rTotal",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rTotalAdmin"] = new XIIAttribute
                {
                    sName = "rTotalAdmin",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rQuotePremium"] = new XIIAttribute
                {
                    sName = "rQuotePremium",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rGrossPremium"] = new XIIAttribute
                {
                    sName = "rGrossPremium",
                    sValue = String.Format("{0:0.00}", dQuotePrice),
                    bDirty = true
                };
                oBOI.Attributes["rFinalQuote"] = new XIIAttribute
                {
                    sName = "rFinalQuote",
                    sValue = String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                    bDirty = true
                };
                oBOI.Attributes["rFinalPremium"] = new XIIAttribute
                {
                    sName = "rFinalPremium",
                    sValue = String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                    bDirty = true
                };
                //oBOI.Attributes["rMonthlyPrice"] = new XIIAttribute
                //{
                //    sName = "rMonthlyPrice",
                //    sValue = dQuotePrice == null ? null : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};
                //oBOI.Attributes["rMonthlyTotal"] = new XIIAttribute
                //{
                //    sName = "rMonthlyTotal",
                //    sValue = dQuotePrice == null ? null : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};
                //oBOI.Attributes["rAdjustedCommission"] = new XIIAttribute
                //{
                //    sName = "rAdjustedCommission",
                //    sValue = dQuotePrice == null ? null : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};
                //oBOI.Attributes["rFinalCommission"] = new XIIAttribute
                //{
                //    sName = "rFinalCommission",
                //    sValue = dQuotePrice == null ? "0.00" : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};
                //oBOI.Attributes["rCommission"] = new XIIAttribute
                //{
                //    sName = "rCommission",
                //    sValue = dQuotePrice == null ? "0.00" : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};
                //oBOI.Attributes["rPremiumFinanceAmount"] = new XIIAttribute
                //{
                //    sName = "rPremiumFinanceAmount",
                //    sValue = dQuotePrice == null ? null : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};
                //oBOI.Attributes["rPaymentToInsurer"] = new XIIAttribute
                //{
                //    sName = "rPaymentToInsurer",
                //    sValue = dQuotePrice == null ? null : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};

                //oBOI.Attributes["rPremiumFinanceAmount"] = new XIIAttribute
                //{
                //    sName = "rPremiumFinanceAmount",
                //    sValue = dQuotePrice == null ? null : String.Format("{0:0.00}", dQuotePrice), // TODO: Need to change this to actual value.
                //    bDirty = true
                //};

            oBOI.Attributes["iQuoteStatus"] = new XIIAttribute
            {
                sName = "iQuoteStatus",
                sValue = iQuoteStatus.ToString(),
                bDirty = true
            };
            oBOI.Attributes["iStatus"] = new XIIAttribute
            {
                sName = "iStatus",
                sValue = iStatus.ToString(),
                bDirty = true
            };

            var oRes = oBOI.Save(oBOI);
            if (oRes.bOK && oRes.oResult != null)
            {
            }
        }

        private string GetExcelCalcPath(string sID)
        {
            string sLatestFileID = sID.Split(',').ToList().LastOrDefault();
            XIIXI oXII = new XIIXI();
            List<CNV> oWhrParams = new List<CNV>();
            oWhrParams.Add(new CNV { sName = "ID", sValue = sLatestFileID });
            oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
            var oDocObject = oXII.BOI("Documents_T", "", "DocumentList", oWhrParams);

            if(oDocObject != null && oDocObject.Attributes["sFullPath"].sValue != null)
            {
                return @"\UploadedFiles\Files\xlsm\" + oDocObject.Attributes["sFullPath"].sValue.Replace("/", @"\").TrimStart('\\');
            }
            return null;
        }

        private void RunQSExcelCalculations(string sQSDefID, string sQSIID, string sUserID, string sOrganisationID)
        {
            List<string> Info = new List<string>();
            CResult oCResult = new CResult();
            Info.Add("Info : Calling RunQSExcelCalculations method");
            try
            {
                XIIXI oXII = new XIIXI();
                List<CNV> oWhrParams = new List<CNV>();
                oWhrParams.Add(new CNV { sName = "FKiQSDefinitionIDXIGUID", sValue = sQSDefID });
                Info.Add("FKiQSDefinitionIDXIGUID" + sQSDefID);
                oWhrParams.Add(new CNV { sName = "FKiOrgID", sValue = sOrganisationID });
                Info.Add("FKiOrgID" + sOrganisationID);
                oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                var oQSDefOrgMap = oXII.BOI("XIQSDefExcelCalcOrg_T", "", "List", oWhrParams);
                Info.Add("load Bo XIQSDefExcelCalcOrg_T with parameters");

                if (oQSDefOrgMap != null && oQSDefOrgMap.Attributes.Count > 0 && oQSDefOrgMap.Attributes["FKiTemplateIDXIGUID"].sValue != null && oQSDefOrgMap.Attributes["sExcelCalcPath"].sValue != null)
                {
                    Info.Add("Load Attribute Count " + oQSDefOrgMap.Attributes.Count);

                    string sExcelCalcPath = GetExcelCalcPath(oQSDefOrgMap.Attributes["sExcelCalcPath"].sValue);
                    Info.Add("Excel Path: " + sExcelCalcPath);
                    XIIXI oIXIStruct = new XIIXI();
                    Info.Add("Qs Instance ID : " + sQSIID);
                    var oLIst = oIXIStruct.BOI("QS Instance", sQSIID);
                    Info.Add("User ID : " + sUserID);
                    Info.Add("Stucture loading with : Excel Input QC with QSIID and UserID");
                    XIBOInstance oQSIStructure = oLIst.Structure("Excel Input QC").XILoad("", false, sUserID, null);
                    var oContentDef = (List<XIContentEditors>)oCache.GetObjectFromCache(XIConstant.CacheTemplate, null, oQSDefOrgMap.Attributes["fkitemplateidxiguid"].sValue);
                    XIContentEditors oDocumentContent = new XIContentEditors();
                    if (oContentDef != null)
                    {
                        oDocumentContent = oContentDef.FirstOrDefault();
                        XIContentEditors oConent = new XIContentEditors();
                        oCResult = oConent.MergeContentTemplate(oDocumentContent, oQSIStructure);
                        if (oCResult != null && oCResult.oResult != null && !string.IsNullOrEmpty(sExcelCalcPath) && !string.IsNullOrEmpty(sQSIID))
                        {
                            CreateExcelIOSheets(oCResult.oResult.ToString(), sExcelCalcPath, sOrganisationID, sQSIID);
                            ReadQSExcelQuoteOutput(sExcelCalcPath, sOrganisationID, sQSIID);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string sInfo = "INFO: [QSInstanceID: " + sQSIID + "] - " + string.Join(",\r\n ", Info);
                oCResult.sMessage = "Error: " + ex.Message + " INFO: " + sInfo;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCResult);
            }

        }

        private List<ProductVersion> GetProductVersionsWithQsExcel()
        {
            XID1Click o1click = new XID1Click();
            o1click.Name = "productversion_t";
            string sQuery = @"select * from ProductVersions_T where iCalculation = 50 and XIDeleted = 0";
            o1click.Query = sQuery;
            var oOneClick = o1click.OneClick_Execute(null, o1click);
            List<ProductVersion> oProductNames = oOneClick.Values.Select(x => new ProductVersion() { ID = (int)x.Attributes["ID"].iValue, sName = (string)x.Attributes["sName"].sValue, XIGUID = Guid.Parse(x.Attributes["XIGUID"].sValue) }).ToList();
            return oProductNames;
        }
        
        private void ReadQSExcelQuoteOutput(string sExcelPath, string sOrganizationID, string sQSIID)
        {

            string workingDirectory = System.Web.Hosting.HostingEnvironment.MapPath("~");
            workingDirectory = workingDirectory.TrimEnd('\\');
            //string sOutputDir = workingDirectory + "Content\\images\\Quotes\\" + sOrganizationID;
            string sOutputDir = workingDirectory + "\\UploadedFiles\\ExcelQuotes\\" + sOrganizationID;
            string sOutExcelFileName = sQSIID + "_" + sExcelPath.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries).ToList().LastOrDefault();
            string sOutFilePath = sOutputDir + "\\" + sOutExcelFileName;
            double dQuotePrice = 0.0;
            string sQuoteStatus = String.Empty;
            string sProductName = String.Empty;
            Guid gXIGUID = Guid.Empty;
            CResult oCRException = new CResult();
            List<string> Info = new List<string>();
            Info.Add("Excel file path: " + sOutFilePath);
            try
            {
                using (var inpfs = new FileStream(sOutFilePath, FileMode.Open, FileAccess.Read))
                {
                    XSSFWorkbook workbook = new XSSFWorkbook(inpfs);
                    workbook.SetForceFormulaRecalculation(true);
                    XSSFSheet outWorksheet = (XSSFSheet)workbook.GetSheet("Output");

                    XSSFFormulaEvaluator evaluator = (XSSFFormulaEvaluator)workbook.GetCreationHelper().CreateFormulaEvaluator();
                    List<ProductVersion> oQsExcelProducts = GetProductVersionsWithQsExcel();

                    Info.Add("Getting quote price.");
                    for(int i = 1; i < outWorksheet.GetRow(1).LastCellNum; i++)
                    {
                        dQuotePrice = 0.0;
                        sQuoteStatus = string.Empty;
                        XIIXI oXII = new XIIXI();
                        sProductName = outWorksheet.GetRow(0).GetCell(i).StringCellValue;
                        gXIGUID = Guid.Parse(outWorksheet.GetRow(1).GetCell(i).StringCellValue);
                        //dQuotePrice = evaluator.Evaluate(outWorksheet.GetRow(3).GetCell(i)).NumberValue;
                        evaluator.EvaluateInCell(outWorksheet.GetRow(3).GetCell(i));
                        if(outWorksheet.GetRow(3).GetCell(i).CellType == CellType.Error)
                        {
                            break;
                        }
                        else if (outWorksheet.GetRow(1).GetCell(1).CellType == CellType.Blank)
                        {
                            break;
                        }
                        else if(outWorksheet.GetRow(3).GetCell(i).CellType == CellType.String)
                        {
                            sQuoteStatus = outWorksheet.GetRow(3).GetCell(i).StringCellValue;
                        }
                        else if(outWorksheet.GetRow(3).GetCell(i).CellType == CellType.Numeric)
                        {
                            dQuotePrice = outWorksheet.GetRow(3).GetCell(i).NumericCellValue;
                        }
                        List<CNV> oWhrParams = new List<CNV>();
                        oWhrParams.Add(new CNV { sName = "FKiQSInstanceIDXIGUID", sValue = sQSIID.ToString() });
                        oWhrParams.Add(new CNV { sName = "FKiProductVersionID", sValue = oQsExcelProducts.Where(x => x.XIGUID == gXIGUID).SingleOrDefault()?.ID.ToString() });
                        oWhrParams.Add(new CNV { sName = "iType", sValue = "10" });
                        oWhrParams.Add(new CNV { sName = XIConstant.Key_XIDeleted, sValue = "0" });
                        var oQuoteI = oXII.BOI("Aggregations", "", "List", oWhrParams);
                        if (oQuoteI != null && oQuoteI.Attributes.Count > 0 && oQuoteI.Attributes.ContainsKey("id") )
                        {
                            string sQuoteID = oQuoteI.Attributes["id"].sValue;
                            DeleteExistingRiskFactors(sQuoteID);

                            if (!string.IsNullOrEmpty(sQuoteStatus))
                            {
                                InsertRiskFactors(sQuoteID, "Quote Status", sQuoteStatus);
                            }

                            for (int row = 4; row <= outWorksheet.LastRowNum; row++)
                            {
                                if (outWorksheet.GetRow(row) != null && outWorksheet.GetRow(row).GetCell(i) != null)
                                {
                                    evaluator.EvaluateInCell(outWorksheet.GetRow(row).GetCell(i));
                                    switch (outWorksheet.GetRow(row).GetCell(i).CellType)
                                    {
                                        case CellType.Error:
                                            break;
                                        case CellType.Numeric:
                                            InsertRiskFactors(sQuoteID, outWorksheet.GetRow(row).GetCell(0).StringCellValue, outWorksheet.GetRow(row).GetCell(i).NumericCellValue.ToString());
                                            break;
                                        case CellType.Boolean:
                                            InsertRiskFactors(sQuoteID, outWorksheet.GetRow(row).GetCell(0).StringCellValue, outWorksheet.GetRow(row).GetCell(i).BooleanCellValue.ToString());
                                            break;
                                        default:
                                            InsertRiskFactors(sQuoteID, outWorksheet.GetRow(row).GetCell(0).StringCellValue, outWorksheet.GetRow(row).GetCell(i).StringCellValue);
                                            break;
                                    }

                                }
                            }
                            UpdateAggregations(dQuotePrice, sQuoteID, 50, 10);
                            //InsertExcelQuoteNotification(sQuoteID, sQSIID, sOrganizationID, "NEWLEAD");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                oCRException.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error in Read Excel Output" });
                string sInfo = "INFO: " + string.Join(",\r\n ", Info);
                oCRException.sMessage = "ERROR: [" + oCRException.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + " - Info: " + sInfo + "\r\n";
                oCRException.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCRException.iLogLevel = (int)EnumXIErrorPriority.Critical;
                oXID.SaveErrortoDB(oCRException);
            }

        }

        public CResult InsertPolicycalculation(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            int iQSInstanceID = 0;
            try
            {
                XIIBO oBO = new XIIBO();
                var oPolicy = new XIIBO();
                var sSessionID = HttpContext.Current.Session.SessionID;
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                int iOrgID = Convert.ToInt32(oParams.Where(m => m.sName.ToLower() == "iOrganizationID".ToLower()).Select(m => m.sValue).FirstOrDefault());
                string sDataBase = oParams.Where(m => m.sName.ToLower() == "sDataBase".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iID = oParams.Where(m => m.sName.ToLower() == "BOIID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIXI oIXI = new XIIXI();
                XIInfraCache oCache = new XIInfraCache();
                XIInfraUsers oUser = new XIInfraUsers();
                string sUserName = string.Empty;
                CUserInfo oInfo = oUser.Get_UserInfo();
                sUserName = oInfo.sName == null ? null : (oInfo.sName.Length >= 15 ? oInfo.sName.Substring(0, 14) : oInfo.sName);
                List<CNV> oWhereParams = new List<CNV>();
                oWhereParams.Add(new CNV { sName = "FKiQuoteID", sValue = QuoteID });
                decimal price = 0;
                decimal IPTValue = 0;
                decimal Total = 0;
                decimal Payamount = 0;
                decimal OverrideAdmin = 0;
                decimal InsurerCharge = 0;
                var ProductAddonID = "";
                var addonname = "";
                var addtotal = "";
                var Acpolicyid = "";
                XIIBO PolicyFinancialBOI = new XIIBO();
                XIDBO oPolicyFinancialBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "PolicyFinancial_T", null);
                PolicyFinancialBOI.BOD = oPolicyFinancialBOD;
                if (string.IsNullOrEmpty(iID)) { 
                var oBOI = oIXI.BOI("Aggregations", QuoteID);
                var Policyid = oBOI.Attributes["FKsPolicyNo"].sValue;
                var iPaymenttype = oBOI.Attributes["iPaymentTypeforNW"].sValue;
                InsurerCharge = Convert.ToDecimal(oBOI.Attributes["rInsurerCharge"].sValue);
                OverrideAdmin = Convert.ToDecimal(oBOI.Attributes["rOverrideAdmin"].sValue);
                if (iPaymenttype == "20")   //Full payment
                {
                    price = Convert.ToDecimal(oBOI.Attributes["rPrice"].sValue);
                    IPTValue = Convert.ToDecimal(oBOI.Attributes["rIPTValue"].sValue);
                    Total = Convert.ToDecimal(price - IPTValue);
                    Payamount = Convert.ToDecimal(oBOI.Attributes["rFinalQuote"].sValue);
                }
                if (iPaymenttype == "10")  //Half payment
                {
                    price = Convert.ToDecimal(oBOI.Attributes["rPrice"].sValue);
                    IPTValue = Convert.ToDecimal(oBOI.Attributes["rIPTValue"].sValue);
                    Total = Convert.ToDecimal(price - IPTValue);
                    Payamount = Convert.ToDecimal(oBOI.Attributes["rDeposit"].sValue);
                }
                if (iPaymenttype == "30")   //Finance
                {
                    price = Convert.ToDecimal(oBOI.Attributes["rPrice"].sValue);
                    IPTValue = Convert.ToDecimal(oBOI.Attributes["rIPTValue"].sValue);
                    Total = Convert.ToDecimal(price - IPTValue);
                    Payamount = Convert.ToDecimal(oBOI.Attributes["rDeposit"].sValue);
                }
                PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", "012B063F-F669-4A02-BA85-7BCB8795B598");
                PolicyFinancialBOI.SetAttribute("rSignedAmount", Total.ToString());
                PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                PolicyFinancialBOI.Save(PolicyFinancialBOI);  //Insurance Premium(exc IPT) saving
                PolicyFinancialBOI.SetAttribute("ID", "0");
                PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", "3D04168F-EE08-44F2-848F-F8FA8DBA58D7");
                PolicyFinancialBOI.SetAttribute("rSignedAmount", IPTValue.ToString());
                PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                PolicyFinancialBOI.Save(PolicyFinancialBOI);  //IPT Saving
                if (InsurerCharge != 0)
                {
                    PolicyFinancialBOI.SetAttribute("ID", "0");
                    PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", "36C3F1FD-9244-487A-8B32-7A0283A2193B");
                    PolicyFinancialBOI.SetAttribute("rSignedAmount", InsurerCharge.ToString());
                    PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.Save(PolicyFinancialBOI);     //InsurerCharge Saving
                }
                if (OverrideAdmin != 0)
                {
                    PolicyFinancialBOI.SetAttribute("ID", "0");
                    PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", "4E9CD7E7-4115-4B3A-8EDD-5D7FC2C4873B");
                    PolicyFinancialBOI.SetAttribute("rSignedAmount", OverrideAdmin.ToString());
                    PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.Save(PolicyFinancialBOI);    //OverrideAdmin Saving
                }
                var oBOII = oIXI.BOI("PaymentRequest_T", null, null, oWhereParams);
                if (oBOII != null) //Card Payment
                {
                    PolicyFinancialBOI.SetAttribute("ID", "0");
                    PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", "EC4990DC-E284-4972-9D75-8E3FAED24C67");
                    if (iPaymenttype == "10" || iPaymenttype == "30")
                    {
                        PolicyFinancialBOI.SetAttribute("rSignedAmount", Payamount.ToString());
                    }
                    else
                    {
                        PolicyFinancialBOI.SetAttribute("rSignedAmount", Payamount.ToString());
                    }
                    PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.Save(PolicyFinancialBOI);
                }
                else  //cash payment
                {
                    PolicyFinancialBOI.SetAttribute("ID", "0");
                    PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", "C961FC0A-78A0-4008-8824-4F1DC16984DD");
                    if (iPaymenttype == "10" || iPaymenttype == "30")
                    {
                        PolicyFinancialBOI.SetAttribute("rSignedAmount", Payamount.ToString());
                    }
                    else
                    {
                        PolicyFinancialBOI.SetAttribute("rSignedAmount", Payamount.ToString());
                    }
                    PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.Save(PolicyFinancialBOI);
                }
                XID1Click PV1Click = new XID1Click();       //Addon saving
                var PurchaseQuery = "select * from ACPurchase_T where FKiACPolicyID=" + Policyid + " and " + "rAddonTotal" + " !=0";
                PV1Click.Query = PurchaseQuery;
                PV1Click.Name = "ACPurchase_T";
                var Result = PV1Click.OneClick_Execute();
                if (Result != null && Result.Count() > 0)
                {
                    foreach (var purchase in Result)
                    {
                        var Name = purchase.Value.AttributeI("sname").sValue;
                        var Addontotal = purchase.Value.AttributeI("raddontotal").sValue;
                            List<CNV> oWhereParam = new List<CNV>();
                            oWhereParam.Add(new CNV { sName = "sName", sValue = Name });
                            var BOII = oIXI.BOI("reffinancialtype_T", null, null, oWhereParam);
                            if (BOII != null)
                            {
                                var RefFinancialTypeIDXIGUID = BOII.Attributes["XIGUID"].sValue;
                                PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", RefFinancialTypeIDXIGUID);
                            }
                            PolicyFinancialBOI.SetAttribute("ID", "0");
                        PolicyFinancialBOI.SetAttribute("rSignedAmount", Addontotal.ToString());
                        PolicyFinancialBOI.SetAttribute("FKiPolicyID", Policyid);
                        PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                        PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                        PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                        PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                        PolicyFinancialBOI.Save(PolicyFinancialBOI);
                    }
                }
            }
               else
                {
                    var oBOI = oIXI.BOI("ACPurchase_T", iID);
                    if(oBOI != null)
                    { 
                     ProductAddonID = oBOI.Attributes["FKiProductAddonID"].sValue;
                     addtotal = oBOI.Attributes["rAddonTotal"].sValue;
                     Acpolicyid = oBOI.Attributes["FKiACPolicyID"].sValue;
                    }
                    var oBOIi = oIXI.BOI("ProductAddon_T", ProductAddonID);
                    if (oBOIi != null) 
                    { 
                       addonname = oBOIi.Attributes["sAddonName"].sValue;
                    }
                    List<CNV> oWhereParam = new List<CNV>();
                    oWhereParam.Add(new CNV { sName = "sName", sValue = addonname });
                    var BOII = oIXI.BOI("reffinancialtype_T", null, null, oWhereParam);
                    if (BOII != null)
                    {
                        var RefFinancialTypeIDXIGUID = BOII.Attributes["XIGUID"].sValue;
                        PolicyFinancialBOI.SetAttribute("iRefFinancialTypeIDXIGUID", RefFinancialTypeIDXIGUID);
                    }
                    PolicyFinancialBOI.SetAttribute("ID", "0");
                    PolicyFinancialBOI.SetAttribute("rSignedAmount", addtotal.ToString());
                    PolicyFinancialBOI.SetAttribute("FKiPolicyID", Acpolicyid);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                    PolicyFinancialBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                    PolicyFinancialBOI.Save(PolicyFinancialBOI);
                }
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult, iQSInstanceID);
            }
            return oResult;
        }
        public CResult GoToNextStepWithQSFieldValue(List<CNV> oParams)
        {
            CResult oResult = new CResult();
            try
            {
                var sSessionID = HttpContext.Current.Session.SessionID;
                string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var QSIID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQuestionName = oParams.Where(m => m.sName.ToLower() == "sQuestionName".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sValue = oParams.Where(m => m.sName.ToLower() == "sValue".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sNextStep = oParams.Where(m => m.sName.ToLower() == "sNextStep".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sOperator = oParams.Where(m => m.sName.ToLower() == "oPerator".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIIQS oQSI = new XIIQS();
                XIIXI oXII = new XIIXI();
                Guid QSIGUID = Guid.Empty;
                Guid.TryParse(QSIID, out QSIGUID);
                if (QSIGUID != null && QSIGUID != Guid.Empty)
                {
                    oQSI = oXII.GetQSXIValuesByQSIID(QSIGUID.ToString());
                }
                if (!string.IsNullOrEmpty(sOperator))
                {
                    //var days = oQSI.XIValues.Where(x => x.Key.ToLower() == sQuestionName.ToLower()).Select(y => y.Value.sValue).FirstOrDefault();
                    if (Convert.ToInt32(oQSI.XIIValues(sQuestionName)) > Convert.ToInt32(sValue))
                    {
                        oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sNextStep, null, null);
                    }
                }
                if (oQSI.XIIValues(sQuestionName) == sValue)
                    oCache.Set_ParamVal(sSessionID, sGUID, null, "NextStep", sNextStep, null, null);
            }
            catch (Exception ex)
            {
                oResult.sMessage = "ERROR: " + oResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oResult.LogToFile();
                oXID.SaveErrortoDB(oResult);
            }

            return oResult;
        }
        

        public CResult RequirementDiaryInsertion(List<CNV> oParams)
        {
            CResult oCResult = new CResult(); // always
            long iTraceLevel = 10;
            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = oCResult.Get_MethodName();

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            if (oCResult.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCResult.xiStatus;
            }
            int iPolicyID = 0;
            int iQSInstanceID = 0;
            try
            {
                var sSessionID = oParams.Where(m => m.sName.ToLower() == "sSessionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                var sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iProductID = oParams.Where(m => m.sName.ToLower() == "iProductID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string iACPolicyID = oParams.Where(m => m.sName.ToLower() == "{XIP|iPolicyID}".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sACPolicyVersionID = oParams.Where(m => m.sName.ToLower() == "FKiPolicyVersionID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sQSInstanceID = oParams.Where(m => m.sName.ToLower() == "iQSInstanceID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string sUserID = oParams.Where(m => m.sName.ToLower() == "iUserID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                string QuoteID = oParams.Where(m => m.sName.ToLower() == "iQuoteID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                XIInfraUsers oUser = new XIInfraUsers();
                string sUserName = string.Empty;
                CUserInfo oInfo = oUser.Get_UserInfo();
                sUserName = oInfo.sName == null ? null : (oInfo.sName.Length >= 15 ? oInfo.sName.Substring(0, 14) : oInfo.sName);
                XIIBO oBO = new XIIBO();
                XIIBO RequirementBOI = new XIIBO();
                XIDBO oRequirementBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "Requirement_T", null);
                RequirementBOI.BOD = oRequirementBOD;
                XIIBO ERPBOI = new XIIBO();
                XIDBO oERPBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "ERP_Task", null);
                ERPBOI.BOD = oERPBOD;
                var oBOIi = oIXI.BOI("Aggregations", QuoteID);
                var iPolicyid = oBOIi.Attributes["FKsPolicyNo"].sValue;
                var iPaymenttype = oBOIi.Attributes["iPaymentTypeforNW"].sValue;
                var Totaldue = oBOIi.Attributes["rTotalDue"].sValue;
                var oBOI = oIXI.BOI("ACPolicy_T", iPolicyid);
                string policyStatus = string.Empty;
                string sInceptionDate = string.Empty;
                if (oBOI.Attributes.ContainsKey("dCoverStart"))
                {
                    sInceptionDate = oBOI.Attributes["dCoverStart"].sValue;
                }
                XID1Click PV1Click = new XID1Click();     
                var RequirementQuery = "select * from Requirement_T where FKiPolicyID=" + iPolicyid + " and " + "bIsPolicyDocument" + " =0";
                PV1Click.Query = RequirementQuery;
                PV1Click.Name = "Requirement_T";
                var Result = PV1Click.OneClick_Execute();
                var ID = "";
                var sDueDate = "";
                var QSInstance = "";
                var ProductID = "";
                if (Result != null && Result.Count() > 0)
                {
                    foreach (var item in Result)
                    {
                        ID = item.Value.AttributeI("id").sValue;
                        var sDueInDays = item.Value.AttributeI("idueindays").sValue;
                        var RequiredDocID = item.Value.AttributeI("fkirequireddocid").sValue;
                        ProductID = item.Value.AttributeI("fkiproductid").sValue;
                        QSInstance = item.Value.AttributeI("fkiqsinstanceidxiguid").sValue;
                        var selection = item.Value.AttributeI("bIsSelection").sValue;
                        if (!string.IsNullOrEmpty(sDueInDays) && !string.IsNullOrEmpty(sInceptionDate))
                        {
                            int iDueInDays = Convert.ToInt32(sDueInDays);
                            var sPolicyStartdate = oBO.ConvertToDtTime(sInceptionDate);
                            sDueDate = sPolicyStartdate.AddDays(iDueInDays).ToString("yyyy-MM-dd");
                            RequirementBOI.SetAttribute("dDue", sDueDate);
                            RequirementBOI.SetAttribute("ID", ID);
                            RequirementBOI.SetAttribute("dRequested", sInceptionDate);
                            RequirementBOI.Save(RequirementBOI);
                        }
                        if (!string.IsNullOrEmpty(RequiredDocID) && selection == "True")
                         {
                            List<CNV> oWhereParams = new List<CNV>();
                            XIIXI oIXI = new XIIXI();
                            oWhereParams.Add(new CNV { sName = "FKiReqDocID", sValue = RequiredDocID });
                            oWhereParams.Add(new CNV { sName = "FKiProductID", sValue = ProductID });
                            var oBOII = oIXI.BOI("ProductDocMapping_T", null, null, oWhereParams);
                            if (oBOII != null)
                            {
                                var ErptaskID = oBOII.Attributes["fkierptaskid"].sValue;
                               if (!string.IsNullOrEmpty(ErptaskID))
                               { 
                                var BOI = oIXI.BOI("ERP_Task", ErptaskID);
                                if (BOI != null)
                                {
                                    ERPBOI.SetAttribute("ID", "0");
                                    ERPBOI.SetAttribute("sName", BOI.Attributes["sName"].sValue);
                                    ERPBOI.SetAttribute("iDuration", BOI.Attributes["iDuration"].sValue);
                                    ERPBOI.SetAttribute("FKiACPolicyID", iPolicyid);
                                    ERPBOI.SetAttribute("dDue", sDueDate);
                                    ERPBOI.SetAttribute("FKiOrgID", BOI.Attributes["FKiOrgID"].sValue);
                                    ERPBOI.SetAttribute("FKiRequiredDocID", RequiredDocID);
                                    ERPBOI.SetAttribute("FKiProductID", ProductID);
                                    ERPBOI.SetAttribute("FKiQSInstanceIDXIGUID", QSInstance);
                                    ERPBOI.SetAttribute("iStatus", "5");
                                    ERPBOI.SetAttribute("dStart", sInceptionDate);
                                    ERPBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                                    ERPBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                                    ERPBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                                    ERPBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                                    ERPBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                                    ERPBOI.Save(ERPBOI);
                                }
                               }
                            }
                        }
                    }
                    var ProductQuery = "select * from ERP_Task where FKiProductID=" + ProductID + " and " + "FKiQSInstanceIDXIGUID is null";
                    PV1Click.Query = ProductQuery;
                    PV1Click.Name = "ERP_Task";
                    var oResult = PV1Click.OneClick_Execute();
                    if (oResult != null && oResult.Count() > 0)
                    {
                        foreach (var items in oResult)
                        {
                            ERPBOI.SetAttribute("ID", "0");
                            ERPBOI.SetAttribute("FKiACPolicyID", iPolicyid);
                            ERPBOI.SetAttribute("dDue", sDueDate);
                            ERPBOI.SetAttribute("dStart", sInceptionDate);
                            ERPBOI.SetAttribute("FKiQSInstanceIDXIGUID", QSInstance);
                            ERPBOI.SetAttribute("FKiProductID", ProductID);
                            ERPBOI.SetAttribute("iStatus", "5");
                            ERPBOI.SetAttribute("sName", items.Value.AttributeI("sName").sValue);
                            ERPBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                            ERPBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                            ERPBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                            ERPBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                            ERPBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                            ERPBOI.Save(ERPBOI);
                        }
                    }
                    if (iPaymenttype == "10" || iPaymenttype == "30")
                    {
                        ERPBOI.SetAttribute("ID", "0");
                        ERPBOI.SetAttribute("sName", "Policy Due Amount Is  "+Totaldue+"");
                        int iDueInDays = Convert.ToInt32("30");
                        var sPolicyStartdate = oBO.ConvertToDtTime(sInceptionDate);
                        sDueDate = sPolicyStartdate.AddDays(iDueInDays).ToString("yyyy-MM-dd");
                        ERPBOI.SetAttribute("FKiACPolicyID", iPolicyid);
                        ERPBOI.SetAttribute("dDue", sDueDate);
                        ERPBOI.SetAttribute("dStart", sInceptionDate);
                        ERPBOI.SetAttribute("FKiQSInstanceIDXIGUID", QSInstance);
                        ERPBOI.SetAttribute("FKiProductID", ProductID);
                        ERPBOI.SetAttribute(XIConstant.Key_XIDeleted, "0");
                        ERPBOI.SetAttribute(XIConstant.Key_XICrtdBy, sUserName);
                        ERPBOI.SetAttribute(XIConstant.Key_XICrtdWhn, DateTime.Now.ToString());
                        ERPBOI.SetAttribute(XIConstant.Key_XIUpdtdBy, sUserName);
                        ERPBOI.SetAttribute(XIConstant.Key_XIUpdtdWhn, DateTime.Now.ToString());
                        ERPBOI.Save(ERPBOI);
                    }
                }
                oCResult.oResult = null;
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "RequirementDiaryInsertion method execution completed" });
            }
            catch (Exception ex)
            {
               oCResult.sMessage = "ERROR: [QSInstanceID: " + iQSInstanceID + " _PolicyID: " + iPolicyID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error: In Requirements_" + oCResult.sMessage });
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult, iQSInstanceID, iPolicyID);
            }
            return oCResult; // always
        }
        public CResult AuditCalls(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            CResult oCR = new CResult(); // always
            long iTraceLevel = 10;

            //get iTraceLevel from ??somewhere fast - cache against user??

            oCResult.sClassName = oCResult.Get_Class(); //AUTO-DERIVE
            oCResult.sFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;

            oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiInProcess;

            if (iTraceLevel > 0)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Started Execution" });
            }
            //if iTraceLevel>0 then 
            //oCResult.oTraceStack.Trace("Stage", "Begin query build",milliseconds)
            //oCResult.oTraceStack.Trace("Stage",sError)
            //end if

            if (oCR.xiStatus == xiEnumSystem.xiFuncResult.xiError)
            {
                oCResult.xiStatus = oCR.xiStatus;
                //oCResult.oTraceStack.Trace("Stage",sError)
            }
            int iIID = 0;
            try
            {
                var UserorgID = HttpContext.Current.Session["iUserOrg"];
                //List<CNV> oWhrParams = new List<CNV>();
                //oWhrParams.Add(new CNV { sName = "FKiOrgID", sValue = UserorgID.ToString() });
                //oWhrParams.Add(new CNV { sName = "sKey", sValue = "LogActivity" });
                //XIIBO oBOI = new XIIBO(); XIIXI oXII = new XIIXI();
                //oBOI = oXII.BOI("XIConfig_T", null, null, oWhrParams);
                XID1Click oXI1Click = new XID1Click();
                oXI1Click.Query = "Select sValue from XIConfig_T WHERE FKiOrgID='" + UserorgID + "' and sKey='LogCallsToActivity' and iStatus=10";
                oXI1Click.Name = "XIConfig_T";
                var Result = oXI1Click.Execute_Query();
                var sReturnValue = "";
                if (Result.Rows.Count > 0)
                {
                    sReturnValue = Result.Rows[0][0].ToString();
                }

                if (sReturnValue.ToLower() == "true" || sReturnValue.ToLower() == "yes")
                {
                    var iInstanceID = 0;
                    string iID = oParams.Where(m => m.sName.ToLower() == "iLeadID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    if (int.TryParse(iID, out iIID))
                    { }
                    string iInsID = oParams.Where(m => m.sName.ToLower() == "iAuditID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    string sInfo = oParams.Where(m => m.sName.ToLower() == "sAuditInfo".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    if (string.IsNullOrEmpty(sInfo))
                    {
                        sInfo = oParams.Where(m => m.sName.ToLower() == "sAuditInfo1".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    }
                    string UserID = oParams.Where(m => m.sName.ToLower() == "LoggedUserid".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    string CommID = oParams.Where(m => m.sName.ToLower() == "FKiCommIID".ToLower()).Select(m => m.sValue).FirstOrDefault();
                    XIIBO oBOI = new XIIBO();
                    oBOI.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO_All, "Call_T", null);
                    //oBOICopy.BOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, oBOInstance.BOD.sAuditBOName);
                    if (iInsID != null)
                    {
                        int.TryParse(iInsID, out iInstanceID);
                    }
                    oBOI.SetAttribute(oBOI.BOD.sPrimaryKey, iInstanceID.ToString());
                    oBOI.SetAttribute("iStatus", "10");
                    oBOI.SetAttribute("sNotes", sInfo);
                    oBOI.SetAttribute("FKiLeadID", iID);
                    oBOI.SetAttribute("iType", "20");
                    //oBOI.SetAttribute("FKiMergeEmailContentID", "1");
                    oBOI.SetAttribute("dWhen", DateTime.Now.ToString());
                    oBOI.SetAttribute("iHandler", UserID);
                    oBOI.SetAttribute("FKiCommIID", CommID);
                    var oAuditBOResponse = oBOI.Save(oBOI);
                    if (oAuditBOResponse.bOK && oAuditBOResponse.oResult != null)
                    {
                        var oRes = (XIIBO)oAuditBOResponse.oResult;
                        var iBOIID = oRes.Attributes.Values.Where(m => m.sName.ToLower() == oBOI.BOD.sPrimaryKey.ToLower()).FirstOrDefault();
                        if (iBOIID != null)
                        {
                            int.TryParse(iBOIID.sValue, out iInstanceID);
                        }
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
                        oCResult.oResult = iInstanceID;
                    }
                    else
                    {
                        oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                    }
                }
                else
                {
                    oCResult = Audit_Policy(oParams);
                }
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While Executing Audit Saving" });
                oCResult.sMessage = "ERROR: [ID: " + iIID + " " + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        public CResult Audit(List<CNV> oParams)
        {
            return Audit_Policy(oParams);
        }

        public CResult DeleteCheckedLeads(List<CNV> oParams, iSiganlR oSignalr)
        {
            CResult oCResult = new CResult();
            oSignalR = oSignalr;
            string sGUID = oParams.Where(m => m.sName.ToLower() == "sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string sSessionID = HttpContext.Current.Session.SessionID;
            var Checkedids = oCache.Get_ParamVal(sSessionID, sGUID, null, "{XIP|SelectedInstanceIDs}");
            try
            {
                var Leadids = Checkedids.Split(',').ToList();
                foreach (var Leadid in Leadids)
                {
                    var oBOI = oIXI.BOI("Lead", Leadid);
                    oBOI.oSignalR = oSignalR;
                    if (oBOI != null)
                    {
                        oBOI.SetAttribute("XIDeleted", "1");
                        oCResult = oBOI.Save(oBOI);
                    }
                    List<CNV> oWhereParams = new List<CNV>();
                    oWhereParams.Add(new CNV { sName = "FKiTargetIDBOIID", sValue = Leadid });
                    var oBOII = oIXI.BOI("XLinkedObject_T", null, null, oWhereParams);
                    if (oBOII != null)
                    {
                        oBOII.SetAttribute("XIDeleted", "1");
                        oCResult = oBOII.Save(oBOII);
                    }
                }
                    oCResult.oResult = "Success";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While DeleteCheckedLeads" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }

        public CResult BlockedLeads(List<CNV> oParams)
        {
            CResult oCResult = new CResult();
            string sGUID = oParams.Where(m => m.sName.ToLower() == "P.sGUID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string iID = oParams.Where(m => m.sName.ToLower() == "BOIID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string LeadID = oParams.Where(m => m.sName.ToLower() == "iLeadID".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string PostCode = oParams.Where(m => m.sName.ToLower() == "LeadPostCode".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string Mob = oParams.Where(m => m.sName.ToLower() == "sMob".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string LastName = oParams.Where(m => m.sName.ToLower() == "sLastName".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string orgid = oParams.Where(m => m.sName.ToLower() == "orgid".ToLower()).Select(m => m.sValue).FirstOrDefault();
            string FirstName = oParams.Where(m => m.sName.ToLower() == "FirstName".ToLower()).Select(m => m.sValue).FirstOrDefault();
            XIIBO BlockedBOI = new XIIBO();
            XIDBO ObjectBOD = (XIDBO)oCache.GetObjectFromCache(XIConstant.CacheBO, "XIBlockedLeads_T", null);
            BlockedBOI.BOD = ObjectBOD;
            try
            {
                if (!string.IsNullOrEmpty(iID))
                {
                    var oBOI = oIXI.BOI("Lead", iID);
                    var Reason = oBOI.Attributes["BlockedReason"].sValue;
                    if (oBOI != null)
                    {
                        oBOI.SetAttribute("IsBlocked", "1");
                        oCResult = oBOI.Save(oBOI);
                        BlockedBOI.SetAttribute("FKiLeadID", iID);
                        BlockedBOI.SetAttribute("FKiBlockedReason", Reason.ToString());
                        BlockedBOI.Save(BlockedBOI);
                    }
                }
                else
                {
                    XID1Click PV1Click = new XID1Click();
                    var Query = "select top (1)  (ID)  from Lead_T where IsBlocked = " + 1 + " and " + "sPostCode='" + PostCode + "'" + " and " + "sLastName='" + LastName + "'" + " and " + "sMob='" + Mob + "'" + " and " + "sFirstName='" + FirstName + "'" + " and " + "FKiOrgID='" + orgid + "'";
                    PV1Click.Query = Query;
                    PV1Click.Name = "Lead_T";
                    var Result = PV1Click.OneClick_Execute();
                    if (Result.Count() != 0)
                    {
                        var oBOII = oIXI.BOI("Lead", LeadID);
                        oBOII.SetAttribute("IsBlocked", "1");
                        oBOII.SetAttribute("BlockedReason", "20");
                        oCResult = oBOII.Save(oBOII);
                        BlockedBOI.SetAttribute("FKiLeadID", LeadID);
                        BlockedBOI.SetAttribute("FKiBlockedReason", "20");
                        BlockedBOI.Save(BlockedBOI);
                    }
                }
                oCResult.oResult = "Success";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiSuccess;
            }
            catch (Exception ex)
            {
                oCResult.oTraceStack.Add(new CNV { sName = "Stage", sValue = "Error While DeleteCheckedLeads" });
                oCResult.sMessage = "ERROR: [" + oCResult.Get_Class() + "." + System.Reflection.MethodBase.GetCurrentMethod().Name + "] - " + ex.Message + " - Trace: " + ex.StackTrace + "\r\n";
                oCResult.xiStatus = xiEnumSystem.xiFuncResult.xiError;
                oCResult.LogToFile();
                oXID.SaveErrortoDB(oCResult);
            }
            return oCResult;
        }
    }
}
